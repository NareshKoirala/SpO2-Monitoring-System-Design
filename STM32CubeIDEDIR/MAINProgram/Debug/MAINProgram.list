
MAINProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800a4a8  0800a4a8  0000b4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b0  0800b1b0  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b0  0800b1b0  0000c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1b8  0800b1b8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1b8  0800b1b8  0000c1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1bc  0800b1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b1c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001d4  0800b394  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800b394  0000d8bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010472  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002663  00000000  00000000  0001d66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2c  00000000  00000000  00020a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6e  00000000  00000000  00021434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001201d  00000000  00000000  00038ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f405  00000000  00000000  0004aebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  000da308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  000de4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a48c 	.word	0x0800a48c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800a48c 	.word	0x0800a48c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fd99 	bl	8001f70 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fcd9 	bl	8001e00 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd8b 	bl	8001f70 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd81 	bl	8001f70 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd03 	bl	8001e88 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fcf9 	bl	8001e88 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fab7 	bl	8000a20 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa37 	bl	8000930 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 faa9 	bl	8000a20 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa9f 	bl	8000a20 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa45 	bl	8000980 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa3b 	bl	8000980 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	@ (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f002 fd6a 	bl	8003050 <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f002 fd65 	bl	8003050 <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	d434      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 800058e:	469b      	mov	fp, r3
 8000590:	4653      	mov	r3, sl
 8000592:	465a      	mov	r2, fp
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83b      	bhi.n	800061c <__udivmoddi4+0xc4>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e079      	b.n	800069e <__udivmoddi4+0x146>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e076      	b.n	80006a4 <__udivmoddi4+0x14c>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e029      	b.n	8000624 <__udivmoddi4+0xcc>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	469b      	mov	fp, r3
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4652      	mov	r2, sl
 8000602:	40da      	lsrs	r2, r3
 8000604:	4641      	mov	r1, r8
 8000606:	0013      	movs	r3, r2
 8000608:	464a      	mov	r2, r9
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	4642      	mov	r2, r8
 8000610:	431f      	orrs	r7, r3
 8000612:	4653      	mov	r3, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	001e      	movs	r6, r3
 8000618:	42af      	cmp	r7, r5
 800061a:	d9c3      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	4643      	mov	r3, r8
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0d8      	beq.n	80005dc <__udivmoddi4+0x84>
 800062a:	07fb      	lsls	r3, r7, #31
 800062c:	0872      	lsrs	r2, r6, #1
 800062e:	431a      	orrs	r2, r3
 8000630:	4646      	mov	r6, r8
 8000632:	087b      	lsrs	r3, r7, #1
 8000634:	e00e      	b.n	8000654 <__udivmoddi4+0xfc>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d101      	bne.n	800063e <__udivmoddi4+0xe6>
 800063a:	42a2      	cmp	r2, r4
 800063c:	d80c      	bhi.n	8000658 <__udivmoddi4+0x100>
 800063e:	1aa4      	subs	r4, r4, r2
 8000640:	419d      	sbcs	r5, r3
 8000642:	2001      	movs	r0, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2100      	movs	r1, #0
 800064a:	3e01      	subs	r6, #1
 800064c:	1824      	adds	r4, r4, r0
 800064e:	414d      	adcs	r5, r1
 8000650:	2e00      	cmp	r6, #0
 8000652:	d006      	beq.n	8000662 <__udivmoddi4+0x10a>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d9ee      	bls.n	8000636 <__udivmoddi4+0xde>
 8000658:	3e01      	subs	r6, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__udivmoddi4+0xfc>
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	465b      	mov	r3, fp
 8000668:	1900      	adds	r0, r0, r4
 800066a:	4169      	adcs	r1, r5
 800066c:	2b00      	cmp	r3, #0
 800066e:	db24      	blt.n	80006ba <__udivmoddi4+0x162>
 8000670:	002b      	movs	r3, r5
 8000672:	465a      	mov	r2, fp
 8000674:	4644      	mov	r4, r8
 8000676:	40d3      	lsrs	r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	40e2      	lsrs	r2, r4
 800067c:	001c      	movs	r4, r3
 800067e:	465b      	mov	r3, fp
 8000680:	0015      	movs	r5, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	db2a      	blt.n	80006dc <__udivmoddi4+0x184>
 8000686:	0026      	movs	r6, r4
 8000688:	409e      	lsls	r6, r3
 800068a:	0033      	movs	r3, r6
 800068c:	0026      	movs	r6, r4
 800068e:	4647      	mov	r7, r8
 8000690:	40be      	lsls	r6, r7
 8000692:	0032      	movs	r2, r6
 8000694:	1a80      	subs	r0, r0, r2
 8000696:	4199      	sbcs	r1, r3
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	9101      	str	r1, [sp, #4]
 800069c:	e79e      	b.n	80005dc <__udivmoddi4+0x84>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d8bc      	bhi.n	800061c <__udivmoddi4+0xc4>
 80006a2:	e782      	b.n	80005aa <__udivmoddi4+0x52>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	9100      	str	r1, [sp, #0]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	e785      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	4646      	mov	r6, r8
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0023      	movs	r3, r4
 80006c8:	40f3      	lsrs	r3, r6
 80006ca:	4644      	mov	r4, r8
 80006cc:	4313      	orrs	r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	40e2      	lsrs	r2, r4
 80006d2:	001c      	movs	r4, r3
 80006d4:	465b      	mov	r3, fp
 80006d6:	0015      	movs	r5, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dad4      	bge.n	8000686 <__udivmoddi4+0x12e>
 80006dc:	4642      	mov	r2, r8
 80006de:	002f      	movs	r7, r5
 80006e0:	2320      	movs	r3, #32
 80006e2:	0026      	movs	r6, r4
 80006e4:	4097      	lsls	r7, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	40de      	lsrs	r6, r3
 80006ea:	003b      	movs	r3, r7
 80006ec:	4333      	orrs	r3, r6
 80006ee:	e7cd      	b.n	800068c <__udivmoddi4+0x134>

080006f0 <__aeabi_fdiv>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	464f      	mov	r7, r9
 80006f4:	4646      	mov	r6, r8
 80006f6:	46d6      	mov	lr, sl
 80006f8:	0244      	lsls	r4, r0, #9
 80006fa:	b5c0      	push	{r6, r7, lr}
 80006fc:	0047      	lsls	r7, r0, #1
 80006fe:	1c0e      	adds	r6, r1, #0
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0e3f      	lsrs	r7, r7, #24
 8000704:	0fc5      	lsrs	r5, r0, #31
 8000706:	2f00      	cmp	r7, #0
 8000708:	d03c      	beq.n	8000784 <__aeabi_fdiv+0x94>
 800070a:	2fff      	cmp	r7, #255	@ 0xff
 800070c:	d042      	beq.n	8000794 <__aeabi_fdiv+0xa4>
 800070e:	2300      	movs	r3, #0
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	4699      	mov	r9, r3
 8000714:	469a      	mov	sl, r3
 8000716:	00e4      	lsls	r4, r4, #3
 8000718:	04d2      	lsls	r2, r2, #19
 800071a:	4314      	orrs	r4, r2
 800071c:	3f7f      	subs	r7, #127	@ 0x7f
 800071e:	0273      	lsls	r3, r6, #9
 8000720:	0a5b      	lsrs	r3, r3, #9
 8000722:	4698      	mov	r8, r3
 8000724:	0073      	lsls	r3, r6, #1
 8000726:	0e1b      	lsrs	r3, r3, #24
 8000728:	0ff6      	lsrs	r6, r6, #31
 800072a:	2b00      	cmp	r3, #0
 800072c:	d01b      	beq.n	8000766 <__aeabi_fdiv+0x76>
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d013      	beq.n	800075a <__aeabi_fdiv+0x6a>
 8000732:	4642      	mov	r2, r8
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	00d2      	lsls	r2, r2, #3
 8000738:	04c9      	lsls	r1, r1, #19
 800073a:	4311      	orrs	r1, r2
 800073c:	4688      	mov	r8, r1
 800073e:	2000      	movs	r0, #0
 8000740:	3b7f      	subs	r3, #127	@ 0x7f
 8000742:	0029      	movs	r1, r5
 8000744:	1aff      	subs	r7, r7, r3
 8000746:	464b      	mov	r3, r9
 8000748:	4071      	eors	r1, r6
 800074a:	b2c9      	uxtb	r1, r1
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d900      	bls.n	8000752 <__aeabi_fdiv+0x62>
 8000750:	e0b5      	b.n	80008be <__aeabi_fdiv+0x1ce>
 8000752:	4a74      	ldr	r2, [pc, #464]	@ (8000924 <__aeabi_fdiv+0x234>)
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	58d3      	ldr	r3, [r2, r3]
 8000758:	469f      	mov	pc, r3
 800075a:	4643      	mov	r3, r8
 800075c:	2b00      	cmp	r3, #0
 800075e:	d13f      	bne.n	80007e0 <__aeabi_fdiv+0xf0>
 8000760:	3fff      	subs	r7, #255	@ 0xff
 8000762:	3302      	adds	r3, #2
 8000764:	e003      	b.n	800076e <__aeabi_fdiv+0x7e>
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12d      	bne.n	80007c8 <__aeabi_fdiv+0xd8>
 800076c:	2301      	movs	r3, #1
 800076e:	0029      	movs	r1, r5
 8000770:	464a      	mov	r2, r9
 8000772:	4071      	eors	r1, r6
 8000774:	b2c9      	uxtb	r1, r1
 8000776:	431a      	orrs	r2, r3
 8000778:	2a0e      	cmp	r2, #14
 800077a:	d838      	bhi.n	80007ee <__aeabi_fdiv+0xfe>
 800077c:	486a      	ldr	r0, [pc, #424]	@ (8000928 <__aeabi_fdiv+0x238>)
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	5882      	ldr	r2, [r0, r2]
 8000782:	4697      	mov	pc, r2
 8000784:	2c00      	cmp	r4, #0
 8000786:	d113      	bne.n	80007b0 <__aeabi_fdiv+0xc0>
 8000788:	2304      	movs	r3, #4
 800078a:	4699      	mov	r9, r3
 800078c:	3b03      	subs	r3, #3
 800078e:	2700      	movs	r7, #0
 8000790:	469a      	mov	sl, r3
 8000792:	e7c4      	b.n	800071e <__aeabi_fdiv+0x2e>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d105      	bne.n	80007a4 <__aeabi_fdiv+0xb4>
 8000798:	2308      	movs	r3, #8
 800079a:	4699      	mov	r9, r3
 800079c:	3b06      	subs	r3, #6
 800079e:	27ff      	movs	r7, #255	@ 0xff
 80007a0:	469a      	mov	sl, r3
 80007a2:	e7bc      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007a4:	230c      	movs	r3, #12
 80007a6:	4699      	mov	r9, r3
 80007a8:	3b09      	subs	r3, #9
 80007aa:	27ff      	movs	r7, #255	@ 0xff
 80007ac:	469a      	mov	sl, r3
 80007ae:	e7b6      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007b0:	0020      	movs	r0, r4
 80007b2:	f002 fc2f 	bl	8003014 <__clzsi2>
 80007b6:	2776      	movs	r7, #118	@ 0x76
 80007b8:	1f43      	subs	r3, r0, #5
 80007ba:	409c      	lsls	r4, r3
 80007bc:	2300      	movs	r3, #0
 80007be:	427f      	negs	r7, r7
 80007c0:	4699      	mov	r9, r3
 80007c2:	469a      	mov	sl, r3
 80007c4:	1a3f      	subs	r7, r7, r0
 80007c6:	e7aa      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007c8:	4640      	mov	r0, r8
 80007ca:	f002 fc23 	bl	8003014 <__clzsi2>
 80007ce:	4642      	mov	r2, r8
 80007d0:	1f43      	subs	r3, r0, #5
 80007d2:	409a      	lsls	r2, r3
 80007d4:	2376      	movs	r3, #118	@ 0x76
 80007d6:	425b      	negs	r3, r3
 80007d8:	1a1b      	subs	r3, r3, r0
 80007da:	4690      	mov	r8, r2
 80007dc:	2000      	movs	r0, #0
 80007de:	e7b0      	b.n	8000742 <__aeabi_fdiv+0x52>
 80007e0:	2303      	movs	r3, #3
 80007e2:	464a      	mov	r2, r9
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4691      	mov	r9, r2
 80007e8:	2003      	movs	r0, #3
 80007ea:	33fc      	adds	r3, #252	@ 0xfc
 80007ec:	e7a9      	b.n	8000742 <__aeabi_fdiv+0x52>
 80007ee:	000d      	movs	r5, r1
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	07ed      	lsls	r5, r5, #31
 80007f8:	4310      	orrs	r0, r2
 80007fa:	4328      	orrs	r0, r5
 80007fc:	bce0      	pop	{r5, r6, r7}
 80007fe:	46ba      	mov	sl, r7
 8000800:	46b1      	mov	r9, r6
 8000802:	46a8      	mov	r8, r5
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	000d      	movs	r5, r1
 8000808:	2000      	movs	r0, #0
 800080a:	2200      	movs	r2, #0
 800080c:	e7f2      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800080e:	4653      	mov	r3, sl
 8000810:	2b02      	cmp	r3, #2
 8000812:	d0ed      	beq.n	80007f0 <__aeabi_fdiv+0x100>
 8000814:	2b03      	cmp	r3, #3
 8000816:	d033      	beq.n	8000880 <__aeabi_fdiv+0x190>
 8000818:	46a0      	mov	r8, r4
 800081a:	2b01      	cmp	r3, #1
 800081c:	d105      	bne.n	800082a <__aeabi_fdiv+0x13a>
 800081e:	2000      	movs	r0, #0
 8000820:	2200      	movs	r2, #0
 8000822:	e7e7      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000824:	0035      	movs	r5, r6
 8000826:	2803      	cmp	r0, #3
 8000828:	d07a      	beq.n	8000920 <__aeabi_fdiv+0x230>
 800082a:	003b      	movs	r3, r7
 800082c:	337f      	adds	r3, #127	@ 0x7f
 800082e:	2b00      	cmp	r3, #0
 8000830:	dd2d      	ble.n	800088e <__aeabi_fdiv+0x19e>
 8000832:	4642      	mov	r2, r8
 8000834:	0752      	lsls	r2, r2, #29
 8000836:	d007      	beq.n	8000848 <__aeabi_fdiv+0x158>
 8000838:	220f      	movs	r2, #15
 800083a:	4641      	mov	r1, r8
 800083c:	400a      	ands	r2, r1
 800083e:	2a04      	cmp	r2, #4
 8000840:	d002      	beq.n	8000848 <__aeabi_fdiv+0x158>
 8000842:	2204      	movs	r2, #4
 8000844:	4694      	mov	ip, r2
 8000846:	44e0      	add	r8, ip
 8000848:	4642      	mov	r2, r8
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	d505      	bpl.n	800085a <__aeabi_fdiv+0x16a>
 800084e:	4642      	mov	r2, r8
 8000850:	4b36      	ldr	r3, [pc, #216]	@ (800092c <__aeabi_fdiv+0x23c>)
 8000852:	401a      	ands	r2, r3
 8000854:	003b      	movs	r3, r7
 8000856:	4690      	mov	r8, r2
 8000858:	3380      	adds	r3, #128	@ 0x80
 800085a:	2bfe      	cmp	r3, #254	@ 0xfe
 800085c:	dcc8      	bgt.n	80007f0 <__aeabi_fdiv+0x100>
 800085e:	4642      	mov	r2, r8
 8000860:	0192      	lsls	r2, r2, #6
 8000862:	0a52      	lsrs	r2, r2, #9
 8000864:	b2d8      	uxtb	r0, r3
 8000866:	e7c5      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000868:	2280      	movs	r2, #128	@ 0x80
 800086a:	2500      	movs	r5, #0
 800086c:	20ff      	movs	r0, #255	@ 0xff
 800086e:	03d2      	lsls	r2, r2, #15
 8000870:	e7c0      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	03d2      	lsls	r2, r2, #15
 8000876:	4214      	tst	r4, r2
 8000878:	d002      	beq.n	8000880 <__aeabi_fdiv+0x190>
 800087a:	4643      	mov	r3, r8
 800087c:	4213      	tst	r3, r2
 800087e:	d049      	beq.n	8000914 <__aeabi_fdiv+0x224>
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	03d2      	lsls	r2, r2, #15
 8000884:	4322      	orrs	r2, r4
 8000886:	0252      	lsls	r2, r2, #9
 8000888:	20ff      	movs	r0, #255	@ 0xff
 800088a:	0a52      	lsrs	r2, r2, #9
 800088c:	e7b2      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800088e:	2201      	movs	r2, #1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dcc3      	bgt.n	800081e <__aeabi_fdiv+0x12e>
 8000896:	4642      	mov	r2, r8
 8000898:	40da      	lsrs	r2, r3
 800089a:	4643      	mov	r3, r8
 800089c:	379e      	adds	r7, #158	@ 0x9e
 800089e:	40bb      	lsls	r3, r7
 80008a0:	1e59      	subs	r1, r3, #1
 80008a2:	418b      	sbcs	r3, r1
 80008a4:	431a      	orrs	r2, r3
 80008a6:	0753      	lsls	r3, r2, #29
 80008a8:	d004      	beq.n	80008b4 <__aeabi_fdiv+0x1c4>
 80008aa:	230f      	movs	r3, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fdiv+0x1c4>
 80008b2:	3204      	adds	r2, #4
 80008b4:	0153      	lsls	r3, r2, #5
 80008b6:	d529      	bpl.n	800090c <__aeabi_fdiv+0x21c>
 80008b8:	2001      	movs	r0, #1
 80008ba:	2200      	movs	r2, #0
 80008bc:	e79a      	b.n	80007f4 <__aeabi_fdiv+0x104>
 80008be:	4642      	mov	r2, r8
 80008c0:	0163      	lsls	r3, r4, #5
 80008c2:	0155      	lsls	r5, r2, #5
 80008c4:	42ab      	cmp	r3, r5
 80008c6:	d215      	bcs.n	80008f4 <__aeabi_fdiv+0x204>
 80008c8:	201b      	movs	r0, #27
 80008ca:	2200      	movs	r2, #0
 80008cc:	3f01      	subs	r7, #1
 80008ce:	2601      	movs	r6, #1
 80008d0:	001c      	movs	r4, r3
 80008d2:	0052      	lsls	r2, r2, #1
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	db01      	blt.n	80008de <__aeabi_fdiv+0x1ee>
 80008da:	429d      	cmp	r5, r3
 80008dc:	d801      	bhi.n	80008e2 <__aeabi_fdiv+0x1f2>
 80008de:	1b5b      	subs	r3, r3, r5
 80008e0:	4332      	orrs	r2, r6
 80008e2:	3801      	subs	r0, #1
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d1f3      	bne.n	80008d0 <__aeabi_fdiv+0x1e0>
 80008e8:	1e58      	subs	r0, r3, #1
 80008ea:	4183      	sbcs	r3, r0
 80008ec:	4313      	orrs	r3, r2
 80008ee:	4698      	mov	r8, r3
 80008f0:	000d      	movs	r5, r1
 80008f2:	e79a      	b.n	800082a <__aeabi_fdiv+0x13a>
 80008f4:	201a      	movs	r0, #26
 80008f6:	2201      	movs	r2, #1
 80008f8:	1b5b      	subs	r3, r3, r5
 80008fa:	e7e8      	b.n	80008ce <__aeabi_fdiv+0x1de>
 80008fc:	3b02      	subs	r3, #2
 80008fe:	425a      	negs	r2, r3
 8000900:	4153      	adcs	r3, r2
 8000902:	425b      	negs	r3, r3
 8000904:	0035      	movs	r5, r6
 8000906:	2200      	movs	r2, #0
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	e773      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	2000      	movs	r0, #0
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	e76f      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000914:	431a      	orrs	r2, r3
 8000916:	0252      	lsls	r2, r2, #9
 8000918:	0035      	movs	r5, r6
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	0a52      	lsrs	r2, r2, #9
 800091e:	e769      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000920:	4644      	mov	r4, r8
 8000922:	e7ad      	b.n	8000880 <__aeabi_fdiv+0x190>
 8000924:	0800a514 	.word	0x0800a514
 8000928:	0800a554 	.word	0x0800a554
 800092c:	f7ffffff 	.word	0xf7ffffff

08000930 <__eqsf2>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	0042      	lsls	r2, r0, #1
 8000934:	024e      	lsls	r6, r1, #9
 8000936:	004c      	lsls	r4, r1, #1
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	0e12      	lsrs	r2, r2, #24
 800093e:	0fc3      	lsrs	r3, r0, #31
 8000940:	0a76      	lsrs	r6, r6, #9
 8000942:	0e24      	lsrs	r4, r4, #24
 8000944:	0fc9      	lsrs	r1, r1, #31
 8000946:	2aff      	cmp	r2, #255	@ 0xff
 8000948:	d010      	beq.n	800096c <__eqsf2+0x3c>
 800094a:	2cff      	cmp	r4, #255	@ 0xff
 800094c:	d00c      	beq.n	8000968 <__eqsf2+0x38>
 800094e:	2001      	movs	r0, #1
 8000950:	42a2      	cmp	r2, r4
 8000952:	d10a      	bne.n	800096a <__eqsf2+0x3a>
 8000954:	42b5      	cmp	r5, r6
 8000956:	d108      	bne.n	800096a <__eqsf2+0x3a>
 8000958:	428b      	cmp	r3, r1
 800095a:	d00f      	beq.n	800097c <__eqsf2+0x4c>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d104      	bne.n	800096a <__eqsf2+0x3a>
 8000960:	0028      	movs	r0, r5
 8000962:	1e43      	subs	r3, r0, #1
 8000964:	4198      	sbcs	r0, r3
 8000966:	e000      	b.n	800096a <__eqsf2+0x3a>
 8000968:	2001      	movs	r0, #1
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	2001      	movs	r0, #1
 800096e:	2cff      	cmp	r4, #255	@ 0xff
 8000970:	d1fb      	bne.n	800096a <__eqsf2+0x3a>
 8000972:	4335      	orrs	r5, r6
 8000974:	d1f9      	bne.n	800096a <__eqsf2+0x3a>
 8000976:	404b      	eors	r3, r1
 8000978:	0018      	movs	r0, r3
 800097a:	e7f6      	b.n	800096a <__eqsf2+0x3a>
 800097c:	2000      	movs	r0, #0
 800097e:	e7f4      	b.n	800096a <__eqsf2+0x3a>

08000980 <__gesf2>:
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	0042      	lsls	r2, r0, #1
 8000984:	0244      	lsls	r4, r0, #9
 8000986:	024d      	lsls	r5, r1, #9
 8000988:	0fc3      	lsrs	r3, r0, #31
 800098a:	0048      	lsls	r0, r1, #1
 800098c:	0a64      	lsrs	r4, r4, #9
 800098e:	0e12      	lsrs	r2, r2, #24
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	0e00      	lsrs	r0, r0, #24
 8000994:	0fc9      	lsrs	r1, r1, #31
 8000996:	2aff      	cmp	r2, #255	@ 0xff
 8000998:	d019      	beq.n	80009ce <__gesf2+0x4e>
 800099a:	28ff      	cmp	r0, #255	@ 0xff
 800099c:	d00b      	beq.n	80009b6 <__gesf2+0x36>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d11e      	bne.n	80009e0 <__gesf2+0x60>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d10b      	bne.n	80009be <__gesf2+0x3e>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d027      	beq.n	80009fa <__gesf2+0x7a>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d134      	bne.n	8000a18 <__gesf2+0x98>
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d02f      	beq.n	8000a12 <__gesf2+0x92>
 80009b2:	0008      	movs	r0, r1
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d128      	bne.n	8000a0c <__gesf2+0x8c>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d101      	bne.n	80009c2 <__gesf2+0x42>
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d0f5      	beq.n	80009ae <__gesf2+0x2e>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d107      	bne.n	80009d6 <__gesf2+0x56>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d023      	beq.n	8000a12 <__gesf2+0x92>
 80009ca:	0018      	movs	r0, r3
 80009cc:	e7f2      	b.n	80009b4 <__gesf2+0x34>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d11c      	bne.n	8000a0c <__gesf2+0x8c>
 80009d2:	28ff      	cmp	r0, #255	@ 0xff
 80009d4:	d014      	beq.n	8000a00 <__gesf2+0x80>
 80009d6:	1e58      	subs	r0, r3, #1
 80009d8:	2302      	movs	r3, #2
 80009da:	4018      	ands	r0, r3
 80009dc:	3801      	subs	r0, #1
 80009de:	e7e9      	b.n	80009b4 <__gesf2+0x34>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d0f8      	beq.n	80009d6 <__gesf2+0x56>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d1f6      	bne.n	80009d6 <__gesf2+0x56>
 80009e8:	4282      	cmp	r2, r0
 80009ea:	dcf4      	bgt.n	80009d6 <__gesf2+0x56>
 80009ec:	dbeb      	blt.n	80009c6 <__gesf2+0x46>
 80009ee:	42ac      	cmp	r4, r5
 80009f0:	d8f1      	bhi.n	80009d6 <__gesf2+0x56>
 80009f2:	2000      	movs	r0, #0
 80009f4:	42ac      	cmp	r4, r5
 80009f6:	d2dd      	bcs.n	80009b4 <__gesf2+0x34>
 80009f8:	e7e5      	b.n	80009c6 <__gesf2+0x46>
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d0da      	beq.n	80009b4 <__gesf2+0x34>
 80009fe:	e7ea      	b.n	80009d6 <__gesf2+0x56>
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d103      	bne.n	8000a0c <__gesf2+0x8c>
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d1e6      	bne.n	80009d6 <__gesf2+0x56>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7d3      	b.n	80009b4 <__gesf2+0x34>
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	4240      	negs	r0, r0
 8000a10:	e7d0      	b.n	80009b4 <__gesf2+0x34>
 8000a12:	2001      	movs	r0, #1
 8000a14:	4240      	negs	r0, r0
 8000a16:	e7cd      	b.n	80009b4 <__gesf2+0x34>
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d0e8      	beq.n	80009ee <__gesf2+0x6e>
 8000a1c:	e7db      	b.n	80009d6 <__gesf2+0x56>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__lesf2>:
 8000a20:	b530      	push	{r4, r5, lr}
 8000a22:	0042      	lsls	r2, r0, #1
 8000a24:	0244      	lsls	r4, r0, #9
 8000a26:	024d      	lsls	r5, r1, #9
 8000a28:	0fc3      	lsrs	r3, r0, #31
 8000a2a:	0048      	lsls	r0, r1, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e12      	lsrs	r2, r2, #24
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	0e00      	lsrs	r0, r0, #24
 8000a34:	0fc9      	lsrs	r1, r1, #31
 8000a36:	2aff      	cmp	r2, #255	@ 0xff
 8000a38:	d01a      	beq.n	8000a70 <__lesf2+0x50>
 8000a3a:	28ff      	cmp	r0, #255	@ 0xff
 8000a3c:	d00e      	beq.n	8000a5c <__lesf2+0x3c>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d11e      	bne.n	8000a80 <__lesf2+0x60>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d10e      	bne.n	8000a64 <__lesf2+0x44>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d02a      	beq.n	8000aa0 <__lesf2+0x80>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d00c      	beq.n	8000a68 <__lesf2+0x48>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d01d      	beq.n	8000a8e <__lesf2+0x6e>
 8000a52:	1e58      	subs	r0, r3, #1
 8000a54:	2302      	movs	r3, #2
 8000a56:	4018      	ands	r0, r3
 8000a58:	3801      	subs	r0, #1
 8000a5a:	e010      	b.n	8000a7e <__lesf2+0x5e>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d10d      	bne.n	8000a7c <__lesf2+0x5c>
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d120      	bne.n	8000aa6 <__lesf2+0x86>
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__lesf2+0x86>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d023      	beq.n	8000ab4 <__lesf2+0x94>
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	e006      	b.n	8000a7e <__lesf2+0x5e>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d103      	bne.n	8000a7c <__lesf2+0x5c>
 8000a74:	28ff      	cmp	r0, #255	@ 0xff
 8000a76:	d1ec      	bne.n	8000a52 <__lesf2+0x32>
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d017      	beq.n	8000aac <__lesf2+0x8c>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	bd30      	pop	{r4, r5, pc}
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0e6      	beq.n	8000a52 <__lesf2+0x32>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1e4      	bne.n	8000a52 <__lesf2+0x32>
 8000a88:	4282      	cmp	r2, r0
 8000a8a:	dce2      	bgt.n	8000a52 <__lesf2+0x32>
 8000a8c:	db04      	blt.n	8000a98 <__lesf2+0x78>
 8000a8e:	42ac      	cmp	r4, r5
 8000a90:	d8df      	bhi.n	8000a52 <__lesf2+0x32>
 8000a92:	2000      	movs	r0, #0
 8000a94:	42ac      	cmp	r4, r5
 8000a96:	d2f2      	bcs.n	8000a7e <__lesf2+0x5e>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00b      	beq.n	8000ab4 <__lesf2+0x94>
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	e7ee      	b.n	8000a7e <__lesf2+0x5e>
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d0ec      	beq.n	8000a7e <__lesf2+0x5e>
 8000aa4:	e7d5      	b.n	8000a52 <__lesf2+0x32>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d1d3      	bne.n	8000a52 <__lesf2+0x32>
 8000aaa:	e7f5      	b.n	8000a98 <__lesf2+0x78>
 8000aac:	2000      	movs	r0, #0
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d0e5      	beq.n	8000a7e <__lesf2+0x5e>
 8000ab2:	e7ce      	b.n	8000a52 <__lesf2+0x32>
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	e7e1      	b.n	8000a7e <__lesf2+0x5e>
 8000aba:	46c0      	nop			@ (mov r8, r8)

08000abc <__aeabi_fmul>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	0243      	lsls	r3, r0, #9
 8000ac6:	0a5b      	lsrs	r3, r3, #9
 8000ac8:	0045      	lsls	r5, r0, #1
 8000aca:	b5c0      	push	{r6, r7, lr}
 8000acc:	4699      	mov	r9, r3
 8000ace:	1c0f      	adds	r7, r1, #0
 8000ad0:	0e2d      	lsrs	r5, r5, #24
 8000ad2:	0fc6      	lsrs	r6, r0, #31
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fmul+0x1e>
 8000ad8:	e088      	b.n	8000bec <__aeabi_fmul+0x130>
 8000ada:	2dff      	cmp	r5, #255	@ 0xff
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fmul+0x24>
 8000ade:	e08d      	b.n	8000bfc <__aeabi_fmul+0x140>
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	04d2      	lsls	r2, r2, #19
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4691      	mov	r9, r2
 8000aec:	4698      	mov	r8, r3
 8000aee:	469a      	mov	sl, r3
 8000af0:	3d7f      	subs	r5, #127	@ 0x7f
 8000af2:	027c      	lsls	r4, r7, #9
 8000af4:	007b      	lsls	r3, r7, #1
 8000af6:	0a64      	lsrs	r4, r4, #9
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	0fff      	lsrs	r7, r7, #31
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d068      	beq.n	8000bd2 <__aeabi_fmul+0x116>
 8000b00:	2bff      	cmp	r3, #255	@ 0xff
 8000b02:	d021      	beq.n	8000b48 <__aeabi_fmul+0x8c>
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	00e4      	lsls	r4, r4, #3
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4314      	orrs	r4, r2
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b10:	195b      	adds	r3, r3, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	1c5d      	adds	r5, r3, #1
 8000b16:	2a0a      	cmp	r2, #10
 8000b18:	dc2e      	bgt.n	8000b78 <__aeabi_fmul+0xbc>
 8000b1a:	407e      	eors	r6, r7
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	2a02      	cmp	r2, #2
 8000b20:	dc23      	bgt.n	8000b6a <__aeabi_fmul+0xae>
 8000b22:	3a01      	subs	r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d900      	bls.n	8000b2a <__aeabi_fmul+0x6e>
 8000b28:	e0bd      	b.n	8000ca6 <__aeabi_fmul+0x1ea>
 8000b2a:	2902      	cmp	r1, #2
 8000b2c:	d06e      	beq.n	8000c0c <__aeabi_fmul+0x150>
 8000b2e:	2901      	cmp	r1, #1
 8000b30:	d12c      	bne.n	8000b8c <__aeabi_fmul+0xd0>
 8000b32:	2000      	movs	r0, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	05c0      	lsls	r0, r0, #23
 8000b38:	07f6      	lsls	r6, r6, #31
 8000b3a:	4310      	orrs	r0, r2
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	bce0      	pop	{r5, r6, r7}
 8000b40:	46ba      	mov	sl, r7
 8000b42:	46b1      	mov	r9, r6
 8000b44:	46a8      	mov	r8, r5
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	002b      	movs	r3, r5
 8000b4a:	33ff      	adds	r3, #255	@ 0xff
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d065      	beq.n	8000c1c <__aeabi_fmul+0x160>
 8000b50:	2203      	movs	r2, #3
 8000b52:	4641      	mov	r1, r8
 8000b54:	4311      	orrs	r1, r2
 8000b56:	0032      	movs	r2, r6
 8000b58:	3501      	adds	r5, #1
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	407a      	eors	r2, r7
 8000b5e:	35ff      	adds	r5, #255	@ 0xff
 8000b60:	290a      	cmp	r1, #10
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_fmul+0xaa>
 8000b64:	e0d8      	b.n	8000d18 <__aeabi_fmul+0x25c>
 8000b66:	0016      	movs	r6, r2
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4082      	lsls	r2, r0
 8000b70:	20a6      	movs	r0, #166	@ 0xa6
 8000b72:	00c0      	lsls	r0, r0, #3
 8000b74:	4202      	tst	r2, r0
 8000b76:	d020      	beq.n	8000bba <__aeabi_fmul+0xfe>
 8000b78:	4653      	mov	r3, sl
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d046      	beq.n	8000c0c <__aeabi_fmul+0x150>
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0xc8>
 8000b82:	e0bb      	b.n	8000cfc <__aeabi_fmul+0x240>
 8000b84:	4651      	mov	r1, sl
 8000b86:	464c      	mov	r4, r9
 8000b88:	2901      	cmp	r1, #1
 8000b8a:	d0d2      	beq.n	8000b32 <__aeabi_fmul+0x76>
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	337f      	adds	r3, #127	@ 0x7f
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd70      	ble.n	8000c76 <__aeabi_fmul+0x1ba>
 8000b94:	0762      	lsls	r2, r4, #29
 8000b96:	d004      	beq.n	8000ba2 <__aeabi_fmul+0xe6>
 8000b98:	220f      	movs	r2, #15
 8000b9a:	4022      	ands	r2, r4
 8000b9c:	2a04      	cmp	r2, #4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fmul+0xe6>
 8000ba0:	3404      	adds	r4, #4
 8000ba2:	0122      	lsls	r2, r4, #4
 8000ba4:	d503      	bpl.n	8000bae <__aeabi_fmul+0xf2>
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <__aeabi_fmul+0x278>)
 8000ba8:	401c      	ands	r4, r3
 8000baa:	002b      	movs	r3, r5
 8000bac:	3380      	adds	r3, #128	@ 0x80
 8000bae:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bb0:	dc2c      	bgt.n	8000c0c <__aeabi_fmul+0x150>
 8000bb2:	01a2      	lsls	r2, r4, #6
 8000bb4:	0a52      	lsrs	r2, r2, #9
 8000bb6:	b2d8      	uxtb	r0, r3
 8000bb8:	e7bd      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000bba:	2090      	movs	r0, #144	@ 0x90
 8000bbc:	0080      	lsls	r0, r0, #2
 8000bbe:	4202      	tst	r2, r0
 8000bc0:	d127      	bne.n	8000c12 <__aeabi_fmul+0x156>
 8000bc2:	38b9      	subs	r0, #185	@ 0xb9
 8000bc4:	38ff      	subs	r0, #255	@ 0xff
 8000bc6:	4210      	tst	r0, r2
 8000bc8:	d06d      	beq.n	8000ca6 <__aeabi_fmul+0x1ea>
 8000bca:	003e      	movs	r6, r7
 8000bcc:	46a1      	mov	r9, r4
 8000bce:	468a      	mov	sl, r1
 8000bd0:	e7d2      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d141      	bne.n	8000c5a <__aeabi_fmul+0x19e>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4642      	mov	r2, r8
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	4690      	mov	r8, r2
 8000bde:	002b      	movs	r3, r5
 8000be0:	4642      	mov	r2, r8
 8000be2:	2101      	movs	r1, #1
 8000be4:	1c5d      	adds	r5, r3, #1
 8000be6:	2a0a      	cmp	r2, #10
 8000be8:	dd97      	ble.n	8000b1a <__aeabi_fmul+0x5e>
 8000bea:	e7c5      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d126      	bne.n	8000c3e <__aeabi_fmul+0x182>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	e77a      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d118      	bne.n	8000c32 <__aeabi_fmul+0x176>
 8000c00:	2308      	movs	r3, #8
 8000c02:	4698      	mov	r8, r3
 8000c04:	3b06      	subs	r3, #6
 8000c06:	25ff      	movs	r5, #255	@ 0xff
 8000c08:	469a      	mov	sl, r3
 8000c0a:	e772      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c0c:	20ff      	movs	r0, #255	@ 0xff
 8000c0e:	2200      	movs	r2, #0
 8000c10:	e791      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	2600      	movs	r6, #0
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	03d2      	lsls	r2, r2, #15
 8000c1a:	e78c      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000c1c:	4641      	mov	r1, r8
 8000c1e:	2202      	movs	r2, #2
 8000c20:	3501      	adds	r5, #1
 8000c22:	4311      	orrs	r1, r2
 8000c24:	4688      	mov	r8, r1
 8000c26:	35ff      	adds	r5, #255	@ 0xff
 8000c28:	290a      	cmp	r1, #10
 8000c2a:	dca5      	bgt.n	8000b78 <__aeabi_fmul+0xbc>
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	407e      	eors	r6, r7
 8000c30:	e774      	b.n	8000b1c <__aeabi_fmul+0x60>
 8000c32:	230c      	movs	r3, #12
 8000c34:	4698      	mov	r8, r3
 8000c36:	3b09      	subs	r3, #9
 8000c38:	25ff      	movs	r5, #255	@ 0xff
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	e759      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f002 f9e8 	bl	8003014 <__clzsi2>
 8000c44:	464a      	mov	r2, r9
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	2576      	movs	r5, #118	@ 0x76
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	426d      	negs	r5, r5
 8000c50:	4691      	mov	r9, r2
 8000c52:	4698      	mov	r8, r3
 8000c54:	469a      	mov	sl, r3
 8000c56:	1a2d      	subs	r5, r5, r0
 8000c58:	e74b      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f002 f9da 	bl	8003014 <__clzsi2>
 8000c60:	4642      	mov	r2, r8
 8000c62:	1f43      	subs	r3, r0, #5
 8000c64:	409c      	lsls	r4, r3
 8000c66:	1a2b      	subs	r3, r5, r0
 8000c68:	3b76      	subs	r3, #118	@ 0x76
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	1c5d      	adds	r5, r3, #1
 8000c6e:	2a0a      	cmp	r2, #10
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fmul+0x1b8>
 8000c72:	e752      	b.n	8000b1a <__aeabi_fmul+0x5e>
 8000c74:	e780      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000c76:	2201      	movs	r2, #1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b1b      	cmp	r3, #27
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_fmul+0x1c4>
 8000c7e:	e758      	b.n	8000b32 <__aeabi_fmul+0x76>
 8000c80:	359e      	adds	r5, #158	@ 0x9e
 8000c82:	0022      	movs	r2, r4
 8000c84:	40ac      	lsls	r4, r5
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	1e63      	subs	r3, r4, #1
 8000c8a:	419c      	sbcs	r4, r3
 8000c8c:	4322      	orrs	r2, r4
 8000c8e:	0753      	lsls	r3, r2, #29
 8000c90:	d004      	beq.n	8000c9c <__aeabi_fmul+0x1e0>
 8000c92:	230f      	movs	r3, #15
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fmul+0x1e0>
 8000c9a:	3204      	adds	r2, #4
 8000c9c:	0153      	lsls	r3, r2, #5
 8000c9e:	d537      	bpl.n	8000d10 <__aeabi_fmul+0x254>
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	e747      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	464a      	mov	r2, r9
 8000caa:	0424      	lsls	r4, r4, #16
 8000cac:	0c24      	lsrs	r4, r4, #16
 8000cae:	0027      	movs	r7, r4
 8000cb0:	0c10      	lsrs	r0, r2, #16
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	0c12      	lsrs	r2, r2, #16
 8000cb6:	4344      	muls	r4, r0
 8000cb8:	4357      	muls	r7, r2
 8000cba:	4348      	muls	r0, r1
 8000cbc:	4351      	muls	r1, r2
 8000cbe:	0c3a      	lsrs	r2, r7, #16
 8000cc0:	1909      	adds	r1, r1, r4
 8000cc2:	1852      	adds	r2, r2, r1
 8000cc4:	4294      	cmp	r4, r2
 8000cc6:	d903      	bls.n	8000cd0 <__aeabi_fmul+0x214>
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0249      	lsls	r1, r1, #9
 8000ccc:	468c      	mov	ip, r1
 8000cce:	4460      	add	r0, ip
 8000cd0:	043f      	lsls	r7, r7, #16
 8000cd2:	0411      	lsls	r1, r2, #16
 8000cd4:	0c3f      	lsrs	r7, r7, #16
 8000cd6:	19c9      	adds	r1, r1, r7
 8000cd8:	018c      	lsls	r4, r1, #6
 8000cda:	1e67      	subs	r7, r4, #1
 8000cdc:	41bc      	sbcs	r4, r7
 8000cde:	0c12      	lsrs	r2, r2, #16
 8000ce0:	0e89      	lsrs	r1, r1, #26
 8000ce2:	1812      	adds	r2, r2, r0
 8000ce4:	430c      	orrs	r4, r1
 8000ce6:	0192      	lsls	r2, r2, #6
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	d50e      	bpl.n	8000d0c <__aeabi_fmul+0x250>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	0862      	lsrs	r2, r4, #1
 8000cf2:	401c      	ands	r4, r3
 8000cf4:	4314      	orrs	r4, r2
 8000cf6:	e749      	b.n	8000b8c <__aeabi_fmul+0xd0>
 8000cf8:	003e      	movs	r6, r7
 8000cfa:	46a1      	mov	r9, r4
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	464b      	mov	r3, r9
 8000d00:	03d2      	lsls	r2, r2, #15
 8000d02:	431a      	orrs	r2, r3
 8000d04:	0252      	lsls	r2, r2, #9
 8000d06:	20ff      	movs	r0, #255	@ 0xff
 8000d08:	0a52      	lsrs	r2, r2, #9
 8000d0a:	e714      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d0c:	001d      	movs	r5, r3
 8000d0e:	e73d      	b.n	8000b8c <__aeabi_fmul+0xd0>
 8000d10:	0192      	lsls	r2, r2, #6
 8000d12:	2000      	movs	r0, #0
 8000d14:	0a52      	lsrs	r2, r2, #9
 8000d16:	e70e      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d18:	290f      	cmp	r1, #15
 8000d1a:	d1ed      	bne.n	8000cf8 <__aeabi_fmul+0x23c>
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	464b      	mov	r3, r9
 8000d20:	03d2      	lsls	r2, r2, #15
 8000d22:	4213      	tst	r3, r2
 8000d24:	d0ea      	beq.n	8000cfc <__aeabi_fmul+0x240>
 8000d26:	4214      	tst	r4, r2
 8000d28:	d1e8      	bne.n	8000cfc <__aeabi_fmul+0x240>
 8000d2a:	003e      	movs	r6, r7
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	4322      	orrs	r2, r4
 8000d30:	e701      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	f7ffffff 	.word	0xf7ffffff

08000d38 <__aeabi_fsub>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	4647      	mov	r7, r8
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	024e      	lsls	r6, r1, #9
 8000d40:	0243      	lsls	r3, r0, #9
 8000d42:	0045      	lsls	r5, r0, #1
 8000d44:	0a72      	lsrs	r2, r6, #9
 8000d46:	0fc4      	lsrs	r4, r0, #31
 8000d48:	0048      	lsls	r0, r1, #1
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	4694      	mov	ip, r2
 8000d4e:	0a5f      	lsrs	r7, r3, #9
 8000d50:	0e2d      	lsrs	r5, r5, #24
 8000d52:	099b      	lsrs	r3, r3, #6
 8000d54:	0e00      	lsrs	r0, r0, #24
 8000d56:	0fc9      	lsrs	r1, r1, #31
 8000d58:	09b6      	lsrs	r6, r6, #6
 8000d5a:	28ff      	cmp	r0, #255	@ 0xff
 8000d5c:	d024      	beq.n	8000da8 <__aeabi_fsub+0x70>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4051      	eors	r1, r2
 8000d62:	1a2a      	subs	r2, r5, r0
 8000d64:	428c      	cmp	r4, r1
 8000d66:	d00f      	beq.n	8000d88 <__aeabi_fsub+0x50>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_fsub+0x36>
 8000d6c:	e16a      	b.n	8001044 <__aeabi_fsub+0x30c>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d135      	bne.n	8000dde <__aeabi_fsub+0xa6>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x40>
 8000d76:	e0a2      	b.n	8000ebe <__aeabi_fsub+0x186>
 8000d78:	1e51      	subs	r1, r2, #1
 8000d7a:	2a01      	cmp	r2, #1
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x48>
 8000d7e:	e124      	b.n	8000fca <__aeabi_fsub+0x292>
 8000d80:	2aff      	cmp	r2, #255	@ 0xff
 8000d82:	d021      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000d84:	000a      	movs	r2, r1
 8000d86:	e02f      	b.n	8000de8 <__aeabi_fsub+0xb0>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_fsub+0x56>
 8000d8c:	e167      	b.n	800105e <__aeabi_fsub+0x326>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d05e      	beq.n	8000e50 <__aeabi_fsub+0x118>
 8000d92:	2dff      	cmp	r5, #255	@ 0xff
 8000d94:	d018      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	04c9      	lsls	r1, r1, #19
 8000d9a:	430e      	orrs	r6, r1
 8000d9c:	2a1b      	cmp	r2, #27
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_fsub+0x6a>
 8000da0:	e076      	b.n	8000e90 <__aeabi_fsub+0x158>
 8000da2:	002a      	movs	r2, r5
 8000da4:	3301      	adds	r3, #1
 8000da6:	e032      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000da8:	002a      	movs	r2, r5
 8000daa:	3aff      	subs	r2, #255	@ 0xff
 8000dac:	4691      	mov	r9, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d042      	beq.n	8000e38 <__aeabi_fsub+0x100>
 8000db2:	428c      	cmp	r4, r1
 8000db4:	d055      	beq.n	8000e62 <__aeabi_fsub+0x12a>
 8000db6:	464a      	mov	r2, r9
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x86>
 8000dbc:	e09c      	b.n	8000ef8 <__aeabi_fsub+0x1c0>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x8c>
 8000dc2:	e077      	b.n	8000eb4 <__aeabi_fsub+0x17c>
 8000dc4:	000c      	movs	r4, r1
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0x98>
 8000dce:	e06e      	b.n	8000eae <__aeabi_fsub+0x176>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	03d2      	lsls	r2, r2, #15
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	025b      	lsls	r3, r3, #9
 8000dd8:	20ff      	movs	r0, #255	@ 0xff
 8000dda:	0a5b      	lsrs	r3, r3, #9
 8000ddc:	e024      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000dde:	2dff      	cmp	r5, #255	@ 0xff
 8000de0:	d0f2      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	04c9      	lsls	r1, r1, #19
 8000de6:	430e      	orrs	r6, r1
 8000de8:	2101      	movs	r1, #1
 8000dea:	2a1b      	cmp	r2, #27
 8000dec:	dc08      	bgt.n	8000e00 <__aeabi_fsub+0xc8>
 8000dee:	0031      	movs	r1, r6
 8000df0:	2020      	movs	r0, #32
 8000df2:	40d1      	lsrs	r1, r2
 8000df4:	1a82      	subs	r2, r0, r2
 8000df6:	4096      	lsls	r6, r2
 8000df8:	0032      	movs	r2, r6
 8000dfa:	1e50      	subs	r0, r2, #1
 8000dfc:	4182      	sbcs	r2, r0
 8000dfe:	4311      	orrs	r1, r2
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	d460      	bmi.n	8000ec8 <__aeabi_fsub+0x190>
 8000e06:	2107      	movs	r1, #7
 8000e08:	002a      	movs	r2, r5
 8000e0a:	4019      	ands	r1, r3
 8000e0c:	d057      	beq.n	8000ebe <__aeabi_fsub+0x186>
 8000e0e:	210f      	movs	r1, #15
 8000e10:	4019      	ands	r1, r3
 8000e12:	2904      	cmp	r1, #4
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fsub+0xe0>
 8000e16:	3304      	adds	r3, #4
 8000e18:	0159      	lsls	r1, r3, #5
 8000e1a:	d550      	bpl.n	8000ebe <__aeabi_fsub+0x186>
 8000e1c:	1c50      	adds	r0, r2, #1
 8000e1e:	2afe      	cmp	r2, #254	@ 0xfe
 8000e20:	d045      	beq.n	8000eae <__aeabi_fsub+0x176>
 8000e22:	019b      	lsls	r3, r3, #6
 8000e24:	b2c0      	uxtb	r0, r0
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	05c0      	lsls	r0, r0, #23
 8000e2a:	4318      	orrs	r0, r3
 8000e2c:	07e4      	lsls	r4, r4, #31
 8000e2e:	4320      	orrs	r0, r4
 8000e30:	bcc0      	pop	{r6, r7}
 8000e32:	46b9      	mov	r9, r7
 8000e34:	46b0      	mov	r8, r6
 8000e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4051      	eors	r1, r2
 8000e3c:	428c      	cmp	r4, r1
 8000e3e:	d1ba      	bne.n	8000db6 <__aeabi_fsub+0x7e>
 8000e40:	464a      	mov	r2, r9
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d010      	beq.n	8000e68 <__aeabi_fsub+0x130>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x114>
 8000e4a:	e098      	b.n	8000f7e <__aeabi_fsub+0x246>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e7bb      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d034      	beq.n	8000ebe <__aeabi_fsub+0x186>
 8000e54:	1e51      	subs	r1, r2, #1
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d06e      	beq.n	8000f38 <__aeabi_fsub+0x200>
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d0b4      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000e5e:	000a      	movs	r2, r1
 8000e60:	e79c      	b.n	8000d9c <__aeabi_fsub+0x64>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x130>
 8000e66:	e088      	b.n	8000f7a <__aeabi_fsub+0x242>
 8000e68:	20fe      	movs	r0, #254	@ 0xfe
 8000e6a:	1c6a      	adds	r2, r5, #1
 8000e6c:	4210      	tst	r0, r2
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0x13a>
 8000e70:	e092      	b.n	8000f98 <__aeabi_fsub+0x260>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fsub+0x140>
 8000e76:	e0a4      	b.n	8000fc2 <__aeabi_fsub+0x28a>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x146>
 8000e7c:	e0cb      	b.n	8001016 <__aeabi_fsub+0x2de>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_fsub+0x14c>
 8000e82:	e0ca      	b.n	800101a <__aeabi_fsub+0x2e2>
 8000e84:	2200      	movs	r2, #0
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	b2d0      	uxtb	r0, r2
 8000e8e:	e7cb      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000e90:	0031      	movs	r1, r6
 8000e92:	2020      	movs	r0, #32
 8000e94:	40d1      	lsrs	r1, r2
 8000e96:	1a82      	subs	r2, r0, r2
 8000e98:	4096      	lsls	r6, r2
 8000e9a:	0032      	movs	r2, r6
 8000e9c:	1e50      	subs	r0, r2, #1
 8000e9e:	4182      	sbcs	r2, r0
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	015a      	lsls	r2, r3, #5
 8000ea6:	d5ae      	bpl.n	8000e06 <__aeabi_fsub+0xce>
 8000ea8:	1c6a      	adds	r2, r5, #1
 8000eaa:	2dfe      	cmp	r5, #254	@ 0xfe
 8000eac:	d14a      	bne.n	8000f44 <__aeabi_fsub+0x20c>
 8000eae:	20ff      	movs	r0, #255	@ 0xff
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e7b9      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000eb4:	22ff      	movs	r2, #255	@ 0xff
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d14b      	bne.n	8000f52 <__aeabi_fsub+0x21a>
 8000eba:	000c      	movs	r4, r1
 8000ebc:	0033      	movs	r3, r6
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	2aff      	cmp	r2, #255	@ 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x18e>
 8000ec4:	e781      	b.n	8000dca <__aeabi_fsub+0x92>
 8000ec6:	e7df      	b.n	8000e88 <__aeabi_fsub+0x150>
 8000ec8:	019f      	lsls	r7, r3, #6
 8000eca:	09bf      	lsrs	r7, r7, #6
 8000ecc:	0038      	movs	r0, r7
 8000ece:	f002 f8a1 	bl	8003014 <__clzsi2>
 8000ed2:	3805      	subs	r0, #5
 8000ed4:	4087      	lsls	r7, r0
 8000ed6:	4285      	cmp	r5, r0
 8000ed8:	dc21      	bgt.n	8000f1e <__aeabi_fsub+0x1e6>
 8000eda:	003b      	movs	r3, r7
 8000edc:	2120      	movs	r1, #32
 8000ede:	1b42      	subs	r2, r0, r5
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	40d3      	lsrs	r3, r2
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	4097      	lsls	r7, r2
 8000ee8:	1e7a      	subs	r2, r7, #1
 8000eea:	4197      	sbcs	r7, r2
 8000eec:	2200      	movs	r2, #0
 8000eee:	433b      	orrs	r3, r7
 8000ef0:	0759      	lsls	r1, r3, #29
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x1be>
 8000ef4:	e78b      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000ef6:	e78f      	b.n	8000e18 <__aeabi_fsub+0xe0>
 8000ef8:	20fe      	movs	r0, #254	@ 0xfe
 8000efa:	1c6a      	adds	r2, r5, #1
 8000efc:	4210      	tst	r0, r2
 8000efe:	d112      	bne.n	8000f26 <__aeabi_fsub+0x1ee>
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d152      	bne.n	8000faa <__aeabi_fsub+0x272>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d07c      	beq.n	8001002 <__aeabi_fsub+0x2ca>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d0bb      	beq.n	8000e84 <__aeabi_fsub+0x14c>
 8000f0c:	1b9a      	subs	r2, r3, r6
 8000f0e:	0150      	lsls	r0, r2, #5
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_fsub+0x1dc>
 8000f12:	e08b      	b.n	800102c <__aeabi_fsub+0x2f4>
 8000f14:	2401      	movs	r4, #1
 8000f16:	2200      	movs	r2, #0
 8000f18:	1af3      	subs	r3, r6, r3
 8000f1a:	400c      	ands	r4, r1
 8000f1c:	e7e8      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f1e:	4b56      	ldr	r3, [pc, #344]	@ (8001078 <__aeabi_fsub+0x340>)
 8000f20:	1a2a      	subs	r2, r5, r0
 8000f22:	403b      	ands	r3, r7
 8000f24:	e7e4      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f26:	1b9f      	subs	r7, r3, r6
 8000f28:	017a      	lsls	r2, r7, #5
 8000f2a:	d446      	bmi.n	8000fba <__aeabi_fsub+0x282>
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	d1cd      	bne.n	8000ecc <__aeabi_fsub+0x194>
 8000f30:	2400      	movs	r4, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	2300      	movs	r3, #0
 8000f36:	e777      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000f38:	199b      	adds	r3, r3, r6
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	0159      	lsls	r1, r3, #5
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_fsub+0x20c>
 8000f42:	e760      	b.n	8000e06 <__aeabi_fsub+0xce>
 8000f44:	2101      	movs	r1, #1
 8000f46:	484d      	ldr	r0, [pc, #308]	@ (800107c <__aeabi_fsub+0x344>)
 8000f48:	4019      	ands	r1, r3
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	4003      	ands	r3, r0
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	e7ce      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f52:	1e57      	subs	r7, r2, #1
 8000f54:	2a01      	cmp	r2, #1
 8000f56:	d05a      	beq.n	800100e <__aeabi_fsub+0x2d6>
 8000f58:	000c      	movs	r4, r1
 8000f5a:	2aff      	cmp	r2, #255	@ 0xff
 8000f5c:	d033      	beq.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2f1b      	cmp	r7, #27
 8000f62:	dc07      	bgt.n	8000f74 <__aeabi_fsub+0x23c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	1bc9      	subs	r1, r1, r7
 8000f68:	001a      	movs	r2, r3
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	40fa      	lsrs	r2, r7
 8000f6e:	1e59      	subs	r1, r3, #1
 8000f70:	418b      	sbcs	r3, r1
 8000f72:	431a      	orrs	r2, r3
 8000f74:	0005      	movs	r5, r0
 8000f76:	1ab3      	subs	r3, r6, r2
 8000f78:	e743      	b.n	8000e02 <__aeabi_fsub+0xca>
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d123      	bne.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f7e:	22ff      	movs	r2, #255	@ 0xff
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d09b      	beq.n	8000ebc <__aeabi_fsub+0x184>
 8000f84:	1e51      	subs	r1, r2, #1
 8000f86:	2a01      	cmp	r2, #1
 8000f88:	d0d6      	beq.n	8000f38 <__aeabi_fsub+0x200>
 8000f8a:	2aff      	cmp	r2, #255	@ 0xff
 8000f8c:	d01b      	beq.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f8e:	291b      	cmp	r1, #27
 8000f90:	dd2c      	ble.n	8000fec <__aeabi_fsub+0x2b4>
 8000f92:	0002      	movs	r2, r0
 8000f94:	1c73      	adds	r3, r6, #1
 8000f96:	e73a      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000f98:	2aff      	cmp	r2, #255	@ 0xff
 8000f9a:	d088      	beq.n	8000eae <__aeabi_fsub+0x176>
 8000f9c:	199b      	adds	r3, r3, r6
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0x26e>
 8000fa4:	e733      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	e76e      	b.n	8000e88 <__aeabi_fsub+0x150>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d110      	bne.n	8000fd0 <__aeabi_fsub+0x298>
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d043      	beq.n	800103a <__aeabi_fsub+0x302>
 8000fb2:	2401      	movs	r4, #1
 8000fb4:	0033      	movs	r3, r6
 8000fb6:	400c      	ands	r4, r1
 8000fb8:	e706      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fba:	2401      	movs	r4, #1
 8000fbc:	1af7      	subs	r7, r6, r3
 8000fbe:	400c      	ands	r4, r1
 8000fc0:	e784      	b.n	8000ecc <__aeabi_fsub+0x194>
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <__aeabi_fsub+0x298>
 8000fc6:	0033      	movs	r3, r6
 8000fc8:	e6fe      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fca:	2501      	movs	r5, #1
 8000fcc:	1b9b      	subs	r3, r3, r6
 8000fce:	e718      	b.n	8000e02 <__aeabi_fsub+0xca>
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x29e>
 8000fd4:	e6f8      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	03d2      	lsls	r2, r2, #15
 8000fda:	4297      	cmp	r7, r2
 8000fdc:	d304      	bcc.n	8000fe8 <__aeabi_fsub+0x2b0>
 8000fde:	4594      	cmp	ip, r2
 8000fe0:	d202      	bcs.n	8000fe8 <__aeabi_fsub+0x2b0>
 8000fe2:	2401      	movs	r4, #1
 8000fe4:	0033      	movs	r3, r6
 8000fe6:	400c      	ands	r4, r1
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	e6f1      	b.n	8000dd0 <__aeabi_fsub+0x98>
 8000fec:	001a      	movs	r2, r3
 8000fee:	2520      	movs	r5, #32
 8000ff0:	40ca      	lsrs	r2, r1
 8000ff2:	1a69      	subs	r1, r5, r1
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	1e59      	subs	r1, r3, #1
 8000ff8:	418b      	sbcs	r3, r1
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	0005      	movs	r5, r0
 8000ffe:	199b      	adds	r3, r3, r6
 8001000:	e750      	b.n	8000ea4 <__aeabi_fsub+0x16c>
 8001002:	2e00      	cmp	r6, #0
 8001004:	d094      	beq.n	8000f30 <__aeabi_fsub+0x1f8>
 8001006:	2401      	movs	r4, #1
 8001008:	0033      	movs	r3, r6
 800100a:	400c      	ands	r4, r1
 800100c:	e73a      	b.n	8000e84 <__aeabi_fsub+0x14c>
 800100e:	000c      	movs	r4, r1
 8001010:	2501      	movs	r5, #1
 8001012:	1af3      	subs	r3, r6, r3
 8001014:	e6f5      	b.n	8000e02 <__aeabi_fsub+0xca>
 8001016:	0033      	movs	r3, r6
 8001018:	e734      	b.n	8000e84 <__aeabi_fsub+0x14c>
 800101a:	199b      	adds	r3, r3, r6
 800101c:	2200      	movs	r2, #0
 800101e:	0159      	lsls	r1, r3, #5
 8001020:	d5c1      	bpl.n	8000fa6 <__aeabi_fsub+0x26e>
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <__aeabi_fsub+0x340>)
 8001024:	4013      	ands	r3, r2
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	2201      	movs	r2, #1
 800102a:	e72d      	b.n	8000e88 <__aeabi_fsub+0x150>
 800102c:	2a00      	cmp	r2, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x2fa>
 8001030:	e77e      	b.n	8000f30 <__aeabi_fsub+0x1f8>
 8001032:	0013      	movs	r3, r2
 8001034:	2200      	movs	r2, #0
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	e726      	b.n	8000e88 <__aeabi_fsub+0x150>
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	2400      	movs	r4, #0
 800103e:	20ff      	movs	r0, #255	@ 0xff
 8001040:	03db      	lsls	r3, r3, #15
 8001042:	e6f1      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d100      	bne.n	800104a <__aeabi_fsub+0x312>
 8001048:	e756      	b.n	8000ef8 <__aeabi_fsub+0x1c0>
 800104a:	1b47      	subs	r7, r0, r5
 800104c:	003a      	movs	r2, r7
 800104e:	2d00      	cmp	r5, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x31c>
 8001052:	e730      	b.n	8000eb6 <__aeabi_fsub+0x17e>
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	04d2      	lsls	r2, r2, #19
 8001058:	000c      	movs	r4, r1
 800105a:	4313      	orrs	r3, r2
 800105c:	e77f      	b.n	8000f5e <__aeabi_fsub+0x226>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_fsub+0x32c>
 8001062:	e701      	b.n	8000e68 <__aeabi_fsub+0x130>
 8001064:	1b41      	subs	r1, r0, r5
 8001066:	2d00      	cmp	r5, #0
 8001068:	d101      	bne.n	800106e <__aeabi_fsub+0x336>
 800106a:	000a      	movs	r2, r1
 800106c:	e788      	b.n	8000f80 <__aeabi_fsub+0x248>
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	04d2      	lsls	r2, r2, #19
 8001072:	4313      	orrs	r3, r2
 8001074:	e78b      	b.n	8000f8e <__aeabi_fsub+0x256>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	fbffffff 	.word	0xfbffffff
 800107c:	7dffffff 	.word	0x7dffffff

08001080 <__aeabi_ui2f>:
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	1e04      	subs	r4, r0, #0
 8001084:	d00e      	beq.n	80010a4 <__aeabi_ui2f+0x24>
 8001086:	f001 ffc5 	bl	8003014 <__clzsi2>
 800108a:	239e      	movs	r3, #158	@ 0x9e
 800108c:	0001      	movs	r1, r0
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	2b96      	cmp	r3, #150	@ 0x96
 8001092:	dc0c      	bgt.n	80010ae <__aeabi_ui2f+0x2e>
 8001094:	2808      	cmp	r0, #8
 8001096:	d02f      	beq.n	80010f8 <__aeabi_ui2f+0x78>
 8001098:	3908      	subs	r1, #8
 800109a:	408c      	lsls	r4, r1
 800109c:	0264      	lsls	r4, r4, #9
 800109e:	0a64      	lsrs	r4, r4, #9
 80010a0:	b2d8      	uxtb	r0, r3
 80010a2:	e001      	b.n	80010a8 <__aeabi_ui2f+0x28>
 80010a4:	2000      	movs	r0, #0
 80010a6:	2400      	movs	r4, #0
 80010a8:	05c0      	lsls	r0, r0, #23
 80010aa:	4320      	orrs	r0, r4
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	2b99      	cmp	r3, #153	@ 0x99
 80010b0:	dc16      	bgt.n	80010e0 <__aeabi_ui2f+0x60>
 80010b2:	1f42      	subs	r2, r0, #5
 80010b4:	2805      	cmp	r0, #5
 80010b6:	d000      	beq.n	80010ba <__aeabi_ui2f+0x3a>
 80010b8:	4094      	lsls	r4, r2
 80010ba:	0022      	movs	r2, r4
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <__aeabi_ui2f+0x80>)
 80010be:	4002      	ands	r2, r0
 80010c0:	0765      	lsls	r5, r4, #29
 80010c2:	d009      	beq.n	80010d8 <__aeabi_ui2f+0x58>
 80010c4:	250f      	movs	r5, #15
 80010c6:	402c      	ands	r4, r5
 80010c8:	2c04      	cmp	r4, #4
 80010ca:	d005      	beq.n	80010d8 <__aeabi_ui2f+0x58>
 80010cc:	3204      	adds	r2, #4
 80010ce:	0154      	lsls	r4, r2, #5
 80010d0:	d502      	bpl.n	80010d8 <__aeabi_ui2f+0x58>
 80010d2:	239f      	movs	r3, #159	@ 0x9f
 80010d4:	4002      	ands	r2, r0
 80010d6:	1a5b      	subs	r3, r3, r1
 80010d8:	0192      	lsls	r2, r2, #6
 80010da:	0a54      	lsrs	r4, r2, #9
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	e7e3      	b.n	80010a8 <__aeabi_ui2f+0x28>
 80010e0:	0002      	movs	r2, r0
 80010e2:	0020      	movs	r0, r4
 80010e4:	321b      	adds	r2, #27
 80010e6:	4090      	lsls	r0, r2
 80010e8:	0002      	movs	r2, r0
 80010ea:	1e50      	subs	r0, r2, #1
 80010ec:	4182      	sbcs	r2, r0
 80010ee:	2005      	movs	r0, #5
 80010f0:	1a40      	subs	r0, r0, r1
 80010f2:	40c4      	lsrs	r4, r0
 80010f4:	4314      	orrs	r4, r2
 80010f6:	e7e0      	b.n	80010ba <__aeabi_ui2f+0x3a>
 80010f8:	0264      	lsls	r4, r4, #9
 80010fa:	2096      	movs	r0, #150	@ 0x96
 80010fc:	0a64      	lsrs	r4, r4, #9
 80010fe:	e7d3      	b.n	80010a8 <__aeabi_ui2f+0x28>
 8001100:	fbffffff 	.word	0xfbffffff

08001104 <__aeabi_dadd>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	4657      	mov	r7, sl
 8001108:	464e      	mov	r6, r9
 800110a:	4645      	mov	r5, r8
 800110c:	46de      	mov	lr, fp
 800110e:	b5e0      	push	{r5, r6, r7, lr}
 8001110:	b083      	sub	sp, #12
 8001112:	9000      	str	r0, [sp, #0]
 8001114:	9101      	str	r1, [sp, #4]
 8001116:	030c      	lsls	r4, r1, #12
 8001118:	004f      	lsls	r7, r1, #1
 800111a:	0fce      	lsrs	r6, r1, #31
 800111c:	0a61      	lsrs	r1, r4, #9
 800111e:	9c00      	ldr	r4, [sp, #0]
 8001120:	031d      	lsls	r5, r3, #12
 8001122:	0f64      	lsrs	r4, r4, #29
 8001124:	430c      	orrs	r4, r1
 8001126:	9900      	ldr	r1, [sp, #0]
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	00c8      	lsls	r0, r1, #3
 800112e:	0059      	lsls	r1, r3, #1
 8001130:	0d4b      	lsrs	r3, r1, #21
 8001132:	4699      	mov	r9, r3
 8001134:	9a00      	ldr	r2, [sp, #0]
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	0a6d      	lsrs	r5, r5, #9
 800113a:	0fd9      	lsrs	r1, r3, #31
 800113c:	0f53      	lsrs	r3, r2, #29
 800113e:	432b      	orrs	r3, r5
 8001140:	469a      	mov	sl, r3
 8001142:	9b00      	ldr	r3, [sp, #0]
 8001144:	0d7f      	lsrs	r7, r7, #21
 8001146:	00da      	lsls	r2, r3, #3
 8001148:	4694      	mov	ip, r2
 800114a:	464a      	mov	r2, r9
 800114c:	46b0      	mov	r8, r6
 800114e:	1aba      	subs	r2, r7, r2
 8001150:	428e      	cmp	r6, r1
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x52>
 8001154:	e0b0      	b.n	80012b8 <__aeabi_dadd+0x1b4>
 8001156:	2a00      	cmp	r2, #0
 8001158:	dc00      	bgt.n	800115c <__aeabi_dadd+0x58>
 800115a:	e078      	b.n	800124e <__aeabi_dadd+0x14a>
 800115c:	4649      	mov	r1, r9
 800115e:	2900      	cmp	r1, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_dadd+0x60>
 8001162:	e0e9      	b.n	8001338 <__aeabi_dadd+0x234>
 8001164:	49c9      	ldr	r1, [pc, #804]	@ (800148c <__aeabi_dadd+0x388>)
 8001166:	428f      	cmp	r7, r1
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x68>
 800116a:	e195      	b.n	8001498 <__aeabi_dadd+0x394>
 800116c:	2501      	movs	r5, #1
 800116e:	2a38      	cmp	r2, #56	@ 0x38
 8001170:	dc16      	bgt.n	80011a0 <__aeabi_dadd+0x9c>
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	4653      	mov	r3, sl
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	430b      	orrs	r3, r1
 800117a:	469a      	mov	sl, r3
 800117c:	2a1f      	cmp	r2, #31
 800117e:	dd00      	ble.n	8001182 <__aeabi_dadd+0x7e>
 8001180:	e1e7      	b.n	8001552 <__aeabi_dadd+0x44e>
 8001182:	2120      	movs	r1, #32
 8001184:	4655      	mov	r5, sl
 8001186:	1a8b      	subs	r3, r1, r2
 8001188:	4661      	mov	r1, ip
 800118a:	409d      	lsls	r5, r3
 800118c:	40d1      	lsrs	r1, r2
 800118e:	430d      	orrs	r5, r1
 8001190:	4661      	mov	r1, ip
 8001192:	4099      	lsls	r1, r3
 8001194:	1e4b      	subs	r3, r1, #1
 8001196:	4199      	sbcs	r1, r3
 8001198:	4653      	mov	r3, sl
 800119a:	40d3      	lsrs	r3, r2
 800119c:	430d      	orrs	r5, r1
 800119e:	1ae4      	subs	r4, r4, r3
 80011a0:	1b45      	subs	r5, r0, r5
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	4180      	sbcs	r0, r0
 80011a6:	4240      	negs	r0, r0
 80011a8:	1a24      	subs	r4, r4, r0
 80011aa:	0223      	lsls	r3, r4, #8
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_dadd+0xac>
 80011ae:	e10f      	b.n	80013d0 <__aeabi_dadd+0x2cc>
 80011b0:	0264      	lsls	r4, r4, #9
 80011b2:	0a64      	lsrs	r4, r4, #9
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0xb6>
 80011b8:	e139      	b.n	800142e <__aeabi_dadd+0x32a>
 80011ba:	0020      	movs	r0, r4
 80011bc:	f001 ff2a 	bl	8003014 <__clzsi2>
 80011c0:	0003      	movs	r3, r0
 80011c2:	3b08      	subs	r3, #8
 80011c4:	2120      	movs	r1, #32
 80011c6:	0028      	movs	r0, r5
 80011c8:	1aca      	subs	r2, r1, r3
 80011ca:	40d0      	lsrs	r0, r2
 80011cc:	409c      	lsls	r4, r3
 80011ce:	0002      	movs	r2, r0
 80011d0:	409d      	lsls	r5, r3
 80011d2:	4322      	orrs	r2, r4
 80011d4:	429f      	cmp	r7, r3
 80011d6:	dd00      	ble.n	80011da <__aeabi_dadd+0xd6>
 80011d8:	e173      	b.n	80014c2 <__aeabi_dadd+0x3be>
 80011da:	1bd8      	subs	r0, r3, r7
 80011dc:	3001      	adds	r0, #1
 80011de:	1a09      	subs	r1, r1, r0
 80011e0:	002c      	movs	r4, r5
 80011e2:	408d      	lsls	r5, r1
 80011e4:	40c4      	lsrs	r4, r0
 80011e6:	1e6b      	subs	r3, r5, #1
 80011e8:	419d      	sbcs	r5, r3
 80011ea:	0013      	movs	r3, r2
 80011ec:	40c2      	lsrs	r2, r0
 80011ee:	408b      	lsls	r3, r1
 80011f0:	4325      	orrs	r5, r4
 80011f2:	2700      	movs	r7, #0
 80011f4:	0014      	movs	r4, r2
 80011f6:	431d      	orrs	r5, r3
 80011f8:	076b      	lsls	r3, r5, #29
 80011fa:	d009      	beq.n	8001210 <__aeabi_dadd+0x10c>
 80011fc:	230f      	movs	r3, #15
 80011fe:	402b      	ands	r3, r5
 8001200:	2b04      	cmp	r3, #4
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0x10c>
 8001204:	1d2b      	adds	r3, r5, #4
 8001206:	42ab      	cmp	r3, r5
 8001208:	41ad      	sbcs	r5, r5
 800120a:	426d      	negs	r5, r5
 800120c:	1964      	adds	r4, r4, r5
 800120e:	001d      	movs	r5, r3
 8001210:	0223      	lsls	r3, r4, #8
 8001212:	d400      	bmi.n	8001216 <__aeabi_dadd+0x112>
 8001214:	e12d      	b.n	8001472 <__aeabi_dadd+0x36e>
 8001216:	4a9d      	ldr	r2, [pc, #628]	@ (800148c <__aeabi_dadd+0x388>)
 8001218:	3701      	adds	r7, #1
 800121a:	4297      	cmp	r7, r2
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x11c>
 800121e:	e0d3      	b.n	80013c8 <__aeabi_dadd+0x2c4>
 8001220:	4646      	mov	r6, r8
 8001222:	499b      	ldr	r1, [pc, #620]	@ (8001490 <__aeabi_dadd+0x38c>)
 8001224:	08ed      	lsrs	r5, r5, #3
 8001226:	4021      	ands	r1, r4
 8001228:	074a      	lsls	r2, r1, #29
 800122a:	432a      	orrs	r2, r5
 800122c:	057c      	lsls	r4, r7, #21
 800122e:	024d      	lsls	r5, r1, #9
 8001230:	0b2d      	lsrs	r5, r5, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0524      	lsls	r4, r4, #20
 8001236:	432c      	orrs	r4, r5
 8001238:	07f6      	lsls	r6, r6, #31
 800123a:	4334      	orrs	r4, r6
 800123c:	0010      	movs	r0, r2
 800123e:	0021      	movs	r1, r4
 8001240:	b003      	add	sp, #12
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	46bb      	mov	fp, r7
 8001246:	46b2      	mov	sl, r6
 8001248:	46a9      	mov	r9, r5
 800124a:	46a0      	mov	r8, r4
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	2a00      	cmp	r2, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x150>
 8001252:	e084      	b.n	800135e <__aeabi_dadd+0x25a>
 8001254:	464a      	mov	r2, r9
 8001256:	1bd2      	subs	r2, r2, r7
 8001258:	2f00      	cmp	r7, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x15a>
 800125c:	e16d      	b.n	800153a <__aeabi_dadd+0x436>
 800125e:	0025      	movs	r5, r4
 8001260:	4305      	orrs	r5, r0
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x162>
 8001264:	e127      	b.n	80014b6 <__aeabi_dadd+0x3b2>
 8001266:	1e56      	subs	r6, r2, #1
 8001268:	2a01      	cmp	r2, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x16a>
 800126c:	e23b      	b.n	80016e6 <__aeabi_dadd+0x5e2>
 800126e:	4d87      	ldr	r5, [pc, #540]	@ (800148c <__aeabi_dadd+0x388>)
 8001270:	42aa      	cmp	r2, r5
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x172>
 8001274:	e26a      	b.n	800174c <__aeabi_dadd+0x648>
 8001276:	2501      	movs	r5, #1
 8001278:	2e38      	cmp	r6, #56	@ 0x38
 800127a:	dc12      	bgt.n	80012a2 <__aeabi_dadd+0x19e>
 800127c:	0032      	movs	r2, r6
 800127e:	2a1f      	cmp	r2, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x180>
 8001282:	e1f8      	b.n	8001676 <__aeabi_dadd+0x572>
 8001284:	2620      	movs	r6, #32
 8001286:	0025      	movs	r5, r4
 8001288:	1ab6      	subs	r6, r6, r2
 800128a:	0007      	movs	r7, r0
 800128c:	4653      	mov	r3, sl
 800128e:	40b0      	lsls	r0, r6
 8001290:	40d4      	lsrs	r4, r2
 8001292:	40b5      	lsls	r5, r6
 8001294:	40d7      	lsrs	r7, r2
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	1b1b      	subs	r3, r3, r4
 800129c:	469a      	mov	sl, r3
 800129e:	433d      	orrs	r5, r7
 80012a0:	4305      	orrs	r5, r0
 80012a2:	4662      	mov	r2, ip
 80012a4:	1b55      	subs	r5, r2, r5
 80012a6:	45ac      	cmp	ip, r5
 80012a8:	4192      	sbcs	r2, r2
 80012aa:	4653      	mov	r3, sl
 80012ac:	4252      	negs	r2, r2
 80012ae:	000e      	movs	r6, r1
 80012b0:	464f      	mov	r7, r9
 80012b2:	4688      	mov	r8, r1
 80012b4:	1a9c      	subs	r4, r3, r2
 80012b6:	e778      	b.n	80011aa <__aeabi_dadd+0xa6>
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	dc00      	bgt.n	80012be <__aeabi_dadd+0x1ba>
 80012bc:	e08e      	b.n	80013dc <__aeabi_dadd+0x2d8>
 80012be:	4649      	mov	r1, r9
 80012c0:	2900      	cmp	r1, #0
 80012c2:	d175      	bne.n	80013b0 <__aeabi_dadd+0x2ac>
 80012c4:	4661      	mov	r1, ip
 80012c6:	4653      	mov	r3, sl
 80012c8:	4319      	orrs	r1, r3
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x1ca>
 80012cc:	e0f6      	b.n	80014bc <__aeabi_dadd+0x3b8>
 80012ce:	1e51      	subs	r1, r2, #1
 80012d0:	2a01      	cmp	r2, #1
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x1d2>
 80012d4:	e191      	b.n	80015fa <__aeabi_dadd+0x4f6>
 80012d6:	4d6d      	ldr	r5, [pc, #436]	@ (800148c <__aeabi_dadd+0x388>)
 80012d8:	42aa      	cmp	r2, r5
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x1da>
 80012dc:	e0dc      	b.n	8001498 <__aeabi_dadd+0x394>
 80012de:	2501      	movs	r5, #1
 80012e0:	2938      	cmp	r1, #56	@ 0x38
 80012e2:	dc14      	bgt.n	800130e <__aeabi_dadd+0x20a>
 80012e4:	000a      	movs	r2, r1
 80012e6:	2a1f      	cmp	r2, #31
 80012e8:	dd00      	ble.n	80012ec <__aeabi_dadd+0x1e8>
 80012ea:	e1a2      	b.n	8001632 <__aeabi_dadd+0x52e>
 80012ec:	2120      	movs	r1, #32
 80012ee:	4653      	mov	r3, sl
 80012f0:	1a89      	subs	r1, r1, r2
 80012f2:	408b      	lsls	r3, r1
 80012f4:	001d      	movs	r5, r3
 80012f6:	4663      	mov	r3, ip
 80012f8:	40d3      	lsrs	r3, r2
 80012fa:	431d      	orrs	r5, r3
 80012fc:	4663      	mov	r3, ip
 80012fe:	408b      	lsls	r3, r1
 8001300:	0019      	movs	r1, r3
 8001302:	1e4b      	subs	r3, r1, #1
 8001304:	4199      	sbcs	r1, r3
 8001306:	4653      	mov	r3, sl
 8001308:	40d3      	lsrs	r3, r2
 800130a:	430d      	orrs	r5, r1
 800130c:	18e4      	adds	r4, r4, r3
 800130e:	182d      	adds	r5, r5, r0
 8001310:	4285      	cmp	r5, r0
 8001312:	4180      	sbcs	r0, r0
 8001314:	4240      	negs	r0, r0
 8001316:	1824      	adds	r4, r4, r0
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	d559      	bpl.n	80013d0 <__aeabi_dadd+0x2cc>
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <__aeabi_dadd+0x388>)
 800131e:	3701      	adds	r7, #1
 8001320:	429f      	cmp	r7, r3
 8001322:	d051      	beq.n	80013c8 <__aeabi_dadd+0x2c4>
 8001324:	2101      	movs	r1, #1
 8001326:	4b5a      	ldr	r3, [pc, #360]	@ (8001490 <__aeabi_dadd+0x38c>)
 8001328:	086a      	lsrs	r2, r5, #1
 800132a:	401c      	ands	r4, r3
 800132c:	4029      	ands	r1, r5
 800132e:	430a      	orrs	r2, r1
 8001330:	07e5      	lsls	r5, r4, #31
 8001332:	4315      	orrs	r5, r2
 8001334:	0864      	lsrs	r4, r4, #1
 8001336:	e75f      	b.n	80011f8 <__aeabi_dadd+0xf4>
 8001338:	4661      	mov	r1, ip
 800133a:	4653      	mov	r3, sl
 800133c:	4319      	orrs	r1, r3
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x23e>
 8001340:	e0bc      	b.n	80014bc <__aeabi_dadd+0x3b8>
 8001342:	1e51      	subs	r1, r2, #1
 8001344:	2a01      	cmp	r2, #1
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x246>
 8001348:	e164      	b.n	8001614 <__aeabi_dadd+0x510>
 800134a:	4d50      	ldr	r5, [pc, #320]	@ (800148c <__aeabi_dadd+0x388>)
 800134c:	42aa      	cmp	r2, r5
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x24e>
 8001350:	e16a      	b.n	8001628 <__aeabi_dadd+0x524>
 8001352:	2501      	movs	r5, #1
 8001354:	2938      	cmp	r1, #56	@ 0x38
 8001356:	dd00      	ble.n	800135a <__aeabi_dadd+0x256>
 8001358:	e722      	b.n	80011a0 <__aeabi_dadd+0x9c>
 800135a:	000a      	movs	r2, r1
 800135c:	e70e      	b.n	800117c <__aeabi_dadd+0x78>
 800135e:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <__aeabi_dadd+0x390>)
 8001360:	1c7d      	adds	r5, r7, #1
 8001362:	4215      	tst	r5, r2
 8001364:	d000      	beq.n	8001368 <__aeabi_dadd+0x264>
 8001366:	e0d0      	b.n	800150a <__aeabi_dadd+0x406>
 8001368:	0025      	movs	r5, r4
 800136a:	4662      	mov	r2, ip
 800136c:	4653      	mov	r3, sl
 800136e:	4305      	orrs	r5, r0
 8001370:	431a      	orrs	r2, r3
 8001372:	2f00      	cmp	r7, #0
 8001374:	d000      	beq.n	8001378 <__aeabi_dadd+0x274>
 8001376:	e137      	b.n	80015e8 <__aeabi_dadd+0x4e4>
 8001378:	2d00      	cmp	r5, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x27a>
 800137c:	e1a8      	b.n	80016d0 <__aeabi_dadd+0x5cc>
 800137e:	2a00      	cmp	r2, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x280>
 8001382:	e16a      	b.n	800165a <__aeabi_dadd+0x556>
 8001384:	4663      	mov	r3, ip
 8001386:	1ac5      	subs	r5, r0, r3
 8001388:	4653      	mov	r3, sl
 800138a:	1ae2      	subs	r2, r4, r3
 800138c:	42a8      	cmp	r0, r5
 800138e:	419b      	sbcs	r3, r3
 8001390:	425b      	negs	r3, r3
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	021a      	lsls	r2, r3, #8
 8001396:	d400      	bmi.n	800139a <__aeabi_dadd+0x296>
 8001398:	e203      	b.n	80017a2 <__aeabi_dadd+0x69e>
 800139a:	4663      	mov	r3, ip
 800139c:	1a1d      	subs	r5, r3, r0
 800139e:	45ac      	cmp	ip, r5
 80013a0:	4192      	sbcs	r2, r2
 80013a2:	4653      	mov	r3, sl
 80013a4:	4252      	negs	r2, r2
 80013a6:	1b1c      	subs	r4, r3, r4
 80013a8:	000e      	movs	r6, r1
 80013aa:	4688      	mov	r8, r1
 80013ac:	1aa4      	subs	r4, r4, r2
 80013ae:	e723      	b.n	80011f8 <__aeabi_dadd+0xf4>
 80013b0:	4936      	ldr	r1, [pc, #216]	@ (800148c <__aeabi_dadd+0x388>)
 80013b2:	428f      	cmp	r7, r1
 80013b4:	d070      	beq.n	8001498 <__aeabi_dadd+0x394>
 80013b6:	2501      	movs	r5, #1
 80013b8:	2a38      	cmp	r2, #56	@ 0x38
 80013ba:	dca8      	bgt.n	800130e <__aeabi_dadd+0x20a>
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	4653      	mov	r3, sl
 80013c0:	0409      	lsls	r1, r1, #16
 80013c2:	430b      	orrs	r3, r1
 80013c4:	469a      	mov	sl, r3
 80013c6:	e78e      	b.n	80012e6 <__aeabi_dadd+0x1e2>
 80013c8:	003c      	movs	r4, r7
 80013ca:	2500      	movs	r5, #0
 80013cc:	2200      	movs	r2, #0
 80013ce:	e731      	b.n	8001234 <__aeabi_dadd+0x130>
 80013d0:	2307      	movs	r3, #7
 80013d2:	402b      	ands	r3, r5
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x2d6>
 80013d8:	e710      	b.n	80011fc <__aeabi_dadd+0xf8>
 80013da:	e093      	b.n	8001504 <__aeabi_dadd+0x400>
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d074      	beq.n	80014ca <__aeabi_dadd+0x3c6>
 80013e0:	464a      	mov	r2, r9
 80013e2:	1bd2      	subs	r2, r2, r7
 80013e4:	2f00      	cmp	r7, #0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x2e6>
 80013e8:	e0c7      	b.n	800157a <__aeabi_dadd+0x476>
 80013ea:	4928      	ldr	r1, [pc, #160]	@ (800148c <__aeabi_dadd+0x388>)
 80013ec:	4589      	cmp	r9, r1
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x2ee>
 80013f0:	e185      	b.n	80016fe <__aeabi_dadd+0x5fa>
 80013f2:	2501      	movs	r5, #1
 80013f4:	2a38      	cmp	r2, #56	@ 0x38
 80013f6:	dc12      	bgt.n	800141e <__aeabi_dadd+0x31a>
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	430c      	orrs	r4, r1
 80013fe:	2a1f      	cmp	r2, #31
 8001400:	dd00      	ble.n	8001404 <__aeabi_dadd+0x300>
 8001402:	e1ab      	b.n	800175c <__aeabi_dadd+0x658>
 8001404:	2120      	movs	r1, #32
 8001406:	0025      	movs	r5, r4
 8001408:	1a89      	subs	r1, r1, r2
 800140a:	0007      	movs	r7, r0
 800140c:	4088      	lsls	r0, r1
 800140e:	408d      	lsls	r5, r1
 8001410:	40d7      	lsrs	r7, r2
 8001412:	1e41      	subs	r1, r0, #1
 8001414:	4188      	sbcs	r0, r1
 8001416:	40d4      	lsrs	r4, r2
 8001418:	433d      	orrs	r5, r7
 800141a:	4305      	orrs	r5, r0
 800141c:	44a2      	add	sl, r4
 800141e:	4465      	add	r5, ip
 8001420:	4565      	cmp	r5, ip
 8001422:	4192      	sbcs	r2, r2
 8001424:	4252      	negs	r2, r2
 8001426:	4452      	add	r2, sl
 8001428:	0014      	movs	r4, r2
 800142a:	464f      	mov	r7, r9
 800142c:	e774      	b.n	8001318 <__aeabi_dadd+0x214>
 800142e:	0028      	movs	r0, r5
 8001430:	f001 fdf0 	bl	8003014 <__clzsi2>
 8001434:	0003      	movs	r3, r0
 8001436:	3318      	adds	r3, #24
 8001438:	2b1f      	cmp	r3, #31
 800143a:	dc00      	bgt.n	800143e <__aeabi_dadd+0x33a>
 800143c:	e6c2      	b.n	80011c4 <__aeabi_dadd+0xc0>
 800143e:	002a      	movs	r2, r5
 8001440:	3808      	subs	r0, #8
 8001442:	4082      	lsls	r2, r0
 8001444:	429f      	cmp	r7, r3
 8001446:	dd00      	ble.n	800144a <__aeabi_dadd+0x346>
 8001448:	e0a9      	b.n	800159e <__aeabi_dadd+0x49a>
 800144a:	1bdb      	subs	r3, r3, r7
 800144c:	1c58      	adds	r0, r3, #1
 800144e:	281f      	cmp	r0, #31
 8001450:	dc00      	bgt.n	8001454 <__aeabi_dadd+0x350>
 8001452:	e1ac      	b.n	80017ae <__aeabi_dadd+0x6aa>
 8001454:	0015      	movs	r5, r2
 8001456:	3b1f      	subs	r3, #31
 8001458:	40dd      	lsrs	r5, r3
 800145a:	2820      	cmp	r0, #32
 800145c:	d005      	beq.n	800146a <__aeabi_dadd+0x366>
 800145e:	2340      	movs	r3, #64	@ 0x40
 8001460:	1a1b      	subs	r3, r3, r0
 8001462:	409a      	lsls	r2, r3
 8001464:	1e53      	subs	r3, r2, #1
 8001466:	419a      	sbcs	r2, r3
 8001468:	4315      	orrs	r5, r2
 800146a:	2307      	movs	r3, #7
 800146c:	2700      	movs	r7, #0
 800146e:	402b      	ands	r3, r5
 8001470:	e7b0      	b.n	80013d4 <__aeabi_dadd+0x2d0>
 8001472:	08ed      	lsrs	r5, r5, #3
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <__aeabi_dadd+0x388>)
 8001476:	0762      	lsls	r2, r4, #29
 8001478:	432a      	orrs	r2, r5
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	429f      	cmp	r7, r3
 800147e:	d00f      	beq.n	80014a0 <__aeabi_dadd+0x39c>
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	0b25      	lsrs	r5, r4, #12
 8001484:	057c      	lsls	r4, r7, #21
 8001486:	0d64      	lsrs	r4, r4, #21
 8001488:	e6d4      	b.n	8001234 <__aeabi_dadd+0x130>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff
 8001490:	ff7fffff 	.word	0xff7fffff
 8001494:	000007fe 	.word	0x000007fe
 8001498:	08c0      	lsrs	r0, r0, #3
 800149a:	0762      	lsls	r2, r4, #29
 800149c:	4302      	orrs	r2, r0
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	0013      	movs	r3, r2
 80014a2:	4323      	orrs	r3, r4
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x3a4>
 80014a6:	e186      	b.n	80017b6 <__aeabi_dadd+0x6b2>
 80014a8:	2580      	movs	r5, #128	@ 0x80
 80014aa:	032d      	lsls	r5, r5, #12
 80014ac:	4325      	orrs	r5, r4
 80014ae:	032d      	lsls	r5, r5, #12
 80014b0:	4cc3      	ldr	r4, [pc, #780]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80014b2:	0b2d      	lsrs	r5, r5, #12
 80014b4:	e6be      	b.n	8001234 <__aeabi_dadd+0x130>
 80014b6:	4660      	mov	r0, ip
 80014b8:	4654      	mov	r4, sl
 80014ba:	000e      	movs	r6, r1
 80014bc:	0017      	movs	r7, r2
 80014be:	08c5      	lsrs	r5, r0, #3
 80014c0:	e7d8      	b.n	8001474 <__aeabi_dadd+0x370>
 80014c2:	4cc0      	ldr	r4, [pc, #768]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 80014c4:	1aff      	subs	r7, r7, r3
 80014c6:	4014      	ands	r4, r2
 80014c8:	e696      	b.n	80011f8 <__aeabi_dadd+0xf4>
 80014ca:	4abf      	ldr	r2, [pc, #764]	@ (80017c8 <__aeabi_dadd+0x6c4>)
 80014cc:	1c79      	adds	r1, r7, #1
 80014ce:	4211      	tst	r1, r2
 80014d0:	d16b      	bne.n	80015aa <__aeabi_dadd+0x4a6>
 80014d2:	0022      	movs	r2, r4
 80014d4:	4302      	orrs	r2, r0
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	d000      	beq.n	80014dc <__aeabi_dadd+0x3d8>
 80014da:	e0db      	b.n	8001694 <__aeabi_dadd+0x590>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x3de>
 80014e0:	e12d      	b.n	800173e <__aeabi_dadd+0x63a>
 80014e2:	4662      	mov	r2, ip
 80014e4:	4653      	mov	r3, sl
 80014e6:	431a      	orrs	r2, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x3e8>
 80014ea:	e0b6      	b.n	800165a <__aeabi_dadd+0x556>
 80014ec:	4663      	mov	r3, ip
 80014ee:	18c5      	adds	r5, r0, r3
 80014f0:	4285      	cmp	r5, r0
 80014f2:	4180      	sbcs	r0, r0
 80014f4:	4454      	add	r4, sl
 80014f6:	4240      	negs	r0, r0
 80014f8:	1824      	adds	r4, r4, r0
 80014fa:	0223      	lsls	r3, r4, #8
 80014fc:	d502      	bpl.n	8001504 <__aeabi_dadd+0x400>
 80014fe:	000f      	movs	r7, r1
 8001500:	4bb0      	ldr	r3, [pc, #704]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 8001502:	401c      	ands	r4, r3
 8001504:	003a      	movs	r2, r7
 8001506:	0028      	movs	r0, r5
 8001508:	e7d8      	b.n	80014bc <__aeabi_dadd+0x3b8>
 800150a:	4662      	mov	r2, ip
 800150c:	1a85      	subs	r5, r0, r2
 800150e:	42a8      	cmp	r0, r5
 8001510:	4192      	sbcs	r2, r2
 8001512:	4653      	mov	r3, sl
 8001514:	4252      	negs	r2, r2
 8001516:	4691      	mov	r9, r2
 8001518:	1ae3      	subs	r3, r4, r3
 800151a:	001a      	movs	r2, r3
 800151c:	464b      	mov	r3, r9
 800151e:	1ad2      	subs	r2, r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	4691      	mov	r9, r2
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	d454      	bmi.n	80015d2 <__aeabi_dadd+0x4ce>
 8001528:	464a      	mov	r2, r9
 800152a:	464c      	mov	r4, r9
 800152c:	432a      	orrs	r2, r5
 800152e:	d000      	beq.n	8001532 <__aeabi_dadd+0x42e>
 8001530:	e640      	b.n	80011b4 <__aeabi_dadd+0xb0>
 8001532:	2600      	movs	r6, #0
 8001534:	2400      	movs	r4, #0
 8001536:	2500      	movs	r5, #0
 8001538:	e67c      	b.n	8001234 <__aeabi_dadd+0x130>
 800153a:	4da1      	ldr	r5, [pc, #644]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 800153c:	45a9      	cmp	r9, r5
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x43e>
 8001540:	e090      	b.n	8001664 <__aeabi_dadd+0x560>
 8001542:	2501      	movs	r5, #1
 8001544:	2a38      	cmp	r2, #56	@ 0x38
 8001546:	dd00      	ble.n	800154a <__aeabi_dadd+0x446>
 8001548:	e6ab      	b.n	80012a2 <__aeabi_dadd+0x19e>
 800154a:	2580      	movs	r5, #128	@ 0x80
 800154c:	042d      	lsls	r5, r5, #16
 800154e:	432c      	orrs	r4, r5
 8001550:	e695      	b.n	800127e <__aeabi_dadd+0x17a>
 8001552:	0011      	movs	r1, r2
 8001554:	4655      	mov	r5, sl
 8001556:	3920      	subs	r1, #32
 8001558:	40cd      	lsrs	r5, r1
 800155a:	46a9      	mov	r9, r5
 800155c:	2a20      	cmp	r2, #32
 800155e:	d006      	beq.n	800156e <__aeabi_dadd+0x46a>
 8001560:	2140      	movs	r1, #64	@ 0x40
 8001562:	4653      	mov	r3, sl
 8001564:	1a8a      	subs	r2, r1, r2
 8001566:	4093      	lsls	r3, r2
 8001568:	4662      	mov	r2, ip
 800156a:	431a      	orrs	r2, r3
 800156c:	4694      	mov	ip, r2
 800156e:	4665      	mov	r5, ip
 8001570:	1e6b      	subs	r3, r5, #1
 8001572:	419d      	sbcs	r5, r3
 8001574:	464b      	mov	r3, r9
 8001576:	431d      	orrs	r5, r3
 8001578:	e612      	b.n	80011a0 <__aeabi_dadd+0x9c>
 800157a:	0021      	movs	r1, r4
 800157c:	4301      	orrs	r1, r0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x47e>
 8001580:	e0c4      	b.n	800170c <__aeabi_dadd+0x608>
 8001582:	1e51      	subs	r1, r2, #1
 8001584:	2a01      	cmp	r2, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x486>
 8001588:	e0fb      	b.n	8001782 <__aeabi_dadd+0x67e>
 800158a:	4d8d      	ldr	r5, [pc, #564]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 800158c:	42aa      	cmp	r2, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x48e>
 8001590:	e0b5      	b.n	80016fe <__aeabi_dadd+0x5fa>
 8001592:	2501      	movs	r5, #1
 8001594:	2938      	cmp	r1, #56	@ 0x38
 8001596:	dd00      	ble.n	800159a <__aeabi_dadd+0x496>
 8001598:	e741      	b.n	800141e <__aeabi_dadd+0x31a>
 800159a:	000a      	movs	r2, r1
 800159c:	e72f      	b.n	80013fe <__aeabi_dadd+0x2fa>
 800159e:	4c89      	ldr	r4, [pc, #548]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 80015a0:	1aff      	subs	r7, r7, r3
 80015a2:	4014      	ands	r4, r2
 80015a4:	0762      	lsls	r2, r4, #29
 80015a6:	08e4      	lsrs	r4, r4, #3
 80015a8:	e76a      	b.n	8001480 <__aeabi_dadd+0x37c>
 80015aa:	4a85      	ldr	r2, [pc, #532]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80015ac:	4291      	cmp	r1, r2
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dadd+0x4ae>
 80015b0:	e0e3      	b.n	800177a <__aeabi_dadd+0x676>
 80015b2:	4663      	mov	r3, ip
 80015b4:	18c2      	adds	r2, r0, r3
 80015b6:	4282      	cmp	r2, r0
 80015b8:	4180      	sbcs	r0, r0
 80015ba:	0023      	movs	r3, r4
 80015bc:	4240      	negs	r0, r0
 80015be:	4453      	add	r3, sl
 80015c0:	181b      	adds	r3, r3, r0
 80015c2:	07dd      	lsls	r5, r3, #31
 80015c4:	085c      	lsrs	r4, r3, #1
 80015c6:	2307      	movs	r3, #7
 80015c8:	0852      	lsrs	r2, r2, #1
 80015ca:	4315      	orrs	r5, r2
 80015cc:	000f      	movs	r7, r1
 80015ce:	402b      	ands	r3, r5
 80015d0:	e700      	b.n	80013d4 <__aeabi_dadd+0x2d0>
 80015d2:	4663      	mov	r3, ip
 80015d4:	1a1d      	subs	r5, r3, r0
 80015d6:	45ac      	cmp	ip, r5
 80015d8:	4192      	sbcs	r2, r2
 80015da:	4653      	mov	r3, sl
 80015dc:	4252      	negs	r2, r2
 80015de:	1b1c      	subs	r4, r3, r4
 80015e0:	000e      	movs	r6, r1
 80015e2:	4688      	mov	r8, r1
 80015e4:	1aa4      	subs	r4, r4, r2
 80015e6:	e5e5      	b.n	80011b4 <__aeabi_dadd+0xb0>
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x4ea>
 80015ec:	e091      	b.n	8001712 <__aeabi_dadd+0x60e>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d138      	bne.n	8001664 <__aeabi_dadd+0x560>
 80015f2:	2480      	movs	r4, #128	@ 0x80
 80015f4:	2600      	movs	r6, #0
 80015f6:	0324      	lsls	r4, r4, #12
 80015f8:	e756      	b.n	80014a8 <__aeabi_dadd+0x3a4>
 80015fa:	4663      	mov	r3, ip
 80015fc:	18c5      	adds	r5, r0, r3
 80015fe:	4285      	cmp	r5, r0
 8001600:	4180      	sbcs	r0, r0
 8001602:	4454      	add	r4, sl
 8001604:	4240      	negs	r0, r0
 8001606:	1824      	adds	r4, r4, r0
 8001608:	2701      	movs	r7, #1
 800160a:	0223      	lsls	r3, r4, #8
 800160c:	d400      	bmi.n	8001610 <__aeabi_dadd+0x50c>
 800160e:	e6df      	b.n	80013d0 <__aeabi_dadd+0x2cc>
 8001610:	2702      	movs	r7, #2
 8001612:	e687      	b.n	8001324 <__aeabi_dadd+0x220>
 8001614:	4663      	mov	r3, ip
 8001616:	1ac5      	subs	r5, r0, r3
 8001618:	42a8      	cmp	r0, r5
 800161a:	4180      	sbcs	r0, r0
 800161c:	4653      	mov	r3, sl
 800161e:	4240      	negs	r0, r0
 8001620:	1ae4      	subs	r4, r4, r3
 8001622:	2701      	movs	r7, #1
 8001624:	1a24      	subs	r4, r4, r0
 8001626:	e5c0      	b.n	80011aa <__aeabi_dadd+0xa6>
 8001628:	0762      	lsls	r2, r4, #29
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	4302      	orrs	r2, r0
 800162e:	08e4      	lsrs	r4, r4, #3
 8001630:	e736      	b.n	80014a0 <__aeabi_dadd+0x39c>
 8001632:	0011      	movs	r1, r2
 8001634:	4653      	mov	r3, sl
 8001636:	3920      	subs	r1, #32
 8001638:	40cb      	lsrs	r3, r1
 800163a:	4699      	mov	r9, r3
 800163c:	2a20      	cmp	r2, #32
 800163e:	d006      	beq.n	800164e <__aeabi_dadd+0x54a>
 8001640:	2140      	movs	r1, #64	@ 0x40
 8001642:	4653      	mov	r3, sl
 8001644:	1a8a      	subs	r2, r1, r2
 8001646:	4093      	lsls	r3, r2
 8001648:	4662      	mov	r2, ip
 800164a:	431a      	orrs	r2, r3
 800164c:	4694      	mov	ip, r2
 800164e:	4665      	mov	r5, ip
 8001650:	1e6b      	subs	r3, r5, #1
 8001652:	419d      	sbcs	r5, r3
 8001654:	464b      	mov	r3, r9
 8001656:	431d      	orrs	r5, r3
 8001658:	e659      	b.n	800130e <__aeabi_dadd+0x20a>
 800165a:	0762      	lsls	r2, r4, #29
 800165c:	08c0      	lsrs	r0, r0, #3
 800165e:	4302      	orrs	r2, r0
 8001660:	08e4      	lsrs	r4, r4, #3
 8001662:	e70d      	b.n	8001480 <__aeabi_dadd+0x37c>
 8001664:	4653      	mov	r3, sl
 8001666:	075a      	lsls	r2, r3, #29
 8001668:	4663      	mov	r3, ip
 800166a:	08d8      	lsrs	r0, r3, #3
 800166c:	4653      	mov	r3, sl
 800166e:	000e      	movs	r6, r1
 8001670:	4302      	orrs	r2, r0
 8001672:	08dc      	lsrs	r4, r3, #3
 8001674:	e714      	b.n	80014a0 <__aeabi_dadd+0x39c>
 8001676:	0015      	movs	r5, r2
 8001678:	0026      	movs	r6, r4
 800167a:	3d20      	subs	r5, #32
 800167c:	40ee      	lsrs	r6, r5
 800167e:	2a20      	cmp	r2, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x586>
 8001682:	2540      	movs	r5, #64	@ 0x40
 8001684:	1aaa      	subs	r2, r5, r2
 8001686:	4094      	lsls	r4, r2
 8001688:	4320      	orrs	r0, r4
 800168a:	1e42      	subs	r2, r0, #1
 800168c:	4190      	sbcs	r0, r2
 800168e:	0005      	movs	r5, r0
 8001690:	4335      	orrs	r5, r6
 8001692:	e606      	b.n	80012a2 <__aeabi_dadd+0x19e>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d07c      	beq.n	8001792 <__aeabi_dadd+0x68e>
 8001698:	4662      	mov	r2, ip
 800169a:	4653      	mov	r3, sl
 800169c:	08c0      	lsrs	r0, r0, #3
 800169e:	431a      	orrs	r2, r3
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x5a0>
 80016a2:	e6fa      	b.n	800149a <__aeabi_dadd+0x396>
 80016a4:	0762      	lsls	r2, r4, #29
 80016a6:	4310      	orrs	r0, r2
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	08e4      	lsrs	r4, r4, #3
 80016ac:	0312      	lsls	r2, r2, #12
 80016ae:	4214      	tst	r4, r2
 80016b0:	d008      	beq.n	80016c4 <__aeabi_dadd+0x5c0>
 80016b2:	08d9      	lsrs	r1, r3, #3
 80016b4:	4211      	tst	r1, r2
 80016b6:	d105      	bne.n	80016c4 <__aeabi_dadd+0x5c0>
 80016b8:	4663      	mov	r3, ip
 80016ba:	08d8      	lsrs	r0, r3, #3
 80016bc:	4653      	mov	r3, sl
 80016be:	000c      	movs	r4, r1
 80016c0:	075b      	lsls	r3, r3, #29
 80016c2:	4318      	orrs	r0, r3
 80016c4:	0f42      	lsrs	r2, r0, #29
 80016c6:	00c0      	lsls	r0, r0, #3
 80016c8:	08c0      	lsrs	r0, r0, #3
 80016ca:	0752      	lsls	r2, r2, #29
 80016cc:	4302      	orrs	r2, r0
 80016ce:	e6e7      	b.n	80014a0 <__aeabi_dadd+0x39c>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x5d2>
 80016d4:	e72d      	b.n	8001532 <__aeabi_dadd+0x42e>
 80016d6:	4663      	mov	r3, ip
 80016d8:	08d8      	lsrs	r0, r3, #3
 80016da:	4653      	mov	r3, sl
 80016dc:	075a      	lsls	r2, r3, #29
 80016de:	000e      	movs	r6, r1
 80016e0:	4302      	orrs	r2, r0
 80016e2:	08dc      	lsrs	r4, r3, #3
 80016e4:	e6cc      	b.n	8001480 <__aeabi_dadd+0x37c>
 80016e6:	4663      	mov	r3, ip
 80016e8:	1a1d      	subs	r5, r3, r0
 80016ea:	45ac      	cmp	ip, r5
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	4653      	mov	r3, sl
 80016f0:	4252      	negs	r2, r2
 80016f2:	1b1c      	subs	r4, r3, r4
 80016f4:	000e      	movs	r6, r1
 80016f6:	4688      	mov	r8, r1
 80016f8:	1aa4      	subs	r4, r4, r2
 80016fa:	3701      	adds	r7, #1
 80016fc:	e555      	b.n	80011aa <__aeabi_dadd+0xa6>
 80016fe:	4663      	mov	r3, ip
 8001700:	08d9      	lsrs	r1, r3, #3
 8001702:	4653      	mov	r3, sl
 8001704:	075a      	lsls	r2, r3, #29
 8001706:	430a      	orrs	r2, r1
 8001708:	08dc      	lsrs	r4, r3, #3
 800170a:	e6c9      	b.n	80014a0 <__aeabi_dadd+0x39c>
 800170c:	4660      	mov	r0, ip
 800170e:	4654      	mov	r4, sl
 8001710:	e6d4      	b.n	80014bc <__aeabi_dadd+0x3b8>
 8001712:	08c0      	lsrs	r0, r0, #3
 8001714:	2a00      	cmp	r2, #0
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x616>
 8001718:	e6bf      	b.n	800149a <__aeabi_dadd+0x396>
 800171a:	0762      	lsls	r2, r4, #29
 800171c:	4310      	orrs	r0, r2
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	08e4      	lsrs	r4, r4, #3
 8001722:	0312      	lsls	r2, r2, #12
 8001724:	4214      	tst	r4, r2
 8001726:	d0cd      	beq.n	80016c4 <__aeabi_dadd+0x5c0>
 8001728:	08dd      	lsrs	r5, r3, #3
 800172a:	4215      	tst	r5, r2
 800172c:	d1ca      	bne.n	80016c4 <__aeabi_dadd+0x5c0>
 800172e:	4663      	mov	r3, ip
 8001730:	08d8      	lsrs	r0, r3, #3
 8001732:	4653      	mov	r3, sl
 8001734:	075b      	lsls	r3, r3, #29
 8001736:	000e      	movs	r6, r1
 8001738:	002c      	movs	r4, r5
 800173a:	4318      	orrs	r0, r3
 800173c:	e7c2      	b.n	80016c4 <__aeabi_dadd+0x5c0>
 800173e:	4663      	mov	r3, ip
 8001740:	08d9      	lsrs	r1, r3, #3
 8001742:	4653      	mov	r3, sl
 8001744:	075a      	lsls	r2, r3, #29
 8001746:	430a      	orrs	r2, r1
 8001748:	08dc      	lsrs	r4, r3, #3
 800174a:	e699      	b.n	8001480 <__aeabi_dadd+0x37c>
 800174c:	4663      	mov	r3, ip
 800174e:	08d8      	lsrs	r0, r3, #3
 8001750:	4653      	mov	r3, sl
 8001752:	075a      	lsls	r2, r3, #29
 8001754:	000e      	movs	r6, r1
 8001756:	4302      	orrs	r2, r0
 8001758:	08dc      	lsrs	r4, r3, #3
 800175a:	e6a1      	b.n	80014a0 <__aeabi_dadd+0x39c>
 800175c:	0011      	movs	r1, r2
 800175e:	0027      	movs	r7, r4
 8001760:	3920      	subs	r1, #32
 8001762:	40cf      	lsrs	r7, r1
 8001764:	2a20      	cmp	r2, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dadd+0x66c>
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	1a8a      	subs	r2, r1, r2
 800176c:	4094      	lsls	r4, r2
 800176e:	4320      	orrs	r0, r4
 8001770:	1e42      	subs	r2, r0, #1
 8001772:	4190      	sbcs	r0, r2
 8001774:	0005      	movs	r5, r0
 8001776:	433d      	orrs	r5, r7
 8001778:	e651      	b.n	800141e <__aeabi_dadd+0x31a>
 800177a:	000c      	movs	r4, r1
 800177c:	2500      	movs	r5, #0
 800177e:	2200      	movs	r2, #0
 8001780:	e558      	b.n	8001234 <__aeabi_dadd+0x130>
 8001782:	4460      	add	r0, ip
 8001784:	4560      	cmp	r0, ip
 8001786:	4192      	sbcs	r2, r2
 8001788:	4454      	add	r4, sl
 800178a:	4252      	negs	r2, r2
 800178c:	0005      	movs	r5, r0
 800178e:	18a4      	adds	r4, r4, r2
 8001790:	e73a      	b.n	8001608 <__aeabi_dadd+0x504>
 8001792:	4653      	mov	r3, sl
 8001794:	075a      	lsls	r2, r3, #29
 8001796:	4663      	mov	r3, ip
 8001798:	08d9      	lsrs	r1, r3, #3
 800179a:	4653      	mov	r3, sl
 800179c:	430a      	orrs	r2, r1
 800179e:	08dc      	lsrs	r4, r3, #3
 80017a0:	e67e      	b.n	80014a0 <__aeabi_dadd+0x39c>
 80017a2:	001a      	movs	r2, r3
 80017a4:	001c      	movs	r4, r3
 80017a6:	432a      	orrs	r2, r5
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x6a8>
 80017aa:	e6ab      	b.n	8001504 <__aeabi_dadd+0x400>
 80017ac:	e6c1      	b.n	8001532 <__aeabi_dadd+0x42e>
 80017ae:	2120      	movs	r1, #32
 80017b0:	2500      	movs	r5, #0
 80017b2:	1a09      	subs	r1, r1, r0
 80017b4:	e519      	b.n	80011ea <__aeabi_dadd+0xe6>
 80017b6:	2200      	movs	r2, #0
 80017b8:	2500      	movs	r5, #0
 80017ba:	4c01      	ldr	r4, [pc, #4]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80017bc:	e53a      	b.n	8001234 <__aeabi_dadd+0x130>
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	000007ff 	.word	0x000007ff
 80017c4:	ff7fffff 	.word	0xff7fffff
 80017c8:	000007fe 	.word	0x000007fe

080017cc <__aeabi_ddiv>:
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	46de      	mov	lr, fp
 80017d0:	4645      	mov	r5, r8
 80017d2:	4657      	mov	r7, sl
 80017d4:	464e      	mov	r6, r9
 80017d6:	b5e0      	push	{r5, r6, r7, lr}
 80017d8:	b087      	sub	sp, #28
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	030b      	lsls	r3, r1, #12
 80017e0:	0b1b      	lsrs	r3, r3, #12
 80017e2:	469b      	mov	fp, r3
 80017e4:	0fca      	lsrs	r2, r1, #31
 80017e6:	004b      	lsls	r3, r1, #1
 80017e8:	0004      	movs	r4, r0
 80017ea:	4680      	mov	r8, r0
 80017ec:	0d5b      	lsrs	r3, r3, #21
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	d100      	bne.n	80017f4 <__aeabi_ddiv+0x28>
 80017f2:	e16a      	b.n	8001aca <__aeabi_ddiv+0x2fe>
 80017f4:	4ad4      	ldr	r2, [pc, #848]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0x30>
 80017fa:	e18c      	b.n	8001b16 <__aeabi_ddiv+0x34a>
 80017fc:	4659      	mov	r1, fp
 80017fe:	0f42      	lsrs	r2, r0, #29
 8001800:	00c9      	lsls	r1, r1, #3
 8001802:	430a      	orrs	r2, r1
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0409      	lsls	r1, r1, #16
 8001808:	4311      	orrs	r1, r2
 800180a:	00c2      	lsls	r2, r0, #3
 800180c:	4690      	mov	r8, r2
 800180e:	4acf      	ldr	r2, [pc, #828]	@ (8001b4c <__aeabi_ddiv+0x380>)
 8001810:	4689      	mov	r9, r1
 8001812:	4692      	mov	sl, r2
 8001814:	449a      	add	sl, r3
 8001816:	2300      	movs	r3, #0
 8001818:	2400      	movs	r4, #0
 800181a:	9303      	str	r3, [sp, #12]
 800181c:	9e00      	ldr	r6, [sp, #0]
 800181e:	9f01      	ldr	r7, [sp, #4]
 8001820:	033b      	lsls	r3, r7, #12
 8001822:	0b1b      	lsrs	r3, r3, #12
 8001824:	469b      	mov	fp, r3
 8001826:	007b      	lsls	r3, r7, #1
 8001828:	0030      	movs	r0, r6
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0ffd      	lsrs	r5, r7, #31
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <__aeabi_ddiv+0x68>
 8001832:	e128      	b.n	8001a86 <__aeabi_ddiv+0x2ba>
 8001834:	4ac4      	ldr	r2, [pc, #784]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0x70>
 800183a:	e177      	b.n	8001b2c <__aeabi_ddiv+0x360>
 800183c:	4659      	mov	r1, fp
 800183e:	0f72      	lsrs	r2, r6, #29
 8001840:	00c9      	lsls	r1, r1, #3
 8001842:	430a      	orrs	r2, r1
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0409      	lsls	r1, r1, #16
 8001848:	4311      	orrs	r1, r2
 800184a:	468b      	mov	fp, r1
 800184c:	49bf      	ldr	r1, [pc, #764]	@ (8001b4c <__aeabi_ddiv+0x380>)
 800184e:	00f2      	lsls	r2, r6, #3
 8001850:	468c      	mov	ip, r1
 8001852:	4651      	mov	r1, sl
 8001854:	4463      	add	r3, ip
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	469a      	mov	sl, r3
 800185a:	2300      	movs	r3, #0
 800185c:	9e02      	ldr	r6, [sp, #8]
 800185e:	406e      	eors	r6, r5
 8001860:	2c0f      	cmp	r4, #15
 8001862:	d827      	bhi.n	80018b4 <__aeabi_ddiv+0xe8>
 8001864:	49ba      	ldr	r1, [pc, #744]	@ (8001b50 <__aeabi_ddiv+0x384>)
 8001866:	00a4      	lsls	r4, r4, #2
 8001868:	5909      	ldr	r1, [r1, r4]
 800186a:	468f      	mov	pc, r1
 800186c:	46cb      	mov	fp, r9
 800186e:	4642      	mov	r2, r8
 8001870:	9e02      	ldr	r6, [sp, #8]
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d016      	beq.n	80018a6 <__aeabi_ddiv+0xda>
 8001878:	2b03      	cmp	r3, #3
 800187a:	d100      	bne.n	800187e <__aeabi_ddiv+0xb2>
 800187c:	e2a6      	b.n	8001dcc <__aeabi_ddiv+0x600>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d000      	beq.n	8001884 <__aeabi_ddiv+0xb8>
 8001882:	e0df      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001884:	2200      	movs	r2, #0
 8001886:	2300      	movs	r3, #0
 8001888:	2400      	movs	r4, #0
 800188a:	4690      	mov	r8, r2
 800188c:	051b      	lsls	r3, r3, #20
 800188e:	4323      	orrs	r3, r4
 8001890:	07f6      	lsls	r6, r6, #31
 8001892:	4333      	orrs	r3, r6
 8001894:	4640      	mov	r0, r8
 8001896:	0019      	movs	r1, r3
 8001898:	b007      	add	sp, #28
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
 800189c:	46bb      	mov	fp, r7
 800189e:	46b2      	mov	sl, r6
 80018a0:	46a9      	mov	r9, r5
 80018a2:	46a0      	mov	r8, r4
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	2200      	movs	r2, #0
 80018a8:	2400      	movs	r4, #0
 80018aa:	4690      	mov	r8, r2
 80018ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 80018ae:	e7ed      	b.n	800188c <__aeabi_ddiv+0xc0>
 80018b0:	002e      	movs	r6, r5
 80018b2:	e7df      	b.n	8001874 <__aeabi_ddiv+0xa8>
 80018b4:	45cb      	cmp	fp, r9
 80018b6:	d200      	bcs.n	80018ba <__aeabi_ddiv+0xee>
 80018b8:	e1d4      	b.n	8001c64 <__aeabi_ddiv+0x498>
 80018ba:	d100      	bne.n	80018be <__aeabi_ddiv+0xf2>
 80018bc:	e1cf      	b.n	8001c5e <__aeabi_ddiv+0x492>
 80018be:	2301      	movs	r3, #1
 80018c0:	425b      	negs	r3, r3
 80018c2:	469c      	mov	ip, r3
 80018c4:	4644      	mov	r4, r8
 80018c6:	4648      	mov	r0, r9
 80018c8:	2700      	movs	r7, #0
 80018ca:	44e2      	add	sl, ip
 80018cc:	465b      	mov	r3, fp
 80018ce:	0e15      	lsrs	r5, r2, #24
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431d      	orrs	r5, r3
 80018d4:	0c19      	lsrs	r1, r3, #16
 80018d6:	042b      	lsls	r3, r5, #16
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	9500      	str	r5, [sp, #0]
 80018dc:	0c1d      	lsrs	r5, r3, #16
 80018de:	4691      	mov	r9, r2
 80018e0:	9102      	str	r1, [sp, #8]
 80018e2:	9503      	str	r5, [sp, #12]
 80018e4:	f7fe fcb0 	bl	8000248 <__aeabi_uidivmod>
 80018e8:	0002      	movs	r2, r0
 80018ea:	436a      	muls	r2, r5
 80018ec:	040b      	lsls	r3, r1, #16
 80018ee:	0c21      	lsrs	r1, r4, #16
 80018f0:	4680      	mov	r8, r0
 80018f2:	4319      	orrs	r1, r3
 80018f4:	428a      	cmp	r2, r1
 80018f6:	d909      	bls.n	800190c <__aeabi_ddiv+0x140>
 80018f8:	9d00      	ldr	r5, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	46ac      	mov	ip, r5
 80018fe:	425b      	negs	r3, r3
 8001900:	4461      	add	r1, ip
 8001902:	469c      	mov	ip, r3
 8001904:	44e0      	add	r8, ip
 8001906:	428d      	cmp	r5, r1
 8001908:	d800      	bhi.n	800190c <__aeabi_ddiv+0x140>
 800190a:	e1fb      	b.n	8001d04 <__aeabi_ddiv+0x538>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	9902      	ldr	r1, [sp, #8]
 8001910:	f7fe fc9a 	bl	8000248 <__aeabi_uidivmod>
 8001914:	9a03      	ldr	r2, [sp, #12]
 8001916:	0424      	lsls	r4, r4, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c24      	lsrs	r4, r4, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430c      	orrs	r4, r1
 8001922:	42a2      	cmp	r2, r4
 8001924:	d906      	bls.n	8001934 <__aeabi_ddiv+0x168>
 8001926:	9900      	ldr	r1, [sp, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	468c      	mov	ip, r1
 800192c:	4464      	add	r4, ip
 800192e:	42a1      	cmp	r1, r4
 8001930:	d800      	bhi.n	8001934 <__aeabi_ddiv+0x168>
 8001932:	e1e1      	b.n	8001cf8 <__aeabi_ddiv+0x52c>
 8001934:	1aa0      	subs	r0, r4, r2
 8001936:	4642      	mov	r2, r8
 8001938:	0412      	lsls	r2, r2, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	4693      	mov	fp, r2
 800193e:	464b      	mov	r3, r9
 8001940:	4659      	mov	r1, fp
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	001d      	movs	r5, r3
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	040b      	lsls	r3, r1, #16
 800194a:	4649      	mov	r1, r9
 800194c:	0409      	lsls	r1, r1, #16
 800194e:	0c09      	lsrs	r1, r1, #16
 8001950:	000c      	movs	r4, r1
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	435c      	muls	r4, r3
 8001956:	0c12      	lsrs	r2, r2, #16
 8001958:	436b      	muls	r3, r5
 800195a:	4688      	mov	r8, r1
 800195c:	4351      	muls	r1, r2
 800195e:	436a      	muls	r2, r5
 8001960:	0c25      	lsrs	r5, r4, #16
 8001962:	46ac      	mov	ip, r5
 8001964:	185b      	adds	r3, r3, r1
 8001966:	4463      	add	r3, ip
 8001968:	4299      	cmp	r1, r3
 800196a:	d903      	bls.n	8001974 <__aeabi_ddiv+0x1a8>
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	0249      	lsls	r1, r1, #9
 8001970:	468c      	mov	ip, r1
 8001972:	4462      	add	r2, ip
 8001974:	0c19      	lsrs	r1, r3, #16
 8001976:	0424      	lsls	r4, r4, #16
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c24      	lsrs	r4, r4, #16
 800197c:	188a      	adds	r2, r1, r2
 800197e:	191c      	adds	r4, r3, r4
 8001980:	4290      	cmp	r0, r2
 8001982:	d302      	bcc.n	800198a <__aeabi_ddiv+0x1be>
 8001984:	d116      	bne.n	80019b4 <__aeabi_ddiv+0x1e8>
 8001986:	42a7      	cmp	r7, r4
 8001988:	d214      	bcs.n	80019b4 <__aeabi_ddiv+0x1e8>
 800198a:	465b      	mov	r3, fp
 800198c:	9d00      	ldr	r5, [sp, #0]
 800198e:	3b01      	subs	r3, #1
 8001990:	444f      	add	r7, r9
 8001992:	9305      	str	r3, [sp, #20]
 8001994:	454f      	cmp	r7, r9
 8001996:	419b      	sbcs	r3, r3
 8001998:	46ac      	mov	ip, r5
 800199a:	425b      	negs	r3, r3
 800199c:	4463      	add	r3, ip
 800199e:	18c0      	adds	r0, r0, r3
 80019a0:	4285      	cmp	r5, r0
 80019a2:	d300      	bcc.n	80019a6 <__aeabi_ddiv+0x1da>
 80019a4:	e1a1      	b.n	8001cea <__aeabi_ddiv+0x51e>
 80019a6:	4282      	cmp	r2, r0
 80019a8:	d900      	bls.n	80019ac <__aeabi_ddiv+0x1e0>
 80019aa:	e1f6      	b.n	8001d9a <__aeabi_ddiv+0x5ce>
 80019ac:	d100      	bne.n	80019b0 <__aeabi_ddiv+0x1e4>
 80019ae:	e1f1      	b.n	8001d94 <__aeabi_ddiv+0x5c8>
 80019b0:	9b05      	ldr	r3, [sp, #20]
 80019b2:	469b      	mov	fp, r3
 80019b4:	1b3c      	subs	r4, r7, r4
 80019b6:	42a7      	cmp	r7, r4
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	9d00      	ldr	r5, [sp, #0]
 80019bc:	1a80      	subs	r0, r0, r2
 80019be:	427f      	negs	r7, r7
 80019c0:	1bc0      	subs	r0, r0, r7
 80019c2:	4285      	cmp	r5, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_ddiv+0x1fc>
 80019c6:	e1d0      	b.n	8001d6a <__aeabi_ddiv+0x59e>
 80019c8:	9902      	ldr	r1, [sp, #8]
 80019ca:	f7fe fc3d 	bl	8000248 <__aeabi_uidivmod>
 80019ce:	9a03      	ldr	r2, [sp, #12]
 80019d0:	040b      	lsls	r3, r1, #16
 80019d2:	4342      	muls	r2, r0
 80019d4:	0c21      	lsrs	r1, r4, #16
 80019d6:	0007      	movs	r7, r0
 80019d8:	4319      	orrs	r1, r3
 80019da:	428a      	cmp	r2, r1
 80019dc:	d900      	bls.n	80019e0 <__aeabi_ddiv+0x214>
 80019de:	e178      	b.n	8001cd2 <__aeabi_ddiv+0x506>
 80019e0:	1a88      	subs	r0, r1, r2
 80019e2:	9902      	ldr	r1, [sp, #8]
 80019e4:	f7fe fc30 	bl	8000248 <__aeabi_uidivmod>
 80019e8:	9a03      	ldr	r2, [sp, #12]
 80019ea:	0424      	lsls	r4, r4, #16
 80019ec:	4342      	muls	r2, r0
 80019ee:	0409      	lsls	r1, r1, #16
 80019f0:	0c24      	lsrs	r4, r4, #16
 80019f2:	0003      	movs	r3, r0
 80019f4:	430c      	orrs	r4, r1
 80019f6:	42a2      	cmp	r2, r4
 80019f8:	d900      	bls.n	80019fc <__aeabi_ddiv+0x230>
 80019fa:	e15d      	b.n	8001cb8 <__aeabi_ddiv+0x4ec>
 80019fc:	4641      	mov	r1, r8
 80019fe:	1aa4      	subs	r4, r4, r2
 8001a00:	043a      	lsls	r2, r7, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	9d04      	ldr	r5, [sp, #16]
 8001a06:	0413      	lsls	r3, r2, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	4359      	muls	r1, r3
 8001a0c:	4647      	mov	r7, r8
 8001a0e:	436b      	muls	r3, r5
 8001a10:	469c      	mov	ip, r3
 8001a12:	0c10      	lsrs	r0, r2, #16
 8001a14:	4347      	muls	r7, r0
 8001a16:	0c0b      	lsrs	r3, r1, #16
 8001a18:	44bc      	add	ip, r7
 8001a1a:	4463      	add	r3, ip
 8001a1c:	4368      	muls	r0, r5
 8001a1e:	429f      	cmp	r7, r3
 8001a20:	d903      	bls.n	8001a2a <__aeabi_ddiv+0x25e>
 8001a22:	2580      	movs	r5, #128	@ 0x80
 8001a24:	026d      	lsls	r5, r5, #9
 8001a26:	46ac      	mov	ip, r5
 8001a28:	4460      	add	r0, ip
 8001a2a:	0c1f      	lsrs	r7, r3, #16
 8001a2c:	0409      	lsls	r1, r1, #16
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	183f      	adds	r7, r7, r0
 8001a34:	185b      	adds	r3, r3, r1
 8001a36:	42bc      	cmp	r4, r7
 8001a38:	d200      	bcs.n	8001a3c <__aeabi_ddiv+0x270>
 8001a3a:	e102      	b.n	8001c42 <__aeabi_ddiv+0x476>
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x274>
 8001a3e:	e0fd      	b.n	8001c3c <__aeabi_ddiv+0x470>
 8001a40:	2301      	movs	r3, #1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <__aeabi_ddiv+0x388>)
 8001a46:	4453      	add	r3, sl
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	dc00      	bgt.n	8001a4e <__aeabi_ddiv+0x282>
 8001a4c:	e0ae      	b.n	8001bac <__aeabi_ddiv+0x3e0>
 8001a4e:	0751      	lsls	r1, r2, #29
 8001a50:	d000      	beq.n	8001a54 <__aeabi_ddiv+0x288>
 8001a52:	e198      	b.n	8001d86 <__aeabi_ddiv+0x5ba>
 8001a54:	4659      	mov	r1, fp
 8001a56:	01c9      	lsls	r1, r1, #7
 8001a58:	d506      	bpl.n	8001a68 <__aeabi_ddiv+0x29c>
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <__aeabi_ddiv+0x38c>)
 8001a5e:	4019      	ands	r1, r3
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	468b      	mov	fp, r1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4453      	add	r3, sl
 8001a68:	493c      	ldr	r1, [pc, #240]	@ (8001b5c <__aeabi_ddiv+0x390>)
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_ddiv+0x2a4>
 8001a6e:	e71a      	b.n	80018a6 <__aeabi_ddiv+0xda>
 8001a70:	4659      	mov	r1, fp
 8001a72:	08d2      	lsrs	r2, r2, #3
 8001a74:	0749      	lsls	r1, r1, #29
 8001a76:	4311      	orrs	r1, r2
 8001a78:	465a      	mov	r2, fp
 8001a7a:	055b      	lsls	r3, r3, #21
 8001a7c:	0254      	lsls	r4, r2, #9
 8001a7e:	4688      	mov	r8, r1
 8001a80:	0b24      	lsrs	r4, r4, #12
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	e702      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001a86:	465a      	mov	r2, fp
 8001a88:	9b00      	ldr	r3, [sp, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x2c4>
 8001a8e:	e07e      	b.n	8001b8e <__aeabi_ddiv+0x3c2>
 8001a90:	465b      	mov	r3, fp
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x2cc>
 8001a96:	e100      	b.n	8001c9a <__aeabi_ddiv+0x4ce>
 8001a98:	4658      	mov	r0, fp
 8001a9a:	f001 fabb 	bl	8003014 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	3a0b      	subs	r2, #11
 8001aa4:	271d      	movs	r7, #29
 8001aa6:	9e00      	ldr	r6, [sp, #0]
 8001aa8:	1aba      	subs	r2, r7, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	4658      	mov	r0, fp
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	3908      	subs	r1, #8
 8001ab2:	4088      	lsls	r0, r1
 8001ab4:	0032      	movs	r2, r6
 8001ab6:	4302      	orrs	r2, r0
 8001ab8:	4693      	mov	fp, r2
 8001aba:	9a00      	ldr	r2, [sp, #0]
 8001abc:	408a      	lsls	r2, r1
 8001abe:	4928      	ldr	r1, [pc, #160]	@ (8001b60 <__aeabi_ddiv+0x394>)
 8001ac0:	4453      	add	r3, sl
 8001ac2:	468a      	mov	sl, r1
 8001ac4:	449a      	add	sl, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e6c8      	b.n	800185c <__aeabi_ddiv+0x90>
 8001aca:	465b      	mov	r3, fp
 8001acc:	4303      	orrs	r3, r0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	d056      	beq.n	8001b80 <__aeabi_ddiv+0x3b4>
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_ddiv+0x30e>
 8001ad8:	e0cd      	b.n	8001c76 <__aeabi_ddiv+0x4aa>
 8001ada:	4658      	mov	r0, fp
 8001adc:	f001 fa9a 	bl	8003014 <__clzsi2>
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	4484      	add	ip, r0
 8001aea:	4666      	mov	r6, ip
 8001aec:	231d      	movs	r3, #29
 8001aee:	1b9b      	subs	r3, r3, r6
 8001af0:	0026      	movs	r6, r4
 8001af2:	0011      	movs	r1, r2
 8001af4:	4658      	mov	r0, fp
 8001af6:	40de      	lsrs	r6, r3
 8001af8:	3908      	subs	r1, #8
 8001afa:	4088      	lsls	r0, r1
 8001afc:	0033      	movs	r3, r6
 8001afe:	4303      	orrs	r3, r0
 8001b00:	4699      	mov	r9, r3
 8001b02:	0023      	movs	r3, r4
 8001b04:	408b      	lsls	r3, r1
 8001b06:	4698      	mov	r8, r3
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <__aeabi_ddiv+0x398>)
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	469a      	mov	sl, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	9303      	str	r3, [sp, #12]
 8001b14:	e682      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b16:	465a      	mov	r2, fp
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	d12a      	bne.n	8001b74 <__aeabi_ddiv+0x3a8>
 8001b1e:	2200      	movs	r2, #0
 8001b20:	469a      	mov	sl, r3
 8001b22:	2302      	movs	r3, #2
 8001b24:	4690      	mov	r8, r2
 8001b26:	2408      	movs	r4, #8
 8001b28:	9303      	str	r3, [sp, #12]
 8001b2a:	e677      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b2c:	465a      	mov	r2, fp
 8001b2e:	9b00      	ldr	r3, [sp, #0]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <__aeabi_ddiv+0x39c>)
 8001b34:	469c      	mov	ip, r3
 8001b36:	44e2      	add	sl, ip
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d117      	bne.n	8001b6c <__aeabi_ddiv+0x3a0>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	431c      	orrs	r4, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	469b      	mov	fp, r3
 8001b44:	3302      	adds	r3, #2
 8001b46:	e689      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	fffffc01 	.word	0xfffffc01
 8001b50:	0800a590 	.word	0x0800a590
 8001b54:	000003ff 	.word	0x000003ff
 8001b58:	feffffff 	.word	0xfeffffff
 8001b5c:	000007fe 	.word	0x000007fe
 8001b60:	000003f3 	.word	0x000003f3
 8001b64:	fffffc0d 	.word	0xfffffc0d
 8001b68:	fffff801 	.word	0xfffff801
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	0032      	movs	r2, r6
 8001b70:	431c      	orrs	r4, r3
 8001b72:	e673      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b74:	469a      	mov	sl, r3
 8001b76:	2303      	movs	r3, #3
 8001b78:	46d9      	mov	r9, fp
 8001b7a:	240c      	movs	r4, #12
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	e64d      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b80:	2300      	movs	r3, #0
 8001b82:	4698      	mov	r8, r3
 8001b84:	469a      	mov	sl, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	2404      	movs	r4, #4
 8001b8a:	9303      	str	r3, [sp, #12]
 8001b8c:	e646      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	431c      	orrs	r4, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	469b      	mov	fp, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	e660      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2480      	movs	r4, #128	@ 0x80
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4b92      	ldr	r3, [pc, #584]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	e671      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4252      	negs	r2, r2
 8001bac:	2101      	movs	r1, #1
 8001bae:	1ac9      	subs	r1, r1, r3
 8001bb0:	2938      	cmp	r1, #56	@ 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_ddiv+0x3ea>
 8001bb4:	e666      	b.n	8001884 <__aeabi_ddiv+0xb8>
 8001bb6:	291f      	cmp	r1, #31
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_ddiv+0x3f0>
 8001bba:	e0ab      	b.n	8001d14 <__aeabi_ddiv+0x548>
 8001bbc:	201f      	movs	r0, #31
 8001bbe:	4240      	negs	r0, r0
 8001bc0:	1ac3      	subs	r3, r0, r3
 8001bc2:	4658      	mov	r0, fp
 8001bc4:	40d8      	lsrs	r0, r3
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	2920      	cmp	r1, #32
 8001bca:	d004      	beq.n	8001bd6 <__aeabi_ddiv+0x40a>
 8001bcc:	4658      	mov	r0, fp
 8001bce:	4988      	ldr	r1, [pc, #544]	@ (8001df0 <__aeabi_ddiv+0x624>)
 8001bd0:	4451      	add	r1, sl
 8001bd2:	4088      	lsls	r0, r1
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	1e51      	subs	r1, r2, #1
 8001bd8:	418a      	sbcs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	2307      	movs	r3, #7
 8001bde:	0019      	movs	r1, r3
 8001be0:	2400      	movs	r4, #0
 8001be2:	4011      	ands	r1, r2
 8001be4:	4213      	tst	r3, r2
 8001be6:	d00c      	beq.n	8001c02 <__aeabi_ddiv+0x436>
 8001be8:	230f      	movs	r3, #15
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_ddiv+0x426>
 8001bf0:	e0f9      	b.n	8001de6 <__aeabi_ddiv+0x61a>
 8001bf2:	1d11      	adds	r1, r2, #4
 8001bf4:	4291      	cmp	r1, r2
 8001bf6:	419b      	sbcs	r3, r3
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	0759      	lsls	r1, r3, #29
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	0b1c      	lsrs	r4, r3, #12
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	430a      	orrs	r2, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e63f      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c0c:	2480      	movs	r4, #128	@ 0x80
 8001c0e:	464b      	mov	r3, r9
 8001c10:	0324      	lsls	r4, r4, #12
 8001c12:	4223      	tst	r3, r4
 8001c14:	d009      	beq.n	8001c2a <__aeabi_ddiv+0x45e>
 8001c16:	465b      	mov	r3, fp
 8001c18:	4223      	tst	r3, r4
 8001c1a:	d106      	bne.n	8001c2a <__aeabi_ddiv+0x45e>
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	0324      	lsls	r4, r4, #12
 8001c20:	002e      	movs	r6, r5
 8001c22:	4690      	mov	r8, r2
 8001c24:	4b71      	ldr	r3, [pc, #452]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001c26:	0b24      	lsrs	r4, r4, #12
 8001c28:	e630      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c2a:	2480      	movs	r4, #128	@ 0x80
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	0324      	lsls	r4, r4, #12
 8001c30:	431c      	orrs	r4, r3
 8001c32:	0324      	lsls	r4, r4, #12
 8001c34:	9e02      	ldr	r6, [sp, #8]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001c38:	0b24      	lsrs	r4, r4, #12
 8001c3a:	e627      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x476>
 8001c40:	e700      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001c42:	9800      	ldr	r0, [sp, #0]
 8001c44:	1e51      	subs	r1, r2, #1
 8001c46:	4684      	mov	ip, r0
 8001c48:	4464      	add	r4, ip
 8001c4a:	4284      	cmp	r4, r0
 8001c4c:	d200      	bcs.n	8001c50 <__aeabi_ddiv+0x484>
 8001c4e:	e084      	b.n	8001d5a <__aeabi_ddiv+0x58e>
 8001c50:	42bc      	cmp	r4, r7
 8001c52:	d200      	bcs.n	8001c56 <__aeabi_ddiv+0x48a>
 8001c54:	e0ae      	b.n	8001db4 <__aeabi_ddiv+0x5e8>
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x48e>
 8001c58:	e0c1      	b.n	8001dde <__aeabi_ddiv+0x612>
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	e6f0      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001c5e:	4542      	cmp	r2, r8
 8001c60:	d900      	bls.n	8001c64 <__aeabi_ddiv+0x498>
 8001c62:	e62c      	b.n	80018be <__aeabi_ddiv+0xf2>
 8001c64:	464b      	mov	r3, r9
 8001c66:	07dc      	lsls	r4, r3, #31
 8001c68:	0858      	lsrs	r0, r3, #1
 8001c6a:	4643      	mov	r3, r8
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	431c      	orrs	r4, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	07df      	lsls	r7, r3, #31
 8001c74:	e62a      	b.n	80018cc <__aeabi_ddiv+0x100>
 8001c76:	f001 f9cd 	bl	8003014 <__clzsi2>
 8001c7a:	2315      	movs	r3, #21
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	4484      	add	ip, r0
 8001c80:	0002      	movs	r2, r0
 8001c82:	4663      	mov	r3, ip
 8001c84:	3220      	adds	r2, #32
 8001c86:	2b1c      	cmp	r3, #28
 8001c88:	dc00      	bgt.n	8001c8c <__aeabi_ddiv+0x4c0>
 8001c8a:	e72e      	b.n	8001aea <__aeabi_ddiv+0x31e>
 8001c8c:	0023      	movs	r3, r4
 8001c8e:	3808      	subs	r0, #8
 8001c90:	4083      	lsls	r3, r0
 8001c92:	4699      	mov	r9, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	4698      	mov	r8, r3
 8001c98:	e736      	b.n	8001b08 <__aeabi_ddiv+0x33c>
 8001c9a:	f001 f9bb 	bl	8003014 <__clzsi2>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	3215      	adds	r2, #21
 8001ca4:	3320      	adds	r3, #32
 8001ca6:	2a1c      	cmp	r2, #28
 8001ca8:	dc00      	bgt.n	8001cac <__aeabi_ddiv+0x4e0>
 8001caa:	e6fb      	b.n	8001aa4 <__aeabi_ddiv+0x2d8>
 8001cac:	9900      	ldr	r1, [sp, #0]
 8001cae:	3808      	subs	r0, #8
 8001cb0:	4081      	lsls	r1, r0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	468b      	mov	fp, r1
 8001cb6:	e702      	b.n	8001abe <__aeabi_ddiv+0x2f2>
 8001cb8:	9900      	ldr	r1, [sp, #0]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	468c      	mov	ip, r1
 8001cbe:	4464      	add	r4, ip
 8001cc0:	42a1      	cmp	r1, r4
 8001cc2:	d900      	bls.n	8001cc6 <__aeabi_ddiv+0x4fa>
 8001cc4:	e69a      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001cc6:	42a2      	cmp	r2, r4
 8001cc8:	d800      	bhi.n	8001ccc <__aeabi_ddiv+0x500>
 8001cca:	e697      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001ccc:	1e83      	subs	r3, r0, #2
 8001cce:	4464      	add	r4, ip
 8001cd0:	e694      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001cd2:	46ac      	mov	ip, r5
 8001cd4:	4461      	add	r1, ip
 8001cd6:	3f01      	subs	r7, #1
 8001cd8:	428d      	cmp	r5, r1
 8001cda:	d900      	bls.n	8001cde <__aeabi_ddiv+0x512>
 8001cdc:	e680      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d800      	bhi.n	8001ce4 <__aeabi_ddiv+0x518>
 8001ce2:	e67d      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001ce4:	1e87      	subs	r7, r0, #2
 8001ce6:	4461      	add	r1, ip
 8001ce8:	e67a      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001cea:	4285      	cmp	r5, r0
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_ddiv+0x524>
 8001cee:	e65f      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001cf0:	45b9      	cmp	r9, r7
 8001cf2:	d900      	bls.n	8001cf6 <__aeabi_ddiv+0x52a>
 8001cf4:	e65c      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001cf6:	e656      	b.n	80019a6 <__aeabi_ddiv+0x1da>
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d800      	bhi.n	8001cfe <__aeabi_ddiv+0x532>
 8001cfc:	e61a      	b.n	8001934 <__aeabi_ddiv+0x168>
 8001cfe:	1e83      	subs	r3, r0, #2
 8001d00:	4464      	add	r4, ip
 8001d02:	e617      	b.n	8001934 <__aeabi_ddiv+0x168>
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d800      	bhi.n	8001d0a <__aeabi_ddiv+0x53e>
 8001d08:	e600      	b.n	800190c <__aeabi_ddiv+0x140>
 8001d0a:	46ac      	mov	ip, r5
 8001d0c:	1e83      	subs	r3, r0, #2
 8001d0e:	4698      	mov	r8, r3
 8001d10:	4461      	add	r1, ip
 8001d12:	e5fb      	b.n	800190c <__aeabi_ddiv+0x140>
 8001d14:	4837      	ldr	r0, [pc, #220]	@ (8001df4 <__aeabi_ddiv+0x628>)
 8001d16:	0014      	movs	r4, r2
 8001d18:	4450      	add	r0, sl
 8001d1a:	4082      	lsls	r2, r0
 8001d1c:	465b      	mov	r3, fp
 8001d1e:	0017      	movs	r7, r2
 8001d20:	4083      	lsls	r3, r0
 8001d22:	40cc      	lsrs	r4, r1
 8001d24:	1e7a      	subs	r2, r7, #1
 8001d26:	4197      	sbcs	r7, r2
 8001d28:	4323      	orrs	r3, r4
 8001d2a:	433b      	orrs	r3, r7
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	465b      	mov	r3, fp
 8001d30:	40cb      	lsrs	r3, r1
 8001d32:	0751      	lsls	r1, r2, #29
 8001d34:	d009      	beq.n	8001d4a <__aeabi_ddiv+0x57e>
 8001d36:	210f      	movs	r1, #15
 8001d38:	4011      	ands	r1, r2
 8001d3a:	2904      	cmp	r1, #4
 8001d3c:	d005      	beq.n	8001d4a <__aeabi_ddiv+0x57e>
 8001d3e:	1d11      	adds	r1, r2, #4
 8001d40:	4291      	cmp	r1, r2
 8001d42:	4192      	sbcs	r2, r2
 8001d44:	4252      	negs	r2, r2
 8001d46:	189b      	adds	r3, r3, r2
 8001d48:	000a      	movs	r2, r1
 8001d4a:	0219      	lsls	r1, r3, #8
 8001d4c:	d400      	bmi.n	8001d50 <__aeabi_ddiv+0x584>
 8001d4e:	e755      	b.n	8001bfc <__aeabi_ddiv+0x430>
 8001d50:	2200      	movs	r2, #0
 8001d52:	2301      	movs	r3, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	4690      	mov	r8, r2
 8001d58:	e598      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	42bc      	cmp	r4, r7
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_ddiv+0x596>
 8001d60:	e66e      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001d62:	454b      	cmp	r3, r9
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0x59c>
 8001d66:	e66b      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001d68:	e66c      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <__aeabi_ddiv+0x62c>)
 8001d6c:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <__aeabi_ddiv+0x630>)
 8001d6e:	4453      	add	r3, sl
 8001d70:	4592      	cmp	sl, r2
 8001d72:	da00      	bge.n	8001d76 <__aeabi_ddiv+0x5aa>
 8001d74:	e718      	b.n	8001ba8 <__aeabi_ddiv+0x3dc>
 8001d76:	2101      	movs	r1, #1
 8001d78:	4249      	negs	r1, r1
 8001d7a:	1d0a      	adds	r2, r1, #4
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	4189      	sbcs	r1, r1
 8001d80:	4249      	negs	r1, r1
 8001d82:	448b      	add	fp, r1
 8001d84:	e666      	b.n	8001a54 <__aeabi_ddiv+0x288>
 8001d86:	210f      	movs	r1, #15
 8001d88:	4011      	ands	r1, r2
 8001d8a:	2904      	cmp	r1, #4
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x5c4>
 8001d8e:	e661      	b.n	8001a54 <__aeabi_ddiv+0x288>
 8001d90:	0011      	movs	r1, r2
 8001d92:	e7f2      	b.n	8001d7a <__aeabi_ddiv+0x5ae>
 8001d94:	42bc      	cmp	r4, r7
 8001d96:	d800      	bhi.n	8001d9a <__aeabi_ddiv+0x5ce>
 8001d98:	e60a      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	469c      	mov	ip, r3
 8001da0:	9900      	ldr	r1, [sp, #0]
 8001da2:	444f      	add	r7, r9
 8001da4:	454f      	cmp	r7, r9
 8001da6:	419b      	sbcs	r3, r3
 8001da8:	44e3      	add	fp, ip
 8001daa:	468c      	mov	ip, r1
 8001dac:	425b      	negs	r3, r3
 8001dae:	4463      	add	r3, ip
 8001db0:	18c0      	adds	r0, r0, r3
 8001db2:	e5ff      	b.n	80019b4 <__aeabi_ddiv+0x1e8>
 8001db4:	4649      	mov	r1, r9
 8001db6:	9d00      	ldr	r5, [sp, #0]
 8001db8:	0048      	lsls	r0, r1, #1
 8001dba:	4548      	cmp	r0, r9
 8001dbc:	4189      	sbcs	r1, r1
 8001dbe:	46ac      	mov	ip, r5
 8001dc0:	4249      	negs	r1, r1
 8001dc2:	4461      	add	r1, ip
 8001dc4:	4681      	mov	r9, r0
 8001dc6:	3a02      	subs	r2, #2
 8001dc8:	1864      	adds	r4, r4, r1
 8001dca:	e7c7      	b.n	8001d5c <__aeabi_ddiv+0x590>
 8001dcc:	2480      	movs	r4, #128	@ 0x80
 8001dce:	465b      	mov	r3, fp
 8001dd0:	0324      	lsls	r4, r4, #12
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	0324      	lsls	r4, r4, #12
 8001dd6:	4690      	mov	r8, r2
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001dda:	0b24      	lsrs	r4, r4, #12
 8001ddc:	e556      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001dde:	4599      	cmp	r9, r3
 8001de0:	d3e8      	bcc.n	8001db4 <__aeabi_ddiv+0x5e8>
 8001de2:	000a      	movs	r2, r1
 8001de4:	e7bd      	b.n	8001d62 <__aeabi_ddiv+0x596>
 8001de6:	2300      	movs	r3, #0
 8001de8:	e708      	b.n	8001bfc <__aeabi_ddiv+0x430>
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	000007ff 	.word	0x000007ff
 8001df0:	0000043e 	.word	0x0000043e
 8001df4:	0000041e 	.word	0x0000041e
 8001df8:	000003ff 	.word	0x000003ff
 8001dfc:	fffffc02 	.word	0xfffffc02

08001e00 <__eqdf2>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4657      	mov	r7, sl
 8001e04:	46de      	mov	lr, fp
 8001e06:	464e      	mov	r6, r9
 8001e08:	4645      	mov	r5, r8
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
 8001e0c:	000d      	movs	r5, r1
 8001e0e:	0004      	movs	r4, r0
 8001e10:	0fe8      	lsrs	r0, r5, #31
 8001e12:	4683      	mov	fp, r0
 8001e14:	0309      	lsls	r1, r1, #12
 8001e16:	0fd8      	lsrs	r0, r3, #31
 8001e18:	0b09      	lsrs	r1, r1, #12
 8001e1a:	4682      	mov	sl, r0
 8001e1c:	4819      	ldr	r0, [pc, #100]	@ (8001e84 <__eqdf2+0x84>)
 8001e1e:	468c      	mov	ip, r1
 8001e20:	031f      	lsls	r7, r3, #12
 8001e22:	0069      	lsls	r1, r5, #1
 8001e24:	005e      	lsls	r6, r3, #1
 8001e26:	0d49      	lsrs	r1, r1, #21
 8001e28:	0b3f      	lsrs	r7, r7, #12
 8001e2a:	0d76      	lsrs	r6, r6, #21
 8001e2c:	4281      	cmp	r1, r0
 8001e2e:	d018      	beq.n	8001e62 <__eqdf2+0x62>
 8001e30:	4286      	cmp	r6, r0
 8001e32:	d00f      	beq.n	8001e54 <__eqdf2+0x54>
 8001e34:	2001      	movs	r0, #1
 8001e36:	42b1      	cmp	r1, r6
 8001e38:	d10d      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3a:	45bc      	cmp	ip, r7
 8001e3c:	d10b      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	d109      	bne.n	8001e56 <__eqdf2+0x56>
 8001e42:	45d3      	cmp	fp, sl
 8001e44:	d01c      	beq.n	8001e80 <__eqdf2+0x80>
 8001e46:	2900      	cmp	r1, #0
 8001e48:	d105      	bne.n	8001e56 <__eqdf2+0x56>
 8001e4a:	4660      	mov	r0, ip
 8001e4c:	4320      	orrs	r0, r4
 8001e4e:	1e43      	subs	r3, r0, #1
 8001e50:	4198      	sbcs	r0, r3
 8001e52:	e000      	b.n	8001e56 <__eqdf2+0x56>
 8001e54:	2001      	movs	r0, #1
 8001e56:	bcf0      	pop	{r4, r5, r6, r7}
 8001e58:	46bb      	mov	fp, r7
 8001e5a:	46b2      	mov	sl, r6
 8001e5c:	46a9      	mov	r9, r5
 8001e5e:	46a0      	mov	r8, r4
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	2001      	movs	r0, #1
 8001e64:	428e      	cmp	r6, r1
 8001e66:	d1f6      	bne.n	8001e56 <__eqdf2+0x56>
 8001e68:	4661      	mov	r1, ip
 8001e6a:	4339      	orrs	r1, r7
 8001e6c:	000f      	movs	r7, r1
 8001e6e:	4317      	orrs	r7, r2
 8001e70:	4327      	orrs	r7, r4
 8001e72:	d1f0      	bne.n	8001e56 <__eqdf2+0x56>
 8001e74:	465b      	mov	r3, fp
 8001e76:	4652      	mov	r2, sl
 8001e78:	1a98      	subs	r0, r3, r2
 8001e7a:	1e43      	subs	r3, r0, #1
 8001e7c:	4198      	sbcs	r0, r3
 8001e7e:	e7ea      	b.n	8001e56 <__eqdf2+0x56>
 8001e80:	2000      	movs	r0, #0
 8001e82:	e7e8      	b.n	8001e56 <__eqdf2+0x56>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__gedf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	4657      	mov	r7, sl
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	4645      	mov	r5, r8
 8001e90:	46de      	mov	lr, fp
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	000d      	movs	r5, r1
 8001e96:	030f      	lsls	r7, r1, #12
 8001e98:	0b39      	lsrs	r1, r7, #12
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	0004      	movs	r4, r0
 8001e9e:	4680      	mov	r8, r0
 8001ea0:	9101      	str	r1, [sp, #4]
 8001ea2:	0058      	lsls	r0, r3, #1
 8001ea4:	0fe9      	lsrs	r1, r5, #31
 8001ea6:	4f31      	ldr	r7, [pc, #196]	@ (8001f6c <__gedf2+0xe4>)
 8001ea8:	0d40      	lsrs	r0, r0, #21
 8001eaa:	468c      	mov	ip, r1
 8001eac:	006e      	lsls	r6, r5, #1
 8001eae:	0319      	lsls	r1, r3, #12
 8001eb0:	4682      	mov	sl, r0
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d76      	lsrs	r6, r6, #21
 8001eb6:	0b09      	lsrs	r1, r1, #12
 8001eb8:	0fd8      	lsrs	r0, r3, #31
 8001eba:	42be      	cmp	r6, r7
 8001ebc:	d01f      	beq.n	8001efe <__gedf2+0x76>
 8001ebe:	45ba      	cmp	sl, r7
 8001ec0:	d00f      	beq.n	8001ee2 <__gedf2+0x5a>
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d12f      	bne.n	8001f26 <__gedf2+0x9e>
 8001ec6:	4655      	mov	r5, sl
 8001ec8:	9e01      	ldr	r6, [sp, #4]
 8001eca:	4334      	orrs	r4, r6
 8001ecc:	2d00      	cmp	r5, #0
 8001ece:	d127      	bne.n	8001f20 <__gedf2+0x98>
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	d03a      	beq.n	8001f4a <__gedf2+0xc2>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d145      	bne.n	8001f64 <__gedf2+0xdc>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d11a      	bne.n	8001f12 <__gedf2+0x8a>
 8001edc:	2001      	movs	r0, #1
 8001ede:	4240      	negs	r0, r0
 8001ee0:	e017      	b.n	8001f12 <__gedf2+0x8a>
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	d13b      	bne.n	8001f5e <__gedf2+0xd6>
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d102      	bne.n	8001ef0 <__gedf2+0x68>
 8001eea:	9f01      	ldr	r7, [sp, #4]
 8001eec:	4327      	orrs	r7, r4
 8001eee:	d0f3      	beq.n	8001ed8 <__gedf2+0x50>
 8001ef0:	4584      	cmp	ip, r0
 8001ef2:	d109      	bne.n	8001f08 <__gedf2+0x80>
 8001ef4:	4663      	mov	r3, ip
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <__gedf2+0x54>
 8001efa:	4660      	mov	r0, ip
 8001efc:	e009      	b.n	8001f12 <__gedf2+0x8a>
 8001efe:	9f01      	ldr	r7, [sp, #4]
 8001f00:	4327      	orrs	r7, r4
 8001f02:	d12c      	bne.n	8001f5e <__gedf2+0xd6>
 8001f04:	45b2      	cmp	sl, r6
 8001f06:	d024      	beq.n	8001f52 <__gedf2+0xca>
 8001f08:	4663      	mov	r3, ip
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	4018      	ands	r0, r3
 8001f10:	3801      	subs	r0, #1
 8001f12:	b003      	add	sp, #12
 8001f14:	bcf0      	pop	{r4, r5, r6, r7}
 8001f16:	46bb      	mov	fp, r7
 8001f18:	46b2      	mov	sl, r6
 8001f1a:	46a9      	mov	r9, r5
 8001f1c:	46a0      	mov	r8, r4
 8001f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d0d9      	beq.n	8001ed8 <__gedf2+0x50>
 8001f24:	e7e4      	b.n	8001ef0 <__gedf2+0x68>
 8001f26:	4654      	mov	r4, sl
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d0ed      	beq.n	8001f08 <__gedf2+0x80>
 8001f2c:	4584      	cmp	ip, r0
 8001f2e:	d1eb      	bne.n	8001f08 <__gedf2+0x80>
 8001f30:	4556      	cmp	r6, sl
 8001f32:	dce9      	bgt.n	8001f08 <__gedf2+0x80>
 8001f34:	dbde      	blt.n	8001ef4 <__gedf2+0x6c>
 8001f36:	9b01      	ldr	r3, [sp, #4]
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d8e5      	bhi.n	8001f08 <__gedf2+0x80>
 8001f3c:	d1da      	bne.n	8001ef4 <__gedf2+0x6c>
 8001f3e:	45c8      	cmp	r8, r9
 8001f40:	d8e2      	bhi.n	8001f08 <__gedf2+0x80>
 8001f42:	2000      	movs	r0, #0
 8001f44:	45c8      	cmp	r8, r9
 8001f46:	d2e4      	bcs.n	8001f12 <__gedf2+0x8a>
 8001f48:	e7d4      	b.n	8001ef4 <__gedf2+0x6c>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d0e0      	beq.n	8001f12 <__gedf2+0x8a>
 8001f50:	e7da      	b.n	8001f08 <__gedf2+0x80>
 8001f52:	4311      	orrs	r1, r2
 8001f54:	d103      	bne.n	8001f5e <__gedf2+0xd6>
 8001f56:	4584      	cmp	ip, r0
 8001f58:	d1d6      	bne.n	8001f08 <__gedf2+0x80>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e7d9      	b.n	8001f12 <__gedf2+0x8a>
 8001f5e:	2002      	movs	r0, #2
 8001f60:	4240      	negs	r0, r0
 8001f62:	e7d6      	b.n	8001f12 <__gedf2+0x8a>
 8001f64:	4584      	cmp	ip, r0
 8001f66:	d0e6      	beq.n	8001f36 <__gedf2+0xae>
 8001f68:	e7ce      	b.n	8001f08 <__gedf2+0x80>
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	000007ff 	.word	0x000007ff

08001f70 <__ledf2>:
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	4657      	mov	r7, sl
 8001f74:	464e      	mov	r6, r9
 8001f76:	4645      	mov	r5, r8
 8001f78:	46de      	mov	lr, fp
 8001f7a:	b5e0      	push	{r5, r6, r7, lr}
 8001f7c:	000d      	movs	r5, r1
 8001f7e:	030f      	lsls	r7, r1, #12
 8001f80:	0004      	movs	r4, r0
 8001f82:	4680      	mov	r8, r0
 8001f84:	0fe8      	lsrs	r0, r5, #31
 8001f86:	0b39      	lsrs	r1, r7, #12
 8001f88:	4684      	mov	ip, r0
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	0058      	lsls	r0, r3, #1
 8001f8e:	4f30      	ldr	r7, [pc, #192]	@ (8002050 <__ledf2+0xe0>)
 8001f90:	0d40      	lsrs	r0, r0, #21
 8001f92:	9101      	str	r1, [sp, #4]
 8001f94:	031e      	lsls	r6, r3, #12
 8001f96:	0069      	lsls	r1, r5, #1
 8001f98:	4682      	mov	sl, r0
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	0d49      	lsrs	r1, r1, #21
 8001f9e:	0b36      	lsrs	r6, r6, #12
 8001fa0:	0fd8      	lsrs	r0, r3, #31
 8001fa2:	42b9      	cmp	r1, r7
 8001fa4:	d020      	beq.n	8001fe8 <__ledf2+0x78>
 8001fa6:	45ba      	cmp	sl, r7
 8001fa8:	d00f      	beq.n	8001fca <__ledf2+0x5a>
 8001faa:	2900      	cmp	r1, #0
 8001fac:	d12b      	bne.n	8002006 <__ledf2+0x96>
 8001fae:	9901      	ldr	r1, [sp, #4]
 8001fb0:	430c      	orrs	r4, r1
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d137      	bne.n	8002028 <__ledf2+0xb8>
 8001fb8:	4332      	orrs	r2, r6
 8001fba:	d038      	beq.n	800202e <__ledf2+0xbe>
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d144      	bne.n	800204a <__ledf2+0xda>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d119      	bne.n	8001ff8 <__ledf2+0x88>
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	e016      	b.n	8001ff8 <__ledf2+0x88>
 8001fca:	4316      	orrs	r6, r2
 8001fcc:	d113      	bne.n	8001ff6 <__ledf2+0x86>
 8001fce:	2900      	cmp	r1, #0
 8001fd0:	d102      	bne.n	8001fd8 <__ledf2+0x68>
 8001fd2:	9f01      	ldr	r7, [sp, #4]
 8001fd4:	4327      	orrs	r7, r4
 8001fd6:	d0f3      	beq.n	8001fc0 <__ledf2+0x50>
 8001fd8:	4584      	cmp	ip, r0
 8001fda:	d020      	beq.n	800201e <__ledf2+0xae>
 8001fdc:	4663      	mov	r3, ip
 8001fde:	2002      	movs	r0, #2
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4018      	ands	r0, r3
 8001fe4:	3801      	subs	r0, #1
 8001fe6:	e007      	b.n	8001ff8 <__ledf2+0x88>
 8001fe8:	9f01      	ldr	r7, [sp, #4]
 8001fea:	4327      	orrs	r7, r4
 8001fec:	d103      	bne.n	8001ff6 <__ledf2+0x86>
 8001fee:	458a      	cmp	sl, r1
 8001ff0:	d1f4      	bne.n	8001fdc <__ledf2+0x6c>
 8001ff2:	4316      	orrs	r6, r2
 8001ff4:	d01f      	beq.n	8002036 <__ledf2+0xc6>
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	4654      	mov	r4, sl
 8002008:	2c00      	cmp	r4, #0
 800200a:	d0e7      	beq.n	8001fdc <__ledf2+0x6c>
 800200c:	4584      	cmp	ip, r0
 800200e:	d1e5      	bne.n	8001fdc <__ledf2+0x6c>
 8002010:	4551      	cmp	r1, sl
 8002012:	dce3      	bgt.n	8001fdc <__ledf2+0x6c>
 8002014:	db03      	blt.n	800201e <__ledf2+0xae>
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	42b3      	cmp	r3, r6
 800201a:	d8df      	bhi.n	8001fdc <__ledf2+0x6c>
 800201c:	d00f      	beq.n	800203e <__ledf2+0xce>
 800201e:	4663      	mov	r3, ip
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0cf      	beq.n	8001fc4 <__ledf2+0x54>
 8002024:	4660      	mov	r0, ip
 8002026:	e7e7      	b.n	8001ff8 <__ledf2+0x88>
 8002028:	2c00      	cmp	r4, #0
 800202a:	d0c9      	beq.n	8001fc0 <__ledf2+0x50>
 800202c:	e7d4      	b.n	8001fd8 <__ledf2+0x68>
 800202e:	2000      	movs	r0, #0
 8002030:	2c00      	cmp	r4, #0
 8002032:	d0e1      	beq.n	8001ff8 <__ledf2+0x88>
 8002034:	e7d2      	b.n	8001fdc <__ledf2+0x6c>
 8002036:	4584      	cmp	ip, r0
 8002038:	d1d0      	bne.n	8001fdc <__ledf2+0x6c>
 800203a:	2000      	movs	r0, #0
 800203c:	e7dc      	b.n	8001ff8 <__ledf2+0x88>
 800203e:	45c8      	cmp	r8, r9
 8002040:	d8cc      	bhi.n	8001fdc <__ledf2+0x6c>
 8002042:	2000      	movs	r0, #0
 8002044:	45c8      	cmp	r8, r9
 8002046:	d2d7      	bcs.n	8001ff8 <__ledf2+0x88>
 8002048:	e7e9      	b.n	800201e <__ledf2+0xae>
 800204a:	4584      	cmp	ip, r0
 800204c:	d0e3      	beq.n	8002016 <__ledf2+0xa6>
 800204e:	e7c5      	b.n	8001fdc <__ledf2+0x6c>
 8002050:	000007ff 	.word	0x000007ff

08002054 <__aeabi_dmul>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	4657      	mov	r7, sl
 8002058:	46de      	mov	lr, fp
 800205a:	464e      	mov	r6, r9
 800205c:	4645      	mov	r5, r8
 800205e:	b5e0      	push	{r5, r6, r7, lr}
 8002060:	001f      	movs	r7, r3
 8002062:	030b      	lsls	r3, r1, #12
 8002064:	0b1b      	lsrs	r3, r3, #12
 8002066:	0016      	movs	r6, r2
 8002068:	469a      	mov	sl, r3
 800206a:	0fca      	lsrs	r2, r1, #31
 800206c:	004b      	lsls	r3, r1, #1
 800206e:	0004      	movs	r4, r0
 8002070:	4693      	mov	fp, r2
 8002072:	b087      	sub	sp, #28
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	d100      	bne.n	800207a <__aeabi_dmul+0x26>
 8002078:	e0d5      	b.n	8002226 <__aeabi_dmul+0x1d2>
 800207a:	4abb      	ldr	r2, [pc, #748]	@ (8002368 <__aeabi_dmul+0x314>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x2e>
 8002080:	e0f8      	b.n	8002274 <__aeabi_dmul+0x220>
 8002082:	4651      	mov	r1, sl
 8002084:	0f42      	lsrs	r2, r0, #29
 8002086:	00c9      	lsls	r1, r1, #3
 8002088:	430a      	orrs	r2, r1
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0409      	lsls	r1, r1, #16
 800208e:	4311      	orrs	r1, r2
 8002090:	00c2      	lsls	r2, r0, #3
 8002092:	4691      	mov	r9, r2
 8002094:	4ab5      	ldr	r2, [pc, #724]	@ (800236c <__aeabi_dmul+0x318>)
 8002096:	468a      	mov	sl, r1
 8002098:	189d      	adds	r5, r3, r2
 800209a:	2300      	movs	r3, #0
 800209c:	4698      	mov	r8, r3
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	033c      	lsls	r4, r7, #12
 80020a2:	007b      	lsls	r3, r7, #1
 80020a4:	0ffa      	lsrs	r2, r7, #31
 80020a6:	0030      	movs	r0, r6
 80020a8:	0b24      	lsrs	r4, r4, #12
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dmul+0x5e>
 80020b0:	e096      	b.n	80021e0 <__aeabi_dmul+0x18c>
 80020b2:	4aad      	ldr	r2, [pc, #692]	@ (8002368 <__aeabi_dmul+0x314>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d031      	beq.n	800211c <__aeabi_dmul+0xc8>
 80020b8:	0f72      	lsrs	r2, r6, #29
 80020ba:	00e4      	lsls	r4, r4, #3
 80020bc:	4322      	orrs	r2, r4
 80020be:	2480      	movs	r4, #128	@ 0x80
 80020c0:	0424      	lsls	r4, r4, #16
 80020c2:	4314      	orrs	r4, r2
 80020c4:	4aa9      	ldr	r2, [pc, #676]	@ (800236c <__aeabi_dmul+0x318>)
 80020c6:	00f0      	lsls	r0, r6, #3
 80020c8:	4694      	mov	ip, r2
 80020ca:	4463      	add	r3, ip
 80020cc:	195b      	adds	r3, r3, r5
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	9201      	str	r2, [sp, #4]
 80020d2:	4642      	mov	r2, r8
 80020d4:	2600      	movs	r6, #0
 80020d6:	2a0a      	cmp	r2, #10
 80020d8:	dc42      	bgt.n	8002160 <__aeabi_dmul+0x10c>
 80020da:	465a      	mov	r2, fp
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	404a      	eors	r2, r1
 80020e0:	4693      	mov	fp, r2
 80020e2:	4642      	mov	r2, r8
 80020e4:	2a02      	cmp	r2, #2
 80020e6:	dc32      	bgt.n	800214e <__aeabi_dmul+0xfa>
 80020e8:	3a01      	subs	r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d900      	bls.n	80020f0 <__aeabi_dmul+0x9c>
 80020ee:	e149      	b.n	8002384 <__aeabi_dmul+0x330>
 80020f0:	2e02      	cmp	r6, #2
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dmul+0xa2>
 80020f4:	e0ca      	b.n	800228c <__aeabi_dmul+0x238>
 80020f6:	2e01      	cmp	r6, #1
 80020f8:	d13d      	bne.n	8002176 <__aeabi_dmul+0x122>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2400      	movs	r4, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	0010      	movs	r0, r2
 8002102:	465a      	mov	r2, fp
 8002104:	051b      	lsls	r3, r3, #20
 8002106:	4323      	orrs	r3, r4
 8002108:	07d2      	lsls	r2, r2, #31
 800210a:	4313      	orrs	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	b007      	add	sp, #28
 8002110:	bcf0      	pop	{r4, r5, r6, r7}
 8002112:	46bb      	mov	fp, r7
 8002114:	46b2      	mov	sl, r6
 8002116:	46a9      	mov	r9, r5
 8002118:	46a0      	mov	r8, r4
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	4b92      	ldr	r3, [pc, #584]	@ (8002368 <__aeabi_dmul+0x314>)
 800211e:	4326      	orrs	r6, r4
 8002120:	18eb      	adds	r3, r5, r3
 8002122:	2e00      	cmp	r6, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dmul+0xd4>
 8002126:	e0bb      	b.n	80022a0 <__aeabi_dmul+0x24c>
 8002128:	2203      	movs	r2, #3
 800212a:	4641      	mov	r1, r8
 800212c:	4311      	orrs	r1, r2
 800212e:	465a      	mov	r2, fp
 8002130:	4688      	mov	r8, r1
 8002132:	9900      	ldr	r1, [sp, #0]
 8002134:	404a      	eors	r2, r1
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	0109      	lsls	r1, r1, #4
 800213a:	468c      	mov	ip, r1
 800213c:	0029      	movs	r1, r5
 800213e:	4461      	add	r1, ip
 8002140:	9101      	str	r1, [sp, #4]
 8002142:	4641      	mov	r1, r8
 8002144:	290a      	cmp	r1, #10
 8002146:	dd00      	ble.n	800214a <__aeabi_dmul+0xf6>
 8002148:	e233      	b.n	80025b2 <__aeabi_dmul+0x55e>
 800214a:	4693      	mov	fp, r2
 800214c:	2603      	movs	r6, #3
 800214e:	4642      	mov	r2, r8
 8002150:	2701      	movs	r7, #1
 8002152:	4097      	lsls	r7, r2
 8002154:	21a6      	movs	r1, #166	@ 0xa6
 8002156:	003a      	movs	r2, r7
 8002158:	00c9      	lsls	r1, r1, #3
 800215a:	400a      	ands	r2, r1
 800215c:	420f      	tst	r7, r1
 800215e:	d031      	beq.n	80021c4 <__aeabi_dmul+0x170>
 8002160:	9e02      	ldr	r6, [sp, #8]
 8002162:	2e02      	cmp	r6, #2
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x114>
 8002166:	e235      	b.n	80025d4 <__aeabi_dmul+0x580>
 8002168:	2e03      	cmp	r6, #3
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x11a>
 800216c:	e1d2      	b.n	8002514 <__aeabi_dmul+0x4c0>
 800216e:	4654      	mov	r4, sl
 8002170:	4648      	mov	r0, r9
 8002172:	2e01      	cmp	r6, #1
 8002174:	d0c1      	beq.n	80020fa <__aeabi_dmul+0xa6>
 8002176:	9a01      	ldr	r2, [sp, #4]
 8002178:	4b7d      	ldr	r3, [pc, #500]	@ (8002370 <__aeabi_dmul+0x31c>)
 800217a:	4694      	mov	ip, r2
 800217c:	4463      	add	r3, ip
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc00      	bgt.n	8002184 <__aeabi_dmul+0x130>
 8002182:	e0c0      	b.n	8002306 <__aeabi_dmul+0x2b2>
 8002184:	0742      	lsls	r2, r0, #29
 8002186:	d009      	beq.n	800219c <__aeabi_dmul+0x148>
 8002188:	220f      	movs	r2, #15
 800218a:	4002      	ands	r2, r0
 800218c:	2a04      	cmp	r2, #4
 800218e:	d005      	beq.n	800219c <__aeabi_dmul+0x148>
 8002190:	1d02      	adds	r2, r0, #4
 8002192:	4282      	cmp	r2, r0
 8002194:	4180      	sbcs	r0, r0
 8002196:	4240      	negs	r0, r0
 8002198:	1824      	adds	r4, r4, r0
 800219a:	0010      	movs	r0, r2
 800219c:	01e2      	lsls	r2, r4, #7
 800219e:	d506      	bpl.n	80021ae <__aeabi_dmul+0x15a>
 80021a0:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <__aeabi_dmul+0x320>)
 80021a2:	9a01      	ldr	r2, [sp, #4]
 80021a4:	401c      	ands	r4, r3
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	4694      	mov	ip, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4463      	add	r3, ip
 80021ae:	4a72      	ldr	r2, [pc, #456]	@ (8002378 <__aeabi_dmul+0x324>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	dc6b      	bgt.n	800228c <__aeabi_dmul+0x238>
 80021b4:	0762      	lsls	r2, r4, #29
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	0264      	lsls	r4, r4, #9
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	4302      	orrs	r2, r0
 80021be:	0b24      	lsrs	r4, r4, #12
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	e79d      	b.n	8002100 <__aeabi_dmul+0xac>
 80021c4:	2190      	movs	r1, #144	@ 0x90
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	420f      	tst	r7, r1
 80021ca:	d163      	bne.n	8002294 <__aeabi_dmul+0x240>
 80021cc:	2288      	movs	r2, #136	@ 0x88
 80021ce:	423a      	tst	r2, r7
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dmul+0x180>
 80021d2:	e0d7      	b.n	8002384 <__aeabi_dmul+0x330>
 80021d4:	9b00      	ldr	r3, [sp, #0]
 80021d6:	46a2      	mov	sl, r4
 80021d8:	469b      	mov	fp, r3
 80021da:	4681      	mov	r9, r0
 80021dc:	9602      	str	r6, [sp, #8]
 80021de:	e7bf      	b.n	8002160 <__aeabi_dmul+0x10c>
 80021e0:	0023      	movs	r3, r4
 80021e2:	4333      	orrs	r3, r6
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dmul+0x194>
 80021e6:	e07f      	b.n	80022e8 <__aeabi_dmul+0x294>
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dmul+0x19a>
 80021ec:	e1ad      	b.n	800254a <__aeabi_dmul+0x4f6>
 80021ee:	0020      	movs	r0, r4
 80021f0:	f000 ff10 	bl	8003014 <__clzsi2>
 80021f4:	0002      	movs	r2, r0
 80021f6:	0003      	movs	r3, r0
 80021f8:	3a0b      	subs	r2, #11
 80021fa:	201d      	movs	r0, #29
 80021fc:	0019      	movs	r1, r3
 80021fe:	1a82      	subs	r2, r0, r2
 8002200:	0030      	movs	r0, r6
 8002202:	3908      	subs	r1, #8
 8002204:	40d0      	lsrs	r0, r2
 8002206:	408c      	lsls	r4, r1
 8002208:	4304      	orrs	r4, r0
 800220a:	0030      	movs	r0, r6
 800220c:	4088      	lsls	r0, r1
 800220e:	4a5b      	ldr	r2, [pc, #364]	@ (800237c <__aeabi_dmul+0x328>)
 8002210:	1aeb      	subs	r3, r5, r3
 8002212:	4694      	mov	ip, r2
 8002214:	4463      	add	r3, ip
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	9201      	str	r2, [sp, #4]
 800221a:	4642      	mov	r2, r8
 800221c:	2600      	movs	r6, #0
 800221e:	2a0a      	cmp	r2, #10
 8002220:	dc00      	bgt.n	8002224 <__aeabi_dmul+0x1d0>
 8002222:	e75a      	b.n	80020da <__aeabi_dmul+0x86>
 8002224:	e79c      	b.n	8002160 <__aeabi_dmul+0x10c>
 8002226:	4653      	mov	r3, sl
 8002228:	4303      	orrs	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	d054      	beq.n	80022d8 <__aeabi_dmul+0x284>
 800222e:	4653      	mov	r3, sl
 8002230:	2b00      	cmp	r3, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dmul+0x1e2>
 8002234:	e177      	b.n	8002526 <__aeabi_dmul+0x4d2>
 8002236:	4650      	mov	r0, sl
 8002238:	f000 feec 	bl	8003014 <__clzsi2>
 800223c:	230b      	movs	r3, #11
 800223e:	425b      	negs	r3, r3
 8002240:	469c      	mov	ip, r3
 8002242:	0002      	movs	r2, r0
 8002244:	4484      	add	ip, r0
 8002246:	0011      	movs	r1, r2
 8002248:	4650      	mov	r0, sl
 800224a:	3908      	subs	r1, #8
 800224c:	4088      	lsls	r0, r1
 800224e:	231d      	movs	r3, #29
 8002250:	4680      	mov	r8, r0
 8002252:	4660      	mov	r0, ip
 8002254:	1a1b      	subs	r3, r3, r0
 8002256:	0020      	movs	r0, r4
 8002258:	40d8      	lsrs	r0, r3
 800225a:	0003      	movs	r3, r0
 800225c:	4640      	mov	r0, r8
 800225e:	4303      	orrs	r3, r0
 8002260:	469a      	mov	sl, r3
 8002262:	0023      	movs	r3, r4
 8002264:	408b      	lsls	r3, r1
 8002266:	4699      	mov	r9, r3
 8002268:	2300      	movs	r3, #0
 800226a:	4d44      	ldr	r5, [pc, #272]	@ (800237c <__aeabi_dmul+0x328>)
 800226c:	4698      	mov	r8, r3
 800226e:	1aad      	subs	r5, r5, r2
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	e715      	b.n	80020a0 <__aeabi_dmul+0x4c>
 8002274:	4652      	mov	r2, sl
 8002276:	4302      	orrs	r2, r0
 8002278:	4691      	mov	r9, r2
 800227a:	d126      	bne.n	80022ca <__aeabi_dmul+0x276>
 800227c:	2200      	movs	r2, #0
 800227e:	001d      	movs	r5, r3
 8002280:	2302      	movs	r3, #2
 8002282:	4692      	mov	sl, r2
 8002284:	3208      	adds	r2, #8
 8002286:	4690      	mov	r8, r2
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	e709      	b.n	80020a0 <__aeabi_dmul+0x4c>
 800228c:	2400      	movs	r4, #0
 800228e:	2200      	movs	r2, #0
 8002290:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <__aeabi_dmul+0x314>)
 8002292:	e735      	b.n	8002100 <__aeabi_dmul+0xac>
 8002294:	2300      	movs	r3, #0
 8002296:	2480      	movs	r4, #128	@ 0x80
 8002298:	469b      	mov	fp, r3
 800229a:	0324      	lsls	r4, r4, #12
 800229c:	4b32      	ldr	r3, [pc, #200]	@ (8002368 <__aeabi_dmul+0x314>)
 800229e:	e72f      	b.n	8002100 <__aeabi_dmul+0xac>
 80022a0:	2202      	movs	r2, #2
 80022a2:	4641      	mov	r1, r8
 80022a4:	4311      	orrs	r1, r2
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	4694      	mov	ip, r2
 80022ac:	002a      	movs	r2, r5
 80022ae:	4462      	add	r2, ip
 80022b0:	4688      	mov	r8, r1
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	290a      	cmp	r1, #10
 80022b6:	dd00      	ble.n	80022ba <__aeabi_dmul+0x266>
 80022b8:	e752      	b.n	8002160 <__aeabi_dmul+0x10c>
 80022ba:	465a      	mov	r2, fp
 80022bc:	2000      	movs	r0, #0
 80022be:	9900      	ldr	r1, [sp, #0]
 80022c0:	0004      	movs	r4, r0
 80022c2:	404a      	eors	r2, r1
 80022c4:	4693      	mov	fp, r2
 80022c6:	2602      	movs	r6, #2
 80022c8:	e70b      	b.n	80020e2 <__aeabi_dmul+0x8e>
 80022ca:	220c      	movs	r2, #12
 80022cc:	001d      	movs	r5, r3
 80022ce:	2303      	movs	r3, #3
 80022d0:	4681      	mov	r9, r0
 80022d2:	4690      	mov	r8, r2
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	e6e3      	b.n	80020a0 <__aeabi_dmul+0x4c>
 80022d8:	2300      	movs	r3, #0
 80022da:	469a      	mov	sl, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	4698      	mov	r8, r3
 80022e0:	3b03      	subs	r3, #3
 80022e2:	2500      	movs	r5, #0
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	e6db      	b.n	80020a0 <__aeabi_dmul+0x4c>
 80022e8:	4642      	mov	r2, r8
 80022ea:	3301      	adds	r3, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	002b      	movs	r3, r5
 80022f0:	4690      	mov	r8, r2
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	9201      	str	r2, [sp, #4]
 80022f6:	4642      	mov	r2, r8
 80022f8:	2400      	movs	r4, #0
 80022fa:	2000      	movs	r0, #0
 80022fc:	2601      	movs	r6, #1
 80022fe:	2a0a      	cmp	r2, #10
 8002300:	dc00      	bgt.n	8002304 <__aeabi_dmul+0x2b0>
 8002302:	e6ea      	b.n	80020da <__aeabi_dmul+0x86>
 8002304:	e72c      	b.n	8002160 <__aeabi_dmul+0x10c>
 8002306:	2201      	movs	r2, #1
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	2a38      	cmp	r2, #56	@ 0x38
 800230c:	dd00      	ble.n	8002310 <__aeabi_dmul+0x2bc>
 800230e:	e6f4      	b.n	80020fa <__aeabi_dmul+0xa6>
 8002310:	2a1f      	cmp	r2, #31
 8002312:	dc00      	bgt.n	8002316 <__aeabi_dmul+0x2c2>
 8002314:	e12a      	b.n	800256c <__aeabi_dmul+0x518>
 8002316:	211f      	movs	r1, #31
 8002318:	4249      	negs	r1, r1
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	0021      	movs	r1, r4
 800231e:	40d9      	lsrs	r1, r3
 8002320:	000b      	movs	r3, r1
 8002322:	2a20      	cmp	r2, #32
 8002324:	d005      	beq.n	8002332 <__aeabi_dmul+0x2de>
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <__aeabi_dmul+0x32c>)
 8002328:	9d01      	ldr	r5, [sp, #4]
 800232a:	4694      	mov	ip, r2
 800232c:	4465      	add	r5, ip
 800232e:	40ac      	lsls	r4, r5
 8002330:	4320      	orrs	r0, r4
 8002332:	1e42      	subs	r2, r0, #1
 8002334:	4190      	sbcs	r0, r2
 8002336:	4318      	orrs	r0, r3
 8002338:	2307      	movs	r3, #7
 800233a:	0019      	movs	r1, r3
 800233c:	2400      	movs	r4, #0
 800233e:	4001      	ands	r1, r0
 8002340:	4203      	tst	r3, r0
 8002342:	d00c      	beq.n	800235e <__aeabi_dmul+0x30a>
 8002344:	230f      	movs	r3, #15
 8002346:	4003      	ands	r3, r0
 8002348:	2b04      	cmp	r3, #4
 800234a:	d100      	bne.n	800234e <__aeabi_dmul+0x2fa>
 800234c:	e140      	b.n	80025d0 <__aeabi_dmul+0x57c>
 800234e:	1d03      	adds	r3, r0, #4
 8002350:	4283      	cmp	r3, r0
 8002352:	41a4      	sbcs	r4, r4
 8002354:	0018      	movs	r0, r3
 8002356:	4264      	negs	r4, r4
 8002358:	0761      	lsls	r1, r4, #29
 800235a:	0264      	lsls	r4, r4, #9
 800235c:	0b24      	lsrs	r4, r4, #12
 800235e:	08c2      	lsrs	r2, r0, #3
 8002360:	2300      	movs	r3, #0
 8002362:	430a      	orrs	r2, r1
 8002364:	e6cc      	b.n	8002100 <__aeabi_dmul+0xac>
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	000007ff 	.word	0x000007ff
 800236c:	fffffc01 	.word	0xfffffc01
 8002370:	000003ff 	.word	0x000003ff
 8002374:	feffffff 	.word	0xfeffffff
 8002378:	000007fe 	.word	0x000007fe
 800237c:	fffffc0d 	.word	0xfffffc0d
 8002380:	0000043e 	.word	0x0000043e
 8002384:	4649      	mov	r1, r9
 8002386:	464a      	mov	r2, r9
 8002388:	0409      	lsls	r1, r1, #16
 800238a:	0c09      	lsrs	r1, r1, #16
 800238c:	000d      	movs	r5, r1
 800238e:	0c16      	lsrs	r6, r2, #16
 8002390:	0c02      	lsrs	r2, r0, #16
 8002392:	0400      	lsls	r0, r0, #16
 8002394:	0c00      	lsrs	r0, r0, #16
 8002396:	4345      	muls	r5, r0
 8002398:	46ac      	mov	ip, r5
 800239a:	0005      	movs	r5, r0
 800239c:	4375      	muls	r5, r6
 800239e:	46a8      	mov	r8, r5
 80023a0:	0015      	movs	r5, r2
 80023a2:	000f      	movs	r7, r1
 80023a4:	4375      	muls	r5, r6
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	9502      	str	r5, [sp, #8]
 80023aa:	002a      	movs	r2, r5
 80023ac:	9d00      	ldr	r5, [sp, #0]
 80023ae:	436f      	muls	r7, r5
 80023b0:	4665      	mov	r5, ip
 80023b2:	0c2d      	lsrs	r5, r5, #16
 80023b4:	46a9      	mov	r9, r5
 80023b6:	4447      	add	r7, r8
 80023b8:	444f      	add	r7, r9
 80023ba:	45b8      	cmp	r8, r7
 80023bc:	d905      	bls.n	80023ca <__aeabi_dmul+0x376>
 80023be:	0015      	movs	r5, r2
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0252      	lsls	r2, r2, #9
 80023c4:	4690      	mov	r8, r2
 80023c6:	4445      	add	r5, r8
 80023c8:	9502      	str	r5, [sp, #8]
 80023ca:	0c3d      	lsrs	r5, r7, #16
 80023cc:	9503      	str	r5, [sp, #12]
 80023ce:	4665      	mov	r5, ip
 80023d0:	042d      	lsls	r5, r5, #16
 80023d2:	043f      	lsls	r7, r7, #16
 80023d4:	0c2d      	lsrs	r5, r5, #16
 80023d6:	46ac      	mov	ip, r5
 80023d8:	003d      	movs	r5, r7
 80023da:	4465      	add	r5, ip
 80023dc:	9504      	str	r5, [sp, #16]
 80023de:	0c25      	lsrs	r5, r4, #16
 80023e0:	0424      	lsls	r4, r4, #16
 80023e2:	0c24      	lsrs	r4, r4, #16
 80023e4:	46ac      	mov	ip, r5
 80023e6:	0025      	movs	r5, r4
 80023e8:	4375      	muls	r5, r6
 80023ea:	46a8      	mov	r8, r5
 80023ec:	4665      	mov	r5, ip
 80023ee:	000f      	movs	r7, r1
 80023f0:	4369      	muls	r1, r5
 80023f2:	4441      	add	r1, r8
 80023f4:	4689      	mov	r9, r1
 80023f6:	4367      	muls	r7, r4
 80023f8:	0c39      	lsrs	r1, r7, #16
 80023fa:	4449      	add	r1, r9
 80023fc:	436e      	muls	r6, r5
 80023fe:	4588      	cmp	r8, r1
 8002400:	d903      	bls.n	800240a <__aeabi_dmul+0x3b6>
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	0252      	lsls	r2, r2, #9
 8002406:	4690      	mov	r8, r2
 8002408:	4446      	add	r6, r8
 800240a:	0c0d      	lsrs	r5, r1, #16
 800240c:	46a8      	mov	r8, r5
 800240e:	0035      	movs	r5, r6
 8002410:	4445      	add	r5, r8
 8002412:	9505      	str	r5, [sp, #20]
 8002414:	9d03      	ldr	r5, [sp, #12]
 8002416:	043f      	lsls	r7, r7, #16
 8002418:	46a8      	mov	r8, r5
 800241a:	0c3f      	lsrs	r7, r7, #16
 800241c:	0409      	lsls	r1, r1, #16
 800241e:	19c9      	adds	r1, r1, r7
 8002420:	4488      	add	r8, r1
 8002422:	4645      	mov	r5, r8
 8002424:	9503      	str	r5, [sp, #12]
 8002426:	4655      	mov	r5, sl
 8002428:	042e      	lsls	r6, r5, #16
 800242a:	0c36      	lsrs	r6, r6, #16
 800242c:	0c2f      	lsrs	r7, r5, #16
 800242e:	0035      	movs	r5, r6
 8002430:	4345      	muls	r5, r0
 8002432:	4378      	muls	r0, r7
 8002434:	4681      	mov	r9, r0
 8002436:	0038      	movs	r0, r7
 8002438:	46a8      	mov	r8, r5
 800243a:	0c2d      	lsrs	r5, r5, #16
 800243c:	46aa      	mov	sl, r5
 800243e:	9a00      	ldr	r2, [sp, #0]
 8002440:	4350      	muls	r0, r2
 8002442:	4372      	muls	r2, r6
 8002444:	444a      	add	r2, r9
 8002446:	4452      	add	r2, sl
 8002448:	4591      	cmp	r9, r2
 800244a:	d903      	bls.n	8002454 <__aeabi_dmul+0x400>
 800244c:	2580      	movs	r5, #128	@ 0x80
 800244e:	026d      	lsls	r5, r5, #9
 8002450:	46a9      	mov	r9, r5
 8002452:	4448      	add	r0, r9
 8002454:	0c15      	lsrs	r5, r2, #16
 8002456:	46a9      	mov	r9, r5
 8002458:	4645      	mov	r5, r8
 800245a:	042d      	lsls	r5, r5, #16
 800245c:	0c2d      	lsrs	r5, r5, #16
 800245e:	46a8      	mov	r8, r5
 8002460:	4665      	mov	r5, ip
 8002462:	437d      	muls	r5, r7
 8002464:	0412      	lsls	r2, r2, #16
 8002466:	4448      	add	r0, r9
 8002468:	4490      	add	r8, r2
 800246a:	46a9      	mov	r9, r5
 800246c:	0032      	movs	r2, r6
 800246e:	4665      	mov	r5, ip
 8002470:	4362      	muls	r2, r4
 8002472:	436e      	muls	r6, r5
 8002474:	437c      	muls	r4, r7
 8002476:	0c17      	lsrs	r7, r2, #16
 8002478:	1936      	adds	r6, r6, r4
 800247a:	19bf      	adds	r7, r7, r6
 800247c:	42bc      	cmp	r4, r7
 800247e:	d903      	bls.n	8002488 <__aeabi_dmul+0x434>
 8002480:	2480      	movs	r4, #128	@ 0x80
 8002482:	0264      	lsls	r4, r4, #9
 8002484:	46a4      	mov	ip, r4
 8002486:	44e1      	add	r9, ip
 8002488:	9c02      	ldr	r4, [sp, #8]
 800248a:	9e03      	ldr	r6, [sp, #12]
 800248c:	46a4      	mov	ip, r4
 800248e:	9d05      	ldr	r5, [sp, #20]
 8002490:	4466      	add	r6, ip
 8002492:	428e      	cmp	r6, r1
 8002494:	4189      	sbcs	r1, r1
 8002496:	46ac      	mov	ip, r5
 8002498:	0412      	lsls	r2, r2, #16
 800249a:	043c      	lsls	r4, r7, #16
 800249c:	0c12      	lsrs	r2, r2, #16
 800249e:	18a2      	adds	r2, r4, r2
 80024a0:	4462      	add	r2, ip
 80024a2:	4249      	negs	r1, r1
 80024a4:	1854      	adds	r4, r2, r1
 80024a6:	4446      	add	r6, r8
 80024a8:	46a4      	mov	ip, r4
 80024aa:	4546      	cmp	r6, r8
 80024ac:	41a4      	sbcs	r4, r4
 80024ae:	4682      	mov	sl, r0
 80024b0:	4264      	negs	r4, r4
 80024b2:	46a0      	mov	r8, r4
 80024b4:	42aa      	cmp	r2, r5
 80024b6:	4192      	sbcs	r2, r2
 80024b8:	458c      	cmp	ip, r1
 80024ba:	4189      	sbcs	r1, r1
 80024bc:	44e2      	add	sl, ip
 80024be:	44d0      	add	r8, sl
 80024c0:	4249      	negs	r1, r1
 80024c2:	4252      	negs	r2, r2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	45a0      	cmp	r8, r4
 80024c8:	41a4      	sbcs	r4, r4
 80024ca:	4582      	cmp	sl, r0
 80024cc:	4189      	sbcs	r1, r1
 80024ce:	4264      	negs	r4, r4
 80024d0:	4249      	negs	r1, r1
 80024d2:	430c      	orrs	r4, r1
 80024d4:	4641      	mov	r1, r8
 80024d6:	0c3f      	lsrs	r7, r7, #16
 80024d8:	19d2      	adds	r2, r2, r7
 80024da:	1912      	adds	r2, r2, r4
 80024dc:	0dcc      	lsrs	r4, r1, #23
 80024de:	9904      	ldr	r1, [sp, #16]
 80024e0:	0270      	lsls	r0, r6, #9
 80024e2:	4308      	orrs	r0, r1
 80024e4:	1e41      	subs	r1, r0, #1
 80024e6:	4188      	sbcs	r0, r1
 80024e8:	4641      	mov	r1, r8
 80024ea:	444a      	add	r2, r9
 80024ec:	0df6      	lsrs	r6, r6, #23
 80024ee:	0252      	lsls	r2, r2, #9
 80024f0:	4330      	orrs	r0, r6
 80024f2:	0249      	lsls	r1, r1, #9
 80024f4:	4314      	orrs	r4, r2
 80024f6:	4308      	orrs	r0, r1
 80024f8:	01d2      	lsls	r2, r2, #7
 80024fa:	d535      	bpl.n	8002568 <__aeabi_dmul+0x514>
 80024fc:	2201      	movs	r2, #1
 80024fe:	0843      	lsrs	r3, r0, #1
 8002500:	4002      	ands	r2, r0
 8002502:	4313      	orrs	r3, r2
 8002504:	07e0      	lsls	r0, r4, #31
 8002506:	4318      	orrs	r0, r3
 8002508:	0864      	lsrs	r4, r4, #1
 800250a:	e634      	b.n	8002176 <__aeabi_dmul+0x122>
 800250c:	9b00      	ldr	r3, [sp, #0]
 800250e:	46a2      	mov	sl, r4
 8002510:	469b      	mov	fp, r3
 8002512:	4681      	mov	r9, r0
 8002514:	2480      	movs	r4, #128	@ 0x80
 8002516:	4653      	mov	r3, sl
 8002518:	0324      	lsls	r4, r4, #12
 800251a:	431c      	orrs	r4, r3
 800251c:	0324      	lsls	r4, r4, #12
 800251e:	464a      	mov	r2, r9
 8002520:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <__aeabi_dmul+0x588>)
 8002522:	0b24      	lsrs	r4, r4, #12
 8002524:	e5ec      	b.n	8002100 <__aeabi_dmul+0xac>
 8002526:	f000 fd75 	bl	8003014 <__clzsi2>
 800252a:	2315      	movs	r3, #21
 800252c:	469c      	mov	ip, r3
 800252e:	4484      	add	ip, r0
 8002530:	0002      	movs	r2, r0
 8002532:	4663      	mov	r3, ip
 8002534:	3220      	adds	r2, #32
 8002536:	2b1c      	cmp	r3, #28
 8002538:	dc00      	bgt.n	800253c <__aeabi_dmul+0x4e8>
 800253a:	e684      	b.n	8002246 <__aeabi_dmul+0x1f2>
 800253c:	2300      	movs	r3, #0
 800253e:	4699      	mov	r9, r3
 8002540:	0023      	movs	r3, r4
 8002542:	3808      	subs	r0, #8
 8002544:	4083      	lsls	r3, r0
 8002546:	469a      	mov	sl, r3
 8002548:	e68e      	b.n	8002268 <__aeabi_dmul+0x214>
 800254a:	f000 fd63 	bl	8003014 <__clzsi2>
 800254e:	0002      	movs	r2, r0
 8002550:	0003      	movs	r3, r0
 8002552:	3215      	adds	r2, #21
 8002554:	3320      	adds	r3, #32
 8002556:	2a1c      	cmp	r2, #28
 8002558:	dc00      	bgt.n	800255c <__aeabi_dmul+0x508>
 800255a:	e64e      	b.n	80021fa <__aeabi_dmul+0x1a6>
 800255c:	0002      	movs	r2, r0
 800255e:	0034      	movs	r4, r6
 8002560:	3a08      	subs	r2, #8
 8002562:	2000      	movs	r0, #0
 8002564:	4094      	lsls	r4, r2
 8002566:	e652      	b.n	800220e <__aeabi_dmul+0x1ba>
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	e604      	b.n	8002176 <__aeabi_dmul+0x122>
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <__aeabi_dmul+0x58c>)
 800256e:	0021      	movs	r1, r4
 8002570:	469c      	mov	ip, r3
 8002572:	0003      	movs	r3, r0
 8002574:	9d01      	ldr	r5, [sp, #4]
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4465      	add	r5, ip
 800257a:	40a9      	lsls	r1, r5
 800257c:	4319      	orrs	r1, r3
 800257e:	0003      	movs	r3, r0
 8002580:	40ab      	lsls	r3, r5
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	4183      	sbcs	r3, r0
 8002586:	4319      	orrs	r1, r3
 8002588:	0008      	movs	r0, r1
 800258a:	40d4      	lsrs	r4, r2
 800258c:	074b      	lsls	r3, r1, #29
 800258e:	d009      	beq.n	80025a4 <__aeabi_dmul+0x550>
 8002590:	230f      	movs	r3, #15
 8002592:	400b      	ands	r3, r1
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <__aeabi_dmul+0x550>
 8002598:	1d0b      	adds	r3, r1, #4
 800259a:	428b      	cmp	r3, r1
 800259c:	4180      	sbcs	r0, r0
 800259e:	4240      	negs	r0, r0
 80025a0:	1824      	adds	r4, r4, r0
 80025a2:	0018      	movs	r0, r3
 80025a4:	0223      	lsls	r3, r4, #8
 80025a6:	d400      	bmi.n	80025aa <__aeabi_dmul+0x556>
 80025a8:	e6d6      	b.n	8002358 <__aeabi_dmul+0x304>
 80025aa:	2301      	movs	r3, #1
 80025ac:	2400      	movs	r4, #0
 80025ae:	2200      	movs	r2, #0
 80025b0:	e5a6      	b.n	8002100 <__aeabi_dmul+0xac>
 80025b2:	290f      	cmp	r1, #15
 80025b4:	d1aa      	bne.n	800250c <__aeabi_dmul+0x4b8>
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	4652      	mov	r2, sl
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	421a      	tst	r2, r3
 80025be:	d0a9      	beq.n	8002514 <__aeabi_dmul+0x4c0>
 80025c0:	421c      	tst	r4, r3
 80025c2:	d1a7      	bne.n	8002514 <__aeabi_dmul+0x4c0>
 80025c4:	431c      	orrs	r4, r3
 80025c6:	9b00      	ldr	r3, [sp, #0]
 80025c8:	0002      	movs	r2, r0
 80025ca:	469b      	mov	fp, r3
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <__aeabi_dmul+0x588>)
 80025ce:	e597      	b.n	8002100 <__aeabi_dmul+0xac>
 80025d0:	2400      	movs	r4, #0
 80025d2:	e6c1      	b.n	8002358 <__aeabi_dmul+0x304>
 80025d4:	2400      	movs	r4, #0
 80025d6:	4b01      	ldr	r3, [pc, #4]	@ (80025dc <__aeabi_dmul+0x588>)
 80025d8:	0022      	movs	r2, r4
 80025da:	e591      	b.n	8002100 <__aeabi_dmul+0xac>
 80025dc:	000007ff 	.word	0x000007ff
 80025e0:	0000041e 	.word	0x0000041e

080025e4 <__aeabi_dsub>:
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e6:	464e      	mov	r6, r9
 80025e8:	4645      	mov	r5, r8
 80025ea:	46de      	mov	lr, fp
 80025ec:	4657      	mov	r7, sl
 80025ee:	b5e0      	push	{r5, r6, r7, lr}
 80025f0:	b085      	sub	sp, #20
 80025f2:	9000      	str	r0, [sp, #0]
 80025f4:	9101      	str	r1, [sp, #4]
 80025f6:	030c      	lsls	r4, r1, #12
 80025f8:	004f      	lsls	r7, r1, #1
 80025fa:	0fce      	lsrs	r6, r1, #31
 80025fc:	0a61      	lsrs	r1, r4, #9
 80025fe:	9c00      	ldr	r4, [sp, #0]
 8002600:	46b0      	mov	r8, r6
 8002602:	0f64      	lsrs	r4, r4, #29
 8002604:	430c      	orrs	r4, r1
 8002606:	9900      	ldr	r1, [sp, #0]
 8002608:	0d7f      	lsrs	r7, r7, #21
 800260a:	00c8      	lsls	r0, r1, #3
 800260c:	0011      	movs	r1, r2
 800260e:	001a      	movs	r2, r3
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	469c      	mov	ip, r3
 8002614:	9100      	str	r1, [sp, #0]
 8002616:	9201      	str	r2, [sp, #4]
 8002618:	0051      	lsls	r1, r2, #1
 800261a:	0d4b      	lsrs	r3, r1, #21
 800261c:	4699      	mov	r9, r3
 800261e:	9b01      	ldr	r3, [sp, #4]
 8002620:	9d00      	ldr	r5, [sp, #0]
 8002622:	0fd9      	lsrs	r1, r3, #31
 8002624:	4663      	mov	r3, ip
 8002626:	0f6a      	lsrs	r2, r5, #29
 8002628:	0a5b      	lsrs	r3, r3, #9
 800262a:	4313      	orrs	r3, r2
 800262c:	00ea      	lsls	r2, r5, #3
 800262e:	4694      	mov	ip, r2
 8002630:	4693      	mov	fp, r2
 8002632:	4ac1      	ldr	r2, [pc, #772]	@ (8002938 <__aeabi_dsub+0x354>)
 8002634:	9003      	str	r0, [sp, #12]
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	4591      	cmp	r9, r2
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x5a>
 800263c:	e0cd      	b.n	80027da <__aeabi_dsub+0x1f6>
 800263e:	2501      	movs	r5, #1
 8002640:	4069      	eors	r1, r5
 8002642:	464d      	mov	r5, r9
 8002644:	1b7d      	subs	r5, r7, r5
 8002646:	46aa      	mov	sl, r5
 8002648:	428e      	cmp	r6, r1
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x6a>
 800264c:	e080      	b.n	8002750 <__aeabi_dsub+0x16c>
 800264e:	2d00      	cmp	r5, #0
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dsub+0x70>
 8002652:	e335      	b.n	8002cc0 <__aeabi_dsub+0x6dc>
 8002654:	4649      	mov	r1, r9
 8002656:	2900      	cmp	r1, #0
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x78>
 800265a:	e0df      	b.n	800281c <__aeabi_dsub+0x238>
 800265c:	4297      	cmp	r7, r2
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x7e>
 8002660:	e194      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002662:	4652      	mov	r2, sl
 8002664:	2501      	movs	r5, #1
 8002666:	2a38      	cmp	r2, #56	@ 0x38
 8002668:	dc19      	bgt.n	800269e <__aeabi_dsub+0xba>
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	9b02      	ldr	r3, [sp, #8]
 800266e:	0412      	lsls	r2, r2, #16
 8002670:	4313      	orrs	r3, r2
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	4652      	mov	r2, sl
 8002676:	2a1f      	cmp	r2, #31
 8002678:	dd00      	ble.n	800267c <__aeabi_dsub+0x98>
 800267a:	e1e3      	b.n	8002a44 <__aeabi_dsub+0x460>
 800267c:	4653      	mov	r3, sl
 800267e:	2220      	movs	r2, #32
 8002680:	4661      	mov	r1, ip
 8002682:	9d02      	ldr	r5, [sp, #8]
 8002684:	1ad2      	subs	r2, r2, r3
 8002686:	4095      	lsls	r5, r2
 8002688:	40d9      	lsrs	r1, r3
 800268a:	430d      	orrs	r5, r1
 800268c:	4661      	mov	r1, ip
 800268e:	4091      	lsls	r1, r2
 8002690:	000a      	movs	r2, r1
 8002692:	1e51      	subs	r1, r2, #1
 8002694:	418a      	sbcs	r2, r1
 8002696:	4315      	orrs	r5, r2
 8002698:	9a02      	ldr	r2, [sp, #8]
 800269a:	40da      	lsrs	r2, r3
 800269c:	1aa4      	subs	r4, r4, r2
 800269e:	1b45      	subs	r5, r0, r5
 80026a0:	42a8      	cmp	r0, r5
 80026a2:	4180      	sbcs	r0, r0
 80026a4:	4240      	negs	r0, r0
 80026a6:	1a24      	subs	r4, r4, r0
 80026a8:	0223      	lsls	r3, r4, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0xca>
 80026ac:	e13d      	b.n	800292a <__aeabi_dsub+0x346>
 80026ae:	0264      	lsls	r4, r4, #9
 80026b0:	0a64      	lsrs	r4, r4, #9
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0xd4>
 80026b6:	e147      	b.n	8002948 <__aeabi_dsub+0x364>
 80026b8:	0020      	movs	r0, r4
 80026ba:	f000 fcab 	bl	8003014 <__clzsi2>
 80026be:	0003      	movs	r3, r0
 80026c0:	3b08      	subs	r3, #8
 80026c2:	2120      	movs	r1, #32
 80026c4:	0028      	movs	r0, r5
 80026c6:	1aca      	subs	r2, r1, r3
 80026c8:	40d0      	lsrs	r0, r2
 80026ca:	409c      	lsls	r4, r3
 80026cc:	0002      	movs	r2, r0
 80026ce:	409d      	lsls	r5, r3
 80026d0:	4322      	orrs	r2, r4
 80026d2:	429f      	cmp	r7, r3
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0xf4>
 80026d6:	e177      	b.n	80029c8 <__aeabi_dsub+0x3e4>
 80026d8:	1bd8      	subs	r0, r3, r7
 80026da:	3001      	adds	r0, #1
 80026dc:	1a09      	subs	r1, r1, r0
 80026de:	002c      	movs	r4, r5
 80026e0:	408d      	lsls	r5, r1
 80026e2:	40c4      	lsrs	r4, r0
 80026e4:	1e6b      	subs	r3, r5, #1
 80026e6:	419d      	sbcs	r5, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	40c2      	lsrs	r2, r0
 80026ec:	408b      	lsls	r3, r1
 80026ee:	4325      	orrs	r5, r4
 80026f0:	2700      	movs	r7, #0
 80026f2:	0014      	movs	r4, r2
 80026f4:	431d      	orrs	r5, r3
 80026f6:	076b      	lsls	r3, r5, #29
 80026f8:	d009      	beq.n	800270e <__aeabi_dsub+0x12a>
 80026fa:	230f      	movs	r3, #15
 80026fc:	402b      	ands	r3, r5
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d005      	beq.n	800270e <__aeabi_dsub+0x12a>
 8002702:	1d2b      	adds	r3, r5, #4
 8002704:	42ab      	cmp	r3, r5
 8002706:	41ad      	sbcs	r5, r5
 8002708:	426d      	negs	r5, r5
 800270a:	1964      	adds	r4, r4, r5
 800270c:	001d      	movs	r5, r3
 800270e:	0223      	lsls	r3, r4, #8
 8002710:	d400      	bmi.n	8002714 <__aeabi_dsub+0x130>
 8002712:	e140      	b.n	8002996 <__aeabi_dsub+0x3b2>
 8002714:	4a88      	ldr	r2, [pc, #544]	@ (8002938 <__aeabi_dsub+0x354>)
 8002716:	3701      	adds	r7, #1
 8002718:	4297      	cmp	r7, r2
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x13a>
 800271c:	e101      	b.n	8002922 <__aeabi_dsub+0x33e>
 800271e:	2601      	movs	r6, #1
 8002720:	4643      	mov	r3, r8
 8002722:	4986      	ldr	r1, [pc, #536]	@ (800293c <__aeabi_dsub+0x358>)
 8002724:	08ed      	lsrs	r5, r5, #3
 8002726:	4021      	ands	r1, r4
 8002728:	074a      	lsls	r2, r1, #29
 800272a:	432a      	orrs	r2, r5
 800272c:	057c      	lsls	r4, r7, #21
 800272e:	024d      	lsls	r5, r1, #9
 8002730:	0b2d      	lsrs	r5, r5, #12
 8002732:	0d64      	lsrs	r4, r4, #21
 8002734:	401e      	ands	r6, r3
 8002736:	0524      	lsls	r4, r4, #20
 8002738:	432c      	orrs	r4, r5
 800273a:	07f6      	lsls	r6, r6, #31
 800273c:	4334      	orrs	r4, r6
 800273e:	0010      	movs	r0, r2
 8002740:	0021      	movs	r1, r4
 8002742:	b005      	add	sp, #20
 8002744:	bcf0      	pop	{r4, r5, r6, r7}
 8002746:	46bb      	mov	fp, r7
 8002748:	46b2      	mov	sl, r6
 800274a:	46a9      	mov	r9, r5
 800274c:	46a0      	mov	r8, r4
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002750:	2d00      	cmp	r5, #0
 8002752:	dc00      	bgt.n	8002756 <__aeabi_dsub+0x172>
 8002754:	e2d0      	b.n	8002cf8 <__aeabi_dsub+0x714>
 8002756:	4649      	mov	r1, r9
 8002758:	2900      	cmp	r1, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x17a>
 800275c:	e0d4      	b.n	8002908 <__aeabi_dsub+0x324>
 800275e:	4661      	mov	r1, ip
 8002760:	9b02      	ldr	r3, [sp, #8]
 8002762:	4319      	orrs	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x184>
 8002766:	e12b      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002768:	1e69      	subs	r1, r5, #1
 800276a:	2d01      	cmp	r5, #1
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x18c>
 800276e:	e1d9      	b.n	8002b24 <__aeabi_dsub+0x540>
 8002770:	4295      	cmp	r5, r2
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x192>
 8002774:	e10a      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002776:	2501      	movs	r5, #1
 8002778:	2938      	cmp	r1, #56	@ 0x38
 800277a:	dc17      	bgt.n	80027ac <__aeabi_dsub+0x1c8>
 800277c:	468a      	mov	sl, r1
 800277e:	4653      	mov	r3, sl
 8002780:	2b1f      	cmp	r3, #31
 8002782:	dd00      	ble.n	8002786 <__aeabi_dsub+0x1a2>
 8002784:	e1e7      	b.n	8002b56 <__aeabi_dsub+0x572>
 8002786:	2220      	movs	r2, #32
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	9b02      	ldr	r3, [sp, #8]
 800278c:	4661      	mov	r1, ip
 800278e:	4093      	lsls	r3, r2
 8002790:	001d      	movs	r5, r3
 8002792:	4653      	mov	r3, sl
 8002794:	40d9      	lsrs	r1, r3
 8002796:	4663      	mov	r3, ip
 8002798:	4093      	lsls	r3, r2
 800279a:	001a      	movs	r2, r3
 800279c:	430d      	orrs	r5, r1
 800279e:	1e51      	subs	r1, r2, #1
 80027a0:	418a      	sbcs	r2, r1
 80027a2:	4653      	mov	r3, sl
 80027a4:	4315      	orrs	r5, r2
 80027a6:	9a02      	ldr	r2, [sp, #8]
 80027a8:	40da      	lsrs	r2, r3
 80027aa:	18a4      	adds	r4, r4, r2
 80027ac:	182d      	adds	r5, r5, r0
 80027ae:	4285      	cmp	r5, r0
 80027b0:	4180      	sbcs	r0, r0
 80027b2:	4240      	negs	r0, r0
 80027b4:	1824      	adds	r4, r4, r0
 80027b6:	0223      	lsls	r3, r4, #8
 80027b8:	d400      	bmi.n	80027bc <__aeabi_dsub+0x1d8>
 80027ba:	e0b6      	b.n	800292a <__aeabi_dsub+0x346>
 80027bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002938 <__aeabi_dsub+0x354>)
 80027be:	3701      	adds	r7, #1
 80027c0:	429f      	cmp	r7, r3
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x1e2>
 80027c4:	e0ad      	b.n	8002922 <__aeabi_dsub+0x33e>
 80027c6:	2101      	movs	r1, #1
 80027c8:	4b5c      	ldr	r3, [pc, #368]	@ (800293c <__aeabi_dsub+0x358>)
 80027ca:	086a      	lsrs	r2, r5, #1
 80027cc:	401c      	ands	r4, r3
 80027ce:	4029      	ands	r1, r5
 80027d0:	430a      	orrs	r2, r1
 80027d2:	07e5      	lsls	r5, r4, #31
 80027d4:	4315      	orrs	r5, r2
 80027d6:	0864      	lsrs	r4, r4, #1
 80027d8:	e78d      	b.n	80026f6 <__aeabi_dsub+0x112>
 80027da:	4a59      	ldr	r2, [pc, #356]	@ (8002940 <__aeabi_dsub+0x35c>)
 80027dc:	9b02      	ldr	r3, [sp, #8]
 80027de:	4692      	mov	sl, r2
 80027e0:	4662      	mov	r2, ip
 80027e2:	44ba      	add	sl, r7
 80027e4:	431a      	orrs	r2, r3
 80027e6:	d02c      	beq.n	8002842 <__aeabi_dsub+0x25e>
 80027e8:	428e      	cmp	r6, r1
 80027ea:	d02e      	beq.n	800284a <__aeabi_dsub+0x266>
 80027ec:	4652      	mov	r2, sl
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d060      	beq.n	80028b4 <__aeabi_dsub+0x2d0>
 80027f2:	2f00      	cmp	r7, #0
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x214>
 80027f6:	e0db      	b.n	80029b0 <__aeabi_dsub+0x3cc>
 80027f8:	4663      	mov	r3, ip
 80027fa:	000e      	movs	r6, r1
 80027fc:	9c02      	ldr	r4, [sp, #8]
 80027fe:	08d8      	lsrs	r0, r3, #3
 8002800:	0762      	lsls	r2, r4, #29
 8002802:	4302      	orrs	r2, r0
 8002804:	08e4      	lsrs	r4, r4, #3
 8002806:	0013      	movs	r3, r2
 8002808:	4323      	orrs	r3, r4
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x22a>
 800280c:	e254      	b.n	8002cb8 <__aeabi_dsub+0x6d4>
 800280e:	2580      	movs	r5, #128	@ 0x80
 8002810:	032d      	lsls	r5, r5, #12
 8002812:	4325      	orrs	r5, r4
 8002814:	032d      	lsls	r5, r5, #12
 8002816:	4c48      	ldr	r4, [pc, #288]	@ (8002938 <__aeabi_dsub+0x354>)
 8002818:	0b2d      	lsrs	r5, r5, #12
 800281a:	e78c      	b.n	8002736 <__aeabi_dsub+0x152>
 800281c:	4661      	mov	r1, ip
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	4319      	orrs	r1, r3
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x242>
 8002824:	e0cc      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002826:	0029      	movs	r1, r5
 8002828:	3901      	subs	r1, #1
 800282a:	2d01      	cmp	r5, #1
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x24c>
 800282e:	e188      	b.n	8002b42 <__aeabi_dsub+0x55e>
 8002830:	4295      	cmp	r5, r2
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x252>
 8002834:	e0aa      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002836:	2501      	movs	r5, #1
 8002838:	2938      	cmp	r1, #56	@ 0x38
 800283a:	dd00      	ble.n	800283e <__aeabi_dsub+0x25a>
 800283c:	e72f      	b.n	800269e <__aeabi_dsub+0xba>
 800283e:	468a      	mov	sl, r1
 8002840:	e718      	b.n	8002674 <__aeabi_dsub+0x90>
 8002842:	2201      	movs	r2, #1
 8002844:	4051      	eors	r1, r2
 8002846:	428e      	cmp	r6, r1
 8002848:	d1d0      	bne.n	80027ec <__aeabi_dsub+0x208>
 800284a:	4653      	mov	r3, sl
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x26e>
 8002850:	e0be      	b.n	80029d0 <__aeabi_dsub+0x3ec>
 8002852:	2f00      	cmp	r7, #0
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x274>
 8002856:	e138      	b.n	8002aca <__aeabi_dsub+0x4e6>
 8002858:	46ca      	mov	sl, r9
 800285a:	0022      	movs	r2, r4
 800285c:	4302      	orrs	r2, r0
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x27e>
 8002860:	e1e2      	b.n	8002c28 <__aeabi_dsub+0x644>
 8002862:	4653      	mov	r3, sl
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x288>
 800286a:	e20d      	b.n	8002c88 <__aeabi_dsub+0x6a4>
 800286c:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <__aeabi_dsub+0x354>)
 800286e:	4592      	cmp	sl, r2
 8002870:	d100      	bne.n	8002874 <__aeabi_dsub+0x290>
 8002872:	e1d2      	b.n	8002c1a <__aeabi_dsub+0x636>
 8002874:	2701      	movs	r7, #1
 8002876:	2938      	cmp	r1, #56	@ 0x38
 8002878:	dc13      	bgt.n	80028a2 <__aeabi_dsub+0x2be>
 800287a:	291f      	cmp	r1, #31
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0x29c>
 800287e:	e1ee      	b.n	8002c5e <__aeabi_dsub+0x67a>
 8002880:	2220      	movs	r2, #32
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	1a52      	subs	r2, r2, r1
 8002886:	0025      	movs	r5, r4
 8002888:	0007      	movs	r7, r0
 800288a:	469a      	mov	sl, r3
 800288c:	40cc      	lsrs	r4, r1
 800288e:	4090      	lsls	r0, r2
 8002890:	4095      	lsls	r5, r2
 8002892:	40cf      	lsrs	r7, r1
 8002894:	44a2      	add	sl, r4
 8002896:	1e42      	subs	r2, r0, #1
 8002898:	4190      	sbcs	r0, r2
 800289a:	4653      	mov	r3, sl
 800289c:	432f      	orrs	r7, r5
 800289e:	4307      	orrs	r7, r0
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	003d      	movs	r5, r7
 80028a4:	4465      	add	r5, ip
 80028a6:	4565      	cmp	r5, ip
 80028a8:	4192      	sbcs	r2, r2
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	4252      	negs	r2, r2
 80028ae:	464f      	mov	r7, r9
 80028b0:	18d4      	adds	r4, r2, r3
 80028b2:	e780      	b.n	80027b6 <__aeabi_dsub+0x1d2>
 80028b4:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <__aeabi_dsub+0x360>)
 80028b6:	1c7d      	adds	r5, r7, #1
 80028b8:	4215      	tst	r5, r2
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x2da>
 80028bc:	e0aa      	b.n	8002a14 <__aeabi_dsub+0x430>
 80028be:	4662      	mov	r2, ip
 80028c0:	0025      	movs	r5, r4
 80028c2:	9b02      	ldr	r3, [sp, #8]
 80028c4:	4305      	orrs	r5, r0
 80028c6:	431a      	orrs	r2, r3
 80028c8:	2f00      	cmp	r7, #0
 80028ca:	d000      	beq.n	80028ce <__aeabi_dsub+0x2ea>
 80028cc:	e0f5      	b.n	8002aba <__aeabi_dsub+0x4d6>
 80028ce:	2d00      	cmp	r5, #0
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x2f0>
 80028d2:	e16b      	b.n	8002bac <__aeabi_dsub+0x5c8>
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x2f6>
 80028d8:	e152      	b.n	8002b80 <__aeabi_dsub+0x59c>
 80028da:	4663      	mov	r3, ip
 80028dc:	1ac5      	subs	r5, r0, r3
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	1ae2      	subs	r2, r4, r3
 80028e2:	42a8      	cmp	r0, r5
 80028e4:	419b      	sbcs	r3, r3
 80028e6:	425b      	negs	r3, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	d400      	bmi.n	80028f0 <__aeabi_dsub+0x30c>
 80028ee:	e1d5      	b.n	8002c9c <__aeabi_dsub+0x6b8>
 80028f0:	4663      	mov	r3, ip
 80028f2:	1a1d      	subs	r5, r3, r0
 80028f4:	45ac      	cmp	ip, r5
 80028f6:	4192      	sbcs	r2, r2
 80028f8:	2601      	movs	r6, #1
 80028fa:	9b02      	ldr	r3, [sp, #8]
 80028fc:	4252      	negs	r2, r2
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	4688      	mov	r8, r1
 8002902:	1aa4      	subs	r4, r4, r2
 8002904:	400e      	ands	r6, r1
 8002906:	e6f6      	b.n	80026f6 <__aeabi_dsub+0x112>
 8002908:	4297      	cmp	r7, r2
 800290a:	d03f      	beq.n	800298c <__aeabi_dsub+0x3a8>
 800290c:	4652      	mov	r2, sl
 800290e:	2501      	movs	r5, #1
 8002910:	2a38      	cmp	r2, #56	@ 0x38
 8002912:	dd00      	ble.n	8002916 <__aeabi_dsub+0x332>
 8002914:	e74a      	b.n	80027ac <__aeabi_dsub+0x1c8>
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	0412      	lsls	r2, r2, #16
 800291c:	4313      	orrs	r3, r2
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	e72d      	b.n	800277e <__aeabi_dsub+0x19a>
 8002922:	003c      	movs	r4, r7
 8002924:	2500      	movs	r5, #0
 8002926:	2200      	movs	r2, #0
 8002928:	e705      	b.n	8002736 <__aeabi_dsub+0x152>
 800292a:	2307      	movs	r3, #7
 800292c:	402b      	ands	r3, r5
 800292e:	2b00      	cmp	r3, #0
 8002930:	d000      	beq.n	8002934 <__aeabi_dsub+0x350>
 8002932:	e6e2      	b.n	80026fa <__aeabi_dsub+0x116>
 8002934:	e06b      	b.n	8002a0e <__aeabi_dsub+0x42a>
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	000007ff 	.word	0x000007ff
 800293c:	ff7fffff 	.word	0xff7fffff
 8002940:	fffff801 	.word	0xfffff801
 8002944:	000007fe 	.word	0x000007fe
 8002948:	0028      	movs	r0, r5
 800294a:	f000 fb63 	bl	8003014 <__clzsi2>
 800294e:	0003      	movs	r3, r0
 8002950:	3318      	adds	r3, #24
 8002952:	2b1f      	cmp	r3, #31
 8002954:	dc00      	bgt.n	8002958 <__aeabi_dsub+0x374>
 8002956:	e6b4      	b.n	80026c2 <__aeabi_dsub+0xde>
 8002958:	002a      	movs	r2, r5
 800295a:	3808      	subs	r0, #8
 800295c:	4082      	lsls	r2, r0
 800295e:	429f      	cmp	r7, r3
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0x380>
 8002962:	e0b9      	b.n	8002ad8 <__aeabi_dsub+0x4f4>
 8002964:	1bdb      	subs	r3, r3, r7
 8002966:	1c58      	adds	r0, r3, #1
 8002968:	281f      	cmp	r0, #31
 800296a:	dc00      	bgt.n	800296e <__aeabi_dsub+0x38a>
 800296c:	e1a0      	b.n	8002cb0 <__aeabi_dsub+0x6cc>
 800296e:	0015      	movs	r5, r2
 8002970:	3b1f      	subs	r3, #31
 8002972:	40dd      	lsrs	r5, r3
 8002974:	2820      	cmp	r0, #32
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x3a0>
 8002978:	2340      	movs	r3, #64	@ 0x40
 800297a:	1a1b      	subs	r3, r3, r0
 800297c:	409a      	lsls	r2, r3
 800297e:	1e53      	subs	r3, r2, #1
 8002980:	419a      	sbcs	r2, r3
 8002982:	4315      	orrs	r5, r2
 8002984:	2307      	movs	r3, #7
 8002986:	2700      	movs	r7, #0
 8002988:	402b      	ands	r3, r5
 800298a:	e7d0      	b.n	800292e <__aeabi_dsub+0x34a>
 800298c:	08c0      	lsrs	r0, r0, #3
 800298e:	0762      	lsls	r2, r4, #29
 8002990:	4302      	orrs	r2, r0
 8002992:	08e4      	lsrs	r4, r4, #3
 8002994:	e737      	b.n	8002806 <__aeabi_dsub+0x222>
 8002996:	08ea      	lsrs	r2, r5, #3
 8002998:	0763      	lsls	r3, r4, #29
 800299a:	431a      	orrs	r2, r3
 800299c:	4bd3      	ldr	r3, [pc, #844]	@ (8002cec <__aeabi_dsub+0x708>)
 800299e:	08e4      	lsrs	r4, r4, #3
 80029a0:	429f      	cmp	r7, r3
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x3c2>
 80029a4:	e72f      	b.n	8002806 <__aeabi_dsub+0x222>
 80029a6:	0324      	lsls	r4, r4, #12
 80029a8:	0b25      	lsrs	r5, r4, #12
 80029aa:	057c      	lsls	r4, r7, #21
 80029ac:	0d64      	lsrs	r4, r4, #21
 80029ae:	e6c2      	b.n	8002736 <__aeabi_dsub+0x152>
 80029b0:	46ca      	mov	sl, r9
 80029b2:	0022      	movs	r2, r4
 80029b4:	4302      	orrs	r2, r0
 80029b6:	d158      	bne.n	8002a6a <__aeabi_dsub+0x486>
 80029b8:	4663      	mov	r3, ip
 80029ba:	000e      	movs	r6, r1
 80029bc:	9c02      	ldr	r4, [sp, #8]
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	9b03      	ldr	r3, [sp, #12]
 80029c2:	4657      	mov	r7, sl
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	e7e7      	b.n	8002998 <__aeabi_dsub+0x3b4>
 80029c8:	4cc9      	ldr	r4, [pc, #804]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 80029ca:	1aff      	subs	r7, r7, r3
 80029cc:	4014      	ands	r4, r2
 80029ce:	e692      	b.n	80026f6 <__aeabi_dsub+0x112>
 80029d0:	4dc8      	ldr	r5, [pc, #800]	@ (8002cf4 <__aeabi_dsub+0x710>)
 80029d2:	1c7a      	adds	r2, r7, #1
 80029d4:	422a      	tst	r2, r5
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3f6>
 80029d8:	e084      	b.n	8002ae4 <__aeabi_dsub+0x500>
 80029da:	0022      	movs	r2, r4
 80029dc:	4302      	orrs	r2, r0
 80029de:	2f00      	cmp	r7, #0
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dsub+0x400>
 80029e2:	e0ef      	b.n	8002bc4 <__aeabi_dsub+0x5e0>
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x406>
 80029e8:	e0e5      	b.n	8002bb6 <__aeabi_dsub+0x5d2>
 80029ea:	4662      	mov	r2, ip
 80029ec:	9902      	ldr	r1, [sp, #8]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x410>
 80029f2:	e0c5      	b.n	8002b80 <__aeabi_dsub+0x59c>
 80029f4:	4663      	mov	r3, ip
 80029f6:	18c5      	adds	r5, r0, r3
 80029f8:	468c      	mov	ip, r1
 80029fa:	4285      	cmp	r5, r0
 80029fc:	4180      	sbcs	r0, r0
 80029fe:	4464      	add	r4, ip
 8002a00:	4240      	negs	r0, r0
 8002a02:	1824      	adds	r4, r4, r0
 8002a04:	0223      	lsls	r3, r4, #8
 8002a06:	d502      	bpl.n	8002a0e <__aeabi_dsub+0x42a>
 8002a08:	4bb9      	ldr	r3, [pc, #740]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 8002a0a:	3701      	adds	r7, #1
 8002a0c:	401c      	ands	r4, r3
 8002a0e:	46ba      	mov	sl, r7
 8002a10:	9503      	str	r5, [sp, #12]
 8002a12:	e7d5      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002a14:	4662      	mov	r2, ip
 8002a16:	1a85      	subs	r5, r0, r2
 8002a18:	42a8      	cmp	r0, r5
 8002a1a:	4192      	sbcs	r2, r2
 8002a1c:	4252      	negs	r2, r2
 8002a1e:	4691      	mov	r9, r2
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	1ae3      	subs	r3, r4, r3
 8002a24:	001a      	movs	r2, r3
 8002a26:	464b      	mov	r3, r9
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	4691      	mov	r9, r2
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	d46c      	bmi.n	8002b0c <__aeabi_dsub+0x528>
 8002a32:	464a      	mov	r2, r9
 8002a34:	464c      	mov	r4, r9
 8002a36:	432a      	orrs	r2, r5
 8002a38:	d000      	beq.n	8002a3c <__aeabi_dsub+0x458>
 8002a3a:	e63a      	b.n	80026b2 <__aeabi_dsub+0xce>
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	2400      	movs	r4, #0
 8002a40:	2500      	movs	r5, #0
 8002a42:	e678      	b.n	8002736 <__aeabi_dsub+0x152>
 8002a44:	9902      	ldr	r1, [sp, #8]
 8002a46:	4653      	mov	r3, sl
 8002a48:	000d      	movs	r5, r1
 8002a4a:	3a20      	subs	r2, #32
 8002a4c:	40d5      	lsrs	r5, r2
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d006      	beq.n	8002a60 <__aeabi_dsub+0x47c>
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	1ad2      	subs	r2, r2, r3
 8002a56:	000b      	movs	r3, r1
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	4662      	mov	r2, ip
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	4693      	mov	fp, r2
 8002a60:	465b      	mov	r3, fp
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	4193      	sbcs	r3, r2
 8002a66:	431d      	orrs	r5, r3
 8002a68:	e619      	b.n	800269e <__aeabi_dsub+0xba>
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x490>
 8002a72:	e0c6      	b.n	8002c02 <__aeabi_dsub+0x61e>
 8002a74:	4e9d      	ldr	r6, [pc, #628]	@ (8002cec <__aeabi_dsub+0x708>)
 8002a76:	45b2      	cmp	sl, r6
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x498>
 8002a7a:	e6bd      	b.n	80027f8 <__aeabi_dsub+0x214>
 8002a7c:	4688      	mov	r8, r1
 8002a7e:	000e      	movs	r6, r1
 8002a80:	2501      	movs	r5, #1
 8002a82:	2a38      	cmp	r2, #56	@ 0x38
 8002a84:	dc10      	bgt.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002a86:	2a1f      	cmp	r2, #31
 8002a88:	dc7f      	bgt.n	8002b8a <__aeabi_dsub+0x5a6>
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	0025      	movs	r5, r4
 8002a8e:	1a89      	subs	r1, r1, r2
 8002a90:	0007      	movs	r7, r0
 8002a92:	4088      	lsls	r0, r1
 8002a94:	408d      	lsls	r5, r1
 8002a96:	40d7      	lsrs	r7, r2
 8002a98:	40d4      	lsrs	r4, r2
 8002a9a:	1e41      	subs	r1, r0, #1
 8002a9c:	4188      	sbcs	r0, r1
 8002a9e:	9b02      	ldr	r3, [sp, #8]
 8002aa0:	433d      	orrs	r5, r7
 8002aa2:	1b1b      	subs	r3, r3, r4
 8002aa4:	4305      	orrs	r5, r0
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	4662      	mov	r2, ip
 8002aaa:	1b55      	subs	r5, r2, r5
 8002aac:	45ac      	cmp	ip, r5
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	464f      	mov	r7, r9
 8002ab6:	1a9c      	subs	r4, r3, r2
 8002ab8:	e5f6      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d000      	beq.n	8002ac0 <__aeabi_dsub+0x4dc>
 8002abe:	e0b7      	b.n	8002c30 <__aeabi_dsub+0x64c>
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x4e2>
 8002ac4:	e0f0      	b.n	8002ca8 <__aeabi_dsub+0x6c4>
 8002ac6:	2601      	movs	r6, #1
 8002ac8:	400e      	ands	r6, r1
 8002aca:	4663      	mov	r3, ip
 8002acc:	9802      	ldr	r0, [sp, #8]
 8002ace:	08d9      	lsrs	r1, r3, #3
 8002ad0:	0742      	lsls	r2, r0, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	08c4      	lsrs	r4, r0, #3
 8002ad6:	e696      	b.n	8002806 <__aeabi_dsub+0x222>
 8002ad8:	4c85      	ldr	r4, [pc, #532]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 8002ada:	1aff      	subs	r7, r7, r3
 8002adc:	4014      	ands	r4, r2
 8002ade:	0762      	lsls	r2, r4, #29
 8002ae0:	08e4      	lsrs	r4, r4, #3
 8002ae2:	e760      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002ae4:	4981      	ldr	r1, [pc, #516]	@ (8002cec <__aeabi_dsub+0x708>)
 8002ae6:	428a      	cmp	r2, r1
 8002ae8:	d100      	bne.n	8002aec <__aeabi_dsub+0x508>
 8002aea:	e0c9      	b.n	8002c80 <__aeabi_dsub+0x69c>
 8002aec:	4663      	mov	r3, ip
 8002aee:	18c1      	adds	r1, r0, r3
 8002af0:	4281      	cmp	r1, r0
 8002af2:	4180      	sbcs	r0, r0
 8002af4:	9b02      	ldr	r3, [sp, #8]
 8002af6:	4240      	negs	r0, r0
 8002af8:	18e3      	adds	r3, r4, r3
 8002afa:	181b      	adds	r3, r3, r0
 8002afc:	07dd      	lsls	r5, r3, #31
 8002afe:	085c      	lsrs	r4, r3, #1
 8002b00:	2307      	movs	r3, #7
 8002b02:	0849      	lsrs	r1, r1, #1
 8002b04:	430d      	orrs	r5, r1
 8002b06:	0017      	movs	r7, r2
 8002b08:	402b      	ands	r3, r5
 8002b0a:	e710      	b.n	800292e <__aeabi_dsub+0x34a>
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	1a1d      	subs	r5, r3, r0
 8002b10:	45ac      	cmp	ip, r5
 8002b12:	4192      	sbcs	r2, r2
 8002b14:	2601      	movs	r6, #1
 8002b16:	9b02      	ldr	r3, [sp, #8]
 8002b18:	4252      	negs	r2, r2
 8002b1a:	1b1c      	subs	r4, r3, r4
 8002b1c:	4688      	mov	r8, r1
 8002b1e:	1aa4      	subs	r4, r4, r2
 8002b20:	400e      	ands	r6, r1
 8002b22:	e5c6      	b.n	80026b2 <__aeabi_dsub+0xce>
 8002b24:	4663      	mov	r3, ip
 8002b26:	18c5      	adds	r5, r0, r3
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	4285      	cmp	r5, r0
 8002b2c:	4180      	sbcs	r0, r0
 8002b2e:	469c      	mov	ip, r3
 8002b30:	4240      	negs	r0, r0
 8002b32:	4464      	add	r4, ip
 8002b34:	1824      	adds	r4, r4, r0
 8002b36:	2701      	movs	r7, #1
 8002b38:	0223      	lsls	r3, r4, #8
 8002b3a:	d400      	bmi.n	8002b3e <__aeabi_dsub+0x55a>
 8002b3c:	e6f5      	b.n	800292a <__aeabi_dsub+0x346>
 8002b3e:	2702      	movs	r7, #2
 8002b40:	e641      	b.n	80027c6 <__aeabi_dsub+0x1e2>
 8002b42:	4663      	mov	r3, ip
 8002b44:	1ac5      	subs	r5, r0, r3
 8002b46:	42a8      	cmp	r0, r5
 8002b48:	4180      	sbcs	r0, r0
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	4240      	negs	r0, r0
 8002b4e:	1ae4      	subs	r4, r4, r3
 8002b50:	2701      	movs	r7, #1
 8002b52:	1a24      	subs	r4, r4, r0
 8002b54:	e5a8      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002b56:	9d02      	ldr	r5, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	002b      	movs	r3, r5
 8002b5c:	3a20      	subs	r2, #32
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	4653      	mov	r3, sl
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d006      	beq.n	8002b76 <__aeabi_dsub+0x592>
 8002b68:	2240      	movs	r2, #64	@ 0x40
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	002b      	movs	r3, r5
 8002b6e:	4093      	lsls	r3, r2
 8002b70:	4662      	mov	r2, ip
 8002b72:	431a      	orrs	r2, r3
 8002b74:	4693      	mov	fp, r2
 8002b76:	465d      	mov	r5, fp
 8002b78:	1e6b      	subs	r3, r5, #1
 8002b7a:	419d      	sbcs	r5, r3
 8002b7c:	430d      	orrs	r5, r1
 8002b7e:	e615      	b.n	80027ac <__aeabi_dsub+0x1c8>
 8002b80:	0762      	lsls	r2, r4, #29
 8002b82:	08c0      	lsrs	r0, r0, #3
 8002b84:	4302      	orrs	r2, r0
 8002b86:	08e4      	lsrs	r4, r4, #3
 8002b88:	e70d      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0027      	movs	r7, r4
 8002b8e:	3920      	subs	r1, #32
 8002b90:	40cf      	lsrs	r7, r1
 8002b92:	2a20      	cmp	r2, #32
 8002b94:	d005      	beq.n	8002ba2 <__aeabi_dsub+0x5be>
 8002b96:	2140      	movs	r1, #64	@ 0x40
 8002b98:	1a8a      	subs	r2, r1, r2
 8002b9a:	4094      	lsls	r4, r2
 8002b9c:	0025      	movs	r5, r4
 8002b9e:	4305      	orrs	r5, r0
 8002ba0:	9503      	str	r5, [sp, #12]
 8002ba2:	9d03      	ldr	r5, [sp, #12]
 8002ba4:	1e6a      	subs	r2, r5, #1
 8002ba6:	4195      	sbcs	r5, r2
 8002ba8:	433d      	orrs	r5, r7
 8002baa:	e77d      	b.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d100      	bne.n	8002bb2 <__aeabi_dsub+0x5ce>
 8002bb0:	e744      	b.n	8002a3c <__aeabi_dsub+0x458>
 8002bb2:	2601      	movs	r6, #1
 8002bb4:	400e      	ands	r6, r1
 8002bb6:	4663      	mov	r3, ip
 8002bb8:	08d9      	lsrs	r1, r3, #3
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	075a      	lsls	r2, r3, #29
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	08dc      	lsrs	r4, r3, #3
 8002bc2:	e6f0      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d028      	beq.n	8002c1a <__aeabi_dsub+0x636>
 8002bc8:	4662      	mov	r2, ip
 8002bca:	9f02      	ldr	r7, [sp, #8]
 8002bcc:	08c0      	lsrs	r0, r0, #3
 8002bce:	433a      	orrs	r2, r7
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dsub+0x5f0>
 8002bd2:	e6dc      	b.n	800298e <__aeabi_dsub+0x3aa>
 8002bd4:	0762      	lsls	r2, r4, #29
 8002bd6:	4310      	orrs	r0, r2
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	08e4      	lsrs	r4, r4, #3
 8002bdc:	0312      	lsls	r2, r2, #12
 8002bde:	4214      	tst	r4, r2
 8002be0:	d009      	beq.n	8002bf6 <__aeabi_dsub+0x612>
 8002be2:	08fd      	lsrs	r5, r7, #3
 8002be4:	4215      	tst	r5, r2
 8002be6:	d106      	bne.n	8002bf6 <__aeabi_dsub+0x612>
 8002be8:	4663      	mov	r3, ip
 8002bea:	2601      	movs	r6, #1
 8002bec:	002c      	movs	r4, r5
 8002bee:	08d8      	lsrs	r0, r3, #3
 8002bf0:	077b      	lsls	r3, r7, #29
 8002bf2:	4318      	orrs	r0, r3
 8002bf4:	400e      	ands	r6, r1
 8002bf6:	0f42      	lsrs	r2, r0, #29
 8002bf8:	00c0      	lsls	r0, r0, #3
 8002bfa:	08c0      	lsrs	r0, r0, #3
 8002bfc:	0752      	lsls	r2, r2, #29
 8002bfe:	4302      	orrs	r2, r0
 8002c00:	e601      	b.n	8002806 <__aeabi_dsub+0x222>
 8002c02:	4663      	mov	r3, ip
 8002c04:	1a1d      	subs	r5, r3, r0
 8002c06:	45ac      	cmp	ip, r5
 8002c08:	4192      	sbcs	r2, r2
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	4252      	negs	r2, r2
 8002c0e:	1b1c      	subs	r4, r3, r4
 8002c10:	000e      	movs	r6, r1
 8002c12:	4688      	mov	r8, r1
 8002c14:	2701      	movs	r7, #1
 8002c16:	1aa4      	subs	r4, r4, r2
 8002c18:	e546      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002c1a:	4663      	mov	r3, ip
 8002c1c:	08d9      	lsrs	r1, r3, #3
 8002c1e:	9b02      	ldr	r3, [sp, #8]
 8002c20:	075a      	lsls	r2, r3, #29
 8002c22:	430a      	orrs	r2, r1
 8002c24:	08dc      	lsrs	r4, r3, #3
 8002c26:	e5ee      	b.n	8002806 <__aeabi_dsub+0x222>
 8002c28:	4663      	mov	r3, ip
 8002c2a:	9c02      	ldr	r4, [sp, #8]
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	e6c7      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002c30:	08c0      	lsrs	r0, r0, #3
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x654>
 8002c36:	e6aa      	b.n	800298e <__aeabi_dsub+0x3aa>
 8002c38:	0762      	lsls	r2, r4, #29
 8002c3a:	4310      	orrs	r0, r2
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	08e4      	lsrs	r4, r4, #3
 8002c40:	0312      	lsls	r2, r2, #12
 8002c42:	4214      	tst	r4, r2
 8002c44:	d0d7      	beq.n	8002bf6 <__aeabi_dsub+0x612>
 8002c46:	9f02      	ldr	r7, [sp, #8]
 8002c48:	08fd      	lsrs	r5, r7, #3
 8002c4a:	4215      	tst	r5, r2
 8002c4c:	d1d3      	bne.n	8002bf6 <__aeabi_dsub+0x612>
 8002c4e:	4663      	mov	r3, ip
 8002c50:	2601      	movs	r6, #1
 8002c52:	08d8      	lsrs	r0, r3, #3
 8002c54:	077b      	lsls	r3, r7, #29
 8002c56:	002c      	movs	r4, r5
 8002c58:	4318      	orrs	r0, r3
 8002c5a:	400e      	ands	r6, r1
 8002c5c:	e7cb      	b.n	8002bf6 <__aeabi_dsub+0x612>
 8002c5e:	000a      	movs	r2, r1
 8002c60:	0027      	movs	r7, r4
 8002c62:	3a20      	subs	r2, #32
 8002c64:	40d7      	lsrs	r7, r2
 8002c66:	2920      	cmp	r1, #32
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x692>
 8002c6a:	2240      	movs	r2, #64	@ 0x40
 8002c6c:	1a52      	subs	r2, r2, r1
 8002c6e:	4094      	lsls	r4, r2
 8002c70:	0025      	movs	r5, r4
 8002c72:	4305      	orrs	r5, r0
 8002c74:	9503      	str	r5, [sp, #12]
 8002c76:	9d03      	ldr	r5, [sp, #12]
 8002c78:	1e6a      	subs	r2, r5, #1
 8002c7a:	4195      	sbcs	r5, r2
 8002c7c:	432f      	orrs	r7, r5
 8002c7e:	e610      	b.n	80028a2 <__aeabi_dsub+0x2be>
 8002c80:	0014      	movs	r4, r2
 8002c82:	2500      	movs	r5, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	e556      	b.n	8002736 <__aeabi_dsub+0x152>
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4460      	add	r0, ip
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4560      	cmp	r0, ip
 8002c90:	4192      	sbcs	r2, r2
 8002c92:	444c      	add	r4, r9
 8002c94:	4252      	negs	r2, r2
 8002c96:	0005      	movs	r5, r0
 8002c98:	18a4      	adds	r4, r4, r2
 8002c9a:	e74c      	b.n	8002b36 <__aeabi_dsub+0x552>
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	001c      	movs	r4, r3
 8002ca0:	432a      	orrs	r2, r5
 8002ca2:	d000      	beq.n	8002ca6 <__aeabi_dsub+0x6c2>
 8002ca4:	e6b3      	b.n	8002a0e <__aeabi_dsub+0x42a>
 8002ca6:	e6c9      	b.n	8002a3c <__aeabi_dsub+0x458>
 8002ca8:	2480      	movs	r4, #128	@ 0x80
 8002caa:	2600      	movs	r6, #0
 8002cac:	0324      	lsls	r4, r4, #12
 8002cae:	e5ae      	b.n	800280e <__aeabi_dsub+0x22a>
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	1a09      	subs	r1, r1, r0
 8002cb6:	e517      	b.n	80026e8 <__aeabi_dsub+0x104>
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2500      	movs	r5, #0
 8002cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8002cec <__aeabi_dsub+0x708>)
 8002cbe:	e53a      	b.n	8002736 <__aeabi_dsub+0x152>
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	d100      	bne.n	8002cc6 <__aeabi_dsub+0x6e2>
 8002cc4:	e5f6      	b.n	80028b4 <__aeabi_dsub+0x2d0>
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1bda      	subs	r2, r3, r7
 8002cca:	4692      	mov	sl, r2
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	d100      	bne.n	8002cd2 <__aeabi_dsub+0x6ee>
 8002cd0:	e66f      	b.n	80029b2 <__aeabi_dsub+0x3ce>
 8002cd2:	2a38      	cmp	r2, #56	@ 0x38
 8002cd4:	dc05      	bgt.n	8002ce2 <__aeabi_dsub+0x6fe>
 8002cd6:	2680      	movs	r6, #128	@ 0x80
 8002cd8:	0436      	lsls	r6, r6, #16
 8002cda:	4334      	orrs	r4, r6
 8002cdc:	4688      	mov	r8, r1
 8002cde:	000e      	movs	r6, r1
 8002ce0:	e6d1      	b.n	8002a86 <__aeabi_dsub+0x4a2>
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	000e      	movs	r6, r1
 8002ce6:	2501      	movs	r5, #1
 8002ce8:	e6de      	b.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	000007ff 	.word	0x000007ff
 8002cf0:	ff7fffff 	.word	0xff7fffff
 8002cf4:	000007fe 	.word	0x000007fe
 8002cf8:	2d00      	cmp	r5, #0
 8002cfa:	d100      	bne.n	8002cfe <__aeabi_dsub+0x71a>
 8002cfc:	e668      	b.n	80029d0 <__aeabi_dsub+0x3ec>
 8002cfe:	464b      	mov	r3, r9
 8002d00:	1bd9      	subs	r1, r3, r7
 8002d02:	2f00      	cmp	r7, #0
 8002d04:	d101      	bne.n	8002d0a <__aeabi_dsub+0x726>
 8002d06:	468a      	mov	sl, r1
 8002d08:	e5a7      	b.n	800285a <__aeabi_dsub+0x276>
 8002d0a:	2701      	movs	r7, #1
 8002d0c:	2938      	cmp	r1, #56	@ 0x38
 8002d0e:	dd00      	ble.n	8002d12 <__aeabi_dsub+0x72e>
 8002d10:	e5c7      	b.n	80028a2 <__aeabi_dsub+0x2be>
 8002d12:	2280      	movs	r2, #128	@ 0x80
 8002d14:	0412      	lsls	r2, r2, #16
 8002d16:	4314      	orrs	r4, r2
 8002d18:	e5af      	b.n	800287a <__aeabi_dsub+0x296>
 8002d1a:	46c0      	nop			@ (mov r8, r8)

08002d1c <__aeabi_dcmpun>:
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	46c6      	mov	lr, r8
 8002d20:	031e      	lsls	r6, r3, #12
 8002d22:	0b36      	lsrs	r6, r6, #12
 8002d24:	46b0      	mov	r8, r6
 8002d26:	4e0d      	ldr	r6, [pc, #52]	@ (8002d5c <__aeabi_dcmpun+0x40>)
 8002d28:	030c      	lsls	r4, r1, #12
 8002d2a:	004d      	lsls	r5, r1, #1
 8002d2c:	005f      	lsls	r7, r3, #1
 8002d2e:	b500      	push	{lr}
 8002d30:	0b24      	lsrs	r4, r4, #12
 8002d32:	0d6d      	lsrs	r5, r5, #21
 8002d34:	0d7f      	lsrs	r7, r7, #21
 8002d36:	42b5      	cmp	r5, r6
 8002d38:	d00b      	beq.n	8002d52 <__aeabi_dcmpun+0x36>
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__aeabi_dcmpun+0x40>)
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	428f      	cmp	r7, r1
 8002d40:	d104      	bne.n	8002d4c <__aeabi_dcmpun+0x30>
 8002d42:	4646      	mov	r6, r8
 8002d44:	4316      	orrs	r6, r2
 8002d46:	0030      	movs	r0, r6
 8002d48:	1e43      	subs	r3, r0, #1
 8002d4a:	4198      	sbcs	r0, r3
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	46b8      	mov	r8, r7
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d52:	4304      	orrs	r4, r0
 8002d54:	2001      	movs	r0, #1
 8002d56:	2c00      	cmp	r4, #0
 8002d58:	d1f8      	bne.n	8002d4c <__aeabi_dcmpun+0x30>
 8002d5a:	e7ee      	b.n	8002d3a <__aeabi_dcmpun+0x1e>
 8002d5c:	000007ff 	.word	0x000007ff

08002d60 <__aeabi_d2iz>:
 8002d60:	000b      	movs	r3, r1
 8002d62:	0002      	movs	r2, r0
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4d16      	ldr	r5, [pc, #88]	@ (8002dc0 <__aeabi_d2iz+0x60>)
 8002d68:	030c      	lsls	r4, r1, #12
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	2000      	movs	r0, #0
 8002d70:	9200      	str	r2, [sp, #0]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	0b24      	lsrs	r4, r4, #12
 8002d76:	0d49      	lsrs	r1, r1, #21
 8002d78:	0fde      	lsrs	r6, r3, #31
 8002d7a:	42a9      	cmp	r1, r5
 8002d7c:	dd04      	ble.n	8002d88 <__aeabi_d2iz+0x28>
 8002d7e:	4811      	ldr	r0, [pc, #68]	@ (8002dc4 <__aeabi_d2iz+0x64>)
 8002d80:	4281      	cmp	r1, r0
 8002d82:	dd03      	ble.n	8002d8c <__aeabi_d2iz+0x2c>
 8002d84:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <__aeabi_d2iz+0x68>)
 8002d86:	18f0      	adds	r0, r6, r3
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	2080      	movs	r0, #128	@ 0x80
 8002d8e:	0340      	lsls	r0, r0, #13
 8002d90:	4320      	orrs	r0, r4
 8002d92:	4c0e      	ldr	r4, [pc, #56]	@ (8002dcc <__aeabi_d2iz+0x6c>)
 8002d94:	1a64      	subs	r4, r4, r1
 8002d96:	2c1f      	cmp	r4, #31
 8002d98:	dd08      	ble.n	8002dac <__aeabi_d2iz+0x4c>
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <__aeabi_d2iz+0x70>)
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	40d8      	lsrs	r0, r3
 8002da0:	0003      	movs	r3, r0
 8002da2:	4258      	negs	r0, r3
 8002da4:	2e00      	cmp	r6, #0
 8002da6:	d1ef      	bne.n	8002d88 <__aeabi_d2iz+0x28>
 8002da8:	0018      	movs	r0, r3
 8002daa:	e7ed      	b.n	8002d88 <__aeabi_d2iz+0x28>
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <__aeabi_d2iz+0x74>)
 8002dae:	9a00      	ldr	r2, [sp, #0]
 8002db0:	469c      	mov	ip, r3
 8002db2:	0003      	movs	r3, r0
 8002db4:	4461      	add	r1, ip
 8002db6:	408b      	lsls	r3, r1
 8002db8:	40e2      	lsrs	r2, r4
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	e7f1      	b.n	8002da2 <__aeabi_d2iz+0x42>
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	000003fe 	.word	0x000003fe
 8002dc4:	0000041d 	.word	0x0000041d
 8002dc8:	7fffffff 	.word	0x7fffffff
 8002dcc:	00000433 	.word	0x00000433
 8002dd0:	00000413 	.word	0x00000413
 8002dd4:	fffffbed 	.word	0xfffffbed

08002dd8 <__aeabi_i2d>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d016      	beq.n	8002e0c <__aeabi_i2d+0x34>
 8002dde:	17c3      	asrs	r3, r0, #31
 8002de0:	18c5      	adds	r5, r0, r3
 8002de2:	405d      	eors	r5, r3
 8002de4:	0fc4      	lsrs	r4, r0, #31
 8002de6:	0028      	movs	r0, r5
 8002de8:	f000 f914 	bl	8003014 <__clzsi2>
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <__aeabi_i2d+0x58>)
 8002dee:	1a1b      	subs	r3, r3, r0
 8002df0:	055b      	lsls	r3, r3, #21
 8002df2:	0d5b      	lsrs	r3, r3, #21
 8002df4:	280a      	cmp	r0, #10
 8002df6:	dc14      	bgt.n	8002e22 <__aeabi_i2d+0x4a>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	002e      	movs	r6, r5
 8002dfc:	3215      	adds	r2, #21
 8002dfe:	4096      	lsls	r6, r2
 8002e00:	220b      	movs	r2, #11
 8002e02:	1a12      	subs	r2, r2, r0
 8002e04:	40d5      	lsrs	r5, r2
 8002e06:	032d      	lsls	r5, r5, #12
 8002e08:	0b2d      	lsrs	r5, r5, #12
 8002e0a:	e003      	b.n	8002e14 <__aeabi_i2d+0x3c>
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2500      	movs	r5, #0
 8002e12:	2600      	movs	r6, #0
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	432b      	orrs	r3, r5
 8002e18:	07e4      	lsls	r4, r4, #31
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	0030      	movs	r0, r6
 8002e1e:	0019      	movs	r1, r3
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	380b      	subs	r0, #11
 8002e24:	4085      	lsls	r5, r0
 8002e26:	032d      	lsls	r5, r5, #12
 8002e28:	2600      	movs	r6, #0
 8002e2a:	0b2d      	lsrs	r5, r5, #12
 8002e2c:	e7f2      	b.n	8002e14 <__aeabi_i2d+0x3c>
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	0000041e 	.word	0x0000041e

08002e34 <__aeabi_ui2d>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	1e04      	subs	r4, r0, #0
 8002e38:	d010      	beq.n	8002e5c <__aeabi_ui2d+0x28>
 8002e3a:	f000 f8eb 	bl	8003014 <__clzsi2>
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <__aeabi_ui2d+0x44>)
 8002e40:	1a1b      	subs	r3, r3, r0
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	280a      	cmp	r0, #10
 8002e48:	dc0f      	bgt.n	8002e6a <__aeabi_ui2d+0x36>
 8002e4a:	220b      	movs	r2, #11
 8002e4c:	0021      	movs	r1, r4
 8002e4e:	1a12      	subs	r2, r2, r0
 8002e50:	40d1      	lsrs	r1, r2
 8002e52:	3015      	adds	r0, #21
 8002e54:	030a      	lsls	r2, r1, #12
 8002e56:	4084      	lsls	r4, r0
 8002e58:	0b12      	lsrs	r2, r2, #12
 8002e5a:	e001      	b.n	8002e60 <__aeabi_ui2d+0x2c>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2200      	movs	r2, #0
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	4313      	orrs	r3, r2
 8002e64:	0020      	movs	r0, r4
 8002e66:	0019      	movs	r1, r3
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	0022      	movs	r2, r4
 8002e6c:	380b      	subs	r0, #11
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	0312      	lsls	r2, r2, #12
 8002e72:	2400      	movs	r4, #0
 8002e74:	0b12      	lsrs	r2, r2, #12
 8002e76:	e7f3      	b.n	8002e60 <__aeabi_ui2d+0x2c>
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_f2d>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0242      	lsls	r2, r0, #9
 8002e80:	0043      	lsls	r3, r0, #1
 8002e82:	0fc4      	lsrs	r4, r0, #31
 8002e84:	20fe      	movs	r0, #254	@ 0xfe
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	0a55      	lsrs	r5, r2, #9
 8002e8c:	4208      	tst	r0, r1
 8002e8e:	d00c      	beq.n	8002eaa <__aeabi_f2d+0x2e>
 8002e90:	21e0      	movs	r1, #224	@ 0xe0
 8002e92:	0089      	lsls	r1, r1, #2
 8002e94:	468c      	mov	ip, r1
 8002e96:	076d      	lsls	r5, r5, #29
 8002e98:	0b12      	lsrs	r2, r2, #12
 8002e9a:	4463      	add	r3, ip
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	07e4      	lsls	r4, r4, #31
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <__aeabi_f2d+0x5c>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d01b      	beq.n	8002eea <__aeabi_f2d+0x6e>
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f8ae 	bl	8003014 <__clzsi2>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc1c      	bgt.n	8002ef6 <__aeabi_f2d+0x7a>
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	002a      	movs	r2, r5
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	40da      	lsrs	r2, r3
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	409d      	lsls	r5, r3
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <__aeabi_f2d+0x88>)
 8002ecc:	0312      	lsls	r2, r2, #12
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	055b      	lsls	r3, r3, #21
 8002ed2:	0b12      	lsrs	r2, r2, #12
 8002ed4:	0d5b      	lsrs	r3, r3, #21
 8002ed6:	e7e1      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	d009      	beq.n	8002ef0 <__aeabi_f2d+0x74>
 8002edc:	0b13      	lsrs	r3, r2, #12
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	076d      	lsls	r5, r5, #29
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <__aeabi_f2d+0x8c>)
 8002ee8:	e7d8      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2200      	movs	r2, #0
 8002eee:	e7d5      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <__aeabi_f2d+0x8c>)
 8002ef4:	e7d2      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	002a      	movs	r2, r5
 8002efa:	3b0b      	subs	r3, #11
 8002efc:	409a      	lsls	r2, r3
 8002efe:	2500      	movs	r5, #0
 8002f00:	e7e3      	b.n	8002eca <__aeabi_f2d+0x4e>
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	00000389 	.word	0x00000389
 8002f08:	000007ff 	.word	0x000007ff

08002f0c <__aeabi_d2f>:
 8002f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0e:	004b      	lsls	r3, r1, #1
 8002f10:	030f      	lsls	r7, r1, #12
 8002f12:	0d5b      	lsrs	r3, r3, #21
 8002f14:	4c3b      	ldr	r4, [pc, #236]	@ (8003004 <__aeabi_d2f+0xf8>)
 8002f16:	0f45      	lsrs	r5, r0, #29
 8002f18:	b083      	sub	sp, #12
 8002f1a:	0a7f      	lsrs	r7, r7, #9
 8002f1c:	1c5e      	adds	r6, r3, #1
 8002f1e:	432f      	orrs	r7, r5
 8002f20:	9000      	str	r0, [sp, #0]
 8002f22:	9101      	str	r1, [sp, #4]
 8002f24:	0fca      	lsrs	r2, r1, #31
 8002f26:	00c5      	lsls	r5, r0, #3
 8002f28:	4226      	tst	r6, r4
 8002f2a:	d00b      	beq.n	8002f44 <__aeabi_d2f+0x38>
 8002f2c:	4936      	ldr	r1, [pc, #216]	@ (8003008 <__aeabi_d2f+0xfc>)
 8002f2e:	185c      	adds	r4, r3, r1
 8002f30:	2cfe      	cmp	r4, #254	@ 0xfe
 8002f32:	dd13      	ble.n	8002f5c <__aeabi_d2f+0x50>
 8002f34:	20ff      	movs	r0, #255	@ 0xff
 8002f36:	2300      	movs	r3, #0
 8002f38:	05c0      	lsls	r0, r0, #23
 8002f3a:	4318      	orrs	r0, r3
 8002f3c:	07d2      	lsls	r2, r2, #31
 8002f3e:	4310      	orrs	r0, r2
 8002f40:	b003      	add	sp, #12
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <__aeabi_d2f+0x42>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e7f4      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f4e:	433d      	orrs	r5, r7
 8002f50:	d0f0      	beq.n	8002f34 <__aeabi_d2f+0x28>
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	03db      	lsls	r3, r3, #15
 8002f56:	20ff      	movs	r0, #255	@ 0xff
 8002f58:	433b      	orrs	r3, r7
 8002f5a:	e7ed      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f5c:	2c00      	cmp	r4, #0
 8002f5e:	dd14      	ble.n	8002f8a <__aeabi_d2f+0x7e>
 8002f60:	9b00      	ldr	r3, [sp, #0]
 8002f62:	00ff      	lsls	r7, r7, #3
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	4183      	sbcs	r3, r0
 8002f6a:	0f69      	lsrs	r1, r5, #29
 8002f6c:	433b      	orrs	r3, r7
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	0759      	lsls	r1, r3, #29
 8002f72:	d041      	beq.n	8002ff8 <__aeabi_d2f+0xec>
 8002f74:	210f      	movs	r1, #15
 8002f76:	4019      	ands	r1, r3
 8002f78:	2904      	cmp	r1, #4
 8002f7a:	d028      	beq.n	8002fce <__aeabi_d2f+0xc2>
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	d525      	bpl.n	8002fce <__aeabi_d2f+0xc2>
 8002f82:	3401      	adds	r4, #1
 8002f84:	2300      	movs	r3, #0
 8002f86:	b2e0      	uxtb	r0, r4
 8002f88:	e7d6      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f8a:	0021      	movs	r1, r4
 8002f8c:	3117      	adds	r1, #23
 8002f8e:	dbdb      	blt.n	8002f48 <__aeabi_d2f+0x3c>
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	201e      	movs	r0, #30
 8002f94:	0409      	lsls	r1, r1, #16
 8002f96:	4339      	orrs	r1, r7
 8002f98:	1b00      	subs	r0, r0, r4
 8002f9a:	281f      	cmp	r0, #31
 8002f9c:	dd1b      	ble.n	8002fd6 <__aeabi_d2f+0xca>
 8002f9e:	2602      	movs	r6, #2
 8002fa0:	4276      	negs	r6, r6
 8002fa2:	1b34      	subs	r4, r6, r4
 8002fa4:	000e      	movs	r6, r1
 8002fa6:	40e6      	lsrs	r6, r4
 8002fa8:	0034      	movs	r4, r6
 8002faa:	2820      	cmp	r0, #32
 8002fac:	d004      	beq.n	8002fb8 <__aeabi_d2f+0xac>
 8002fae:	4817      	ldr	r0, [pc, #92]	@ (800300c <__aeabi_d2f+0x100>)
 8002fb0:	4684      	mov	ip, r0
 8002fb2:	4463      	add	r3, ip
 8002fb4:	4099      	lsls	r1, r3
 8002fb6:	430d      	orrs	r5, r1
 8002fb8:	002b      	movs	r3, r5
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	418b      	sbcs	r3, r1
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	0759      	lsls	r1, r3, #29
 8002fc2:	d015      	beq.n	8002ff0 <__aeabi_d2f+0xe4>
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	2400      	movs	r4, #0
 8002fc8:	4019      	ands	r1, r3
 8002fca:	2904      	cmp	r1, #4
 8002fcc:	d117      	bne.n	8002ffe <__aeabi_d2f+0xf2>
 8002fce:	019b      	lsls	r3, r3, #6
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	b2e0      	uxtb	r0, r4
 8002fd4:	e7b0      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002fd6:	4c0e      	ldr	r4, [pc, #56]	@ (8003010 <__aeabi_d2f+0x104>)
 8002fd8:	191c      	adds	r4, r3, r4
 8002fda:	002b      	movs	r3, r5
 8002fdc:	40a5      	lsls	r5, r4
 8002fde:	40c3      	lsrs	r3, r0
 8002fe0:	40a1      	lsls	r1, r4
 8002fe2:	1e68      	subs	r0, r5, #1
 8002fe4:	4185      	sbcs	r5, r0
 8002fe6:	4329      	orrs	r1, r5
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	2400      	movs	r4, #0
 8002fec:	0759      	lsls	r1, r3, #29
 8002fee:	d1c1      	bne.n	8002f74 <__aeabi_d2f+0x68>
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	e79f      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	b2e0      	uxtb	r0, r4
 8002ffc:	e79c      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002ffe:	3304      	adds	r3, #4
 8003000:	e7e5      	b.n	8002fce <__aeabi_d2f+0xc2>
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	000007fe 	.word	0x000007fe
 8003008:	fffffc80 	.word	0xfffffc80
 800300c:	fffffca2 	.word	0xfffffca2
 8003010:	fffffc82 	.word	0xfffffc82

08003014 <__clzsi2>:
 8003014:	211c      	movs	r1, #28
 8003016:	2301      	movs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	4298      	cmp	r0, r3
 800301c:	d301      	bcc.n	8003022 <__clzsi2+0xe>
 800301e:	0c00      	lsrs	r0, r0, #16
 8003020:	3910      	subs	r1, #16
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	4298      	cmp	r0, r3
 8003026:	d301      	bcc.n	800302c <__clzsi2+0x18>
 8003028:	0a00      	lsrs	r0, r0, #8
 800302a:	3908      	subs	r1, #8
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	4298      	cmp	r0, r3
 8003030:	d301      	bcc.n	8003036 <__clzsi2+0x22>
 8003032:	0900      	lsrs	r0, r0, #4
 8003034:	3904      	subs	r1, #4
 8003036:	a202      	add	r2, pc, #8	@ (adr r2, 8003040 <__clzsi2+0x2c>)
 8003038:	5c10      	ldrb	r0, [r2, r0]
 800303a:	1840      	adds	r0, r0, r1
 800303c:	4770      	bx	lr
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	02020304 	.word	0x02020304
 8003044:	01010101 	.word	0x01010101
	...

08003050 <__clzdi2>:
 8003050:	b510      	push	{r4, lr}
 8003052:	2900      	cmp	r1, #0
 8003054:	d103      	bne.n	800305e <__clzdi2+0xe>
 8003056:	f7ff ffdd 	bl	8003014 <__clzsi2>
 800305a:	3020      	adds	r0, #32
 800305c:	e002      	b.n	8003064 <__clzdi2+0x14>
 800305e:	0008      	movs	r0, r1
 8003060:	f7ff ffd8 	bl	8003014 <__clzsi2>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)

08003068 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b092      	sub	sp, #72	@ 0x48
 800306c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800306e:	f001 fb6d 	bl	800474c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003072:	f000 f8a9 	bl	80031c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003076:	f000 f963 	bl	8003340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800307a:	f000 f92d 	bl	80032d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800307e:	f000 f8eb 	bl	8003258 <MX_I2C1_Init>

  init_oled();
 8003082:	f000 f84d 	bl	8003120 <init_oled>
  init_sensor();
 8003086:	f000 f82f 	bl	80030e8 <init_sensor>

  ssd1306_Fill(Black); // Clear screen
 800308a:	2000      	movs	r0, #0
 800308c:	f001 f900 	bl	8004290 <ssd1306_Fill>
  ssd1306_UpdateScreen(); // Refresh display
 8003090:	f001 f918 	bl	80042c4 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	char uart_buffer[50];
	float spo2 = MAX30100_CalculateSpO2();
 8003094:	f000 ffd8 	bl	8004048 <MAX30100_CalculateSpO2>
 8003098:	1c03      	adds	r3, r0, #0
 800309a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float bpm = MAX30100_CalculateBPM();
 800309c:	f000 ff28 	bl	8003ef0 <MAX30100_CalculateBPM>
 80030a0:	1c03      	adds	r3, r0, #0
 80030a2:	63bb      	str	r3, [r7, #56]	@ 0x38
//	MAX30100_PlotTemperatureToUART(&huart2);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80030a4:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <main+0x78>)
 80030a6:	2140      	movs	r1, #64	@ 0x40
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 fe58 	bl	8004d5e <HAL_GPIO_TogglePin>

	snprintf(uart_buffer, sizeof(uart_buffer), "SpO2: %.3f\r\n", spo2);
 80030ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80030b0:	f7ff fee4 	bl	8002e7c <__aeabi_f2d>
 80030b4:	0002      	movs	r2, r0
 80030b6:	000b      	movs	r3, r1
 80030b8:	490a      	ldr	r1, [pc, #40]	@ (80030e4 <main+0x7c>)
 80030ba:	1d38      	adds	r0, r7, #4
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	000a      	movs	r2, r1
 80030c2:	2132      	movs	r1, #50	@ 0x32
 80030c4:	f004 ffd0 	bl	8008068 <sniprintf>
    update_oled(0,0, uart_buffer);
 80030c8:	1d3b      	adds	r3, r7, #4
 80030ca:	001a      	movs	r2, r3
 80030cc:	2100      	movs	r1, #0
 80030ce:	2000      	movs	r0, #0
 80030d0:	f000 f84a 	bl	8003168 <update_oled>


    HAL_Delay(100);
 80030d4:	2064      	movs	r0, #100	@ 0x64
 80030d6:	f001 fbbf 	bl	8004858 <HAL_Delay>
  {
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	e7da      	b.n	8003094 <main+0x2c>
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	50000400 	.word	0x50000400
 80030e4:	0800a4a8 	.word	0x0800a4a8

080030e8 <init_sensor>:
  }
  /* USER CODE END 3 */
}

void init_sensor(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  MAX30100_Init(&hi2c1, &huart2);
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <init_sensor+0x30>)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <init_sensor+0x34>)
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fbae 	bl	8003854 <MAX30100_Init>
  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_50);
 80030f8:	2000      	movs	r0, #0
 80030fa:	f000 fd27 	bl	8003b4c <MAX30100_SetSpO2SampleRate>
  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_1600);
 80030fe:	2003      	movs	r0, #3
 8003100:	f000 fd4c 	bl	8003b9c <MAX30100_SetLEDPulseWidth>
  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
 8003104:	210f      	movs	r1, #15
 8003106:	200f      	movs	r0, #15
 8003108:	f000 fd70 	bl	8003bec <MAX30100_SetLEDCurrent>
  MAX30100_SetMode(MAX30100_SPO2_MODE);
 800310c:	2003      	movs	r0, #3
 800310e:	f000 fcc5 	bl	8003a9c <MAX30100_SetMode>

}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000244 	.word	0x20000244
 800311c:	200001f0 	.word	0x200001f0

08003120 <init_oled>:

void init_oled(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af02      	add	r7, sp, #8
  ssd1306_Init();
 8003126:	f001 f847 	bl	80041b8 <ssd1306_Init>
  ssd1306_Fill(Black); // Clear screen
 800312a:	2000      	movs	r0, #0
 800312c:	f001 f8b0 	bl	8004290 <ssd1306_Fill>
  ssd1306_SetCursor(10, 5);
 8003130:	2105      	movs	r1, #5
 8003132:	200a      	movs	r0, #10
 8003134:	f001 fa24 	bl	8004580 <ssd1306_SetCursor>
  ssd1306_WriteString("MAX30100 Ready", Font_7x10, White);
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <init_oled+0x40>)
 800313a:	480a      	ldr	r0, [pc, #40]	@ (8003164 <init_oled+0x44>)
 800313c:	2201      	movs	r2, #1
 800313e:	9200      	str	r2, [sp, #0]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f001 f9ef 	bl	8004528 <ssd1306_WriteString>
  ssd1306_UpdateScreen(); // Refresh display
 800314a:	f001 f8bb 	bl	80042c4 <ssd1306_UpdateScreen>
  HAL_Delay(4000);
 800314e:	23fa      	movs	r3, #250	@ 0xfa
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	0018      	movs	r0, r3
 8003154:	f001 fb80 	bl	8004858 <HAL_Delay>
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	0800ae1c 	.word	0x0800ae1c
 8003164:	0800a4b8 	.word	0x0800a4b8

08003168 <update_oled>:

void update_oled(uint8_t x, uint8_t y, char* str)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af02      	add	r7, sp, #8
 800316e:	603a      	str	r2, [r7, #0]
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	1c02      	adds	r2, r0, #0
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	1dbb      	adds	r3, r7, #6
 8003178:	1c0a      	adds	r2, r1, #0
 800317a:	701a      	strb	r2, [r3, #0]
	  ssd1306_SetCursor(x, y);
 800317c:	1dbb      	adds	r3, r7, #6
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	0011      	movs	r1, r2
 8003186:	0018      	movs	r0, r3
 8003188:	f001 f9fa 	bl	8004580 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_7x10, White);
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <update_oled+0x58>)
 800318e:	6838      	ldr	r0, [r7, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	9200      	str	r2, [sp, #0]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f001 f9c5 	bl	8004528 <ssd1306_WriteString>
//	      HAL_Delay(10);
//		  ssd1306_UpdateScreen();
//	  }


	  ssd1306_DrawBitmap(45,26,epd_bitmap_frame_10_delay_0,32,32,White);
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <update_oled+0x5c>)
 80031a0:	2301      	movs	r3, #1
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	2320      	movs	r3, #32
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2320      	movs	r3, #32
 80031aa:	211a      	movs	r1, #26
 80031ac:	202d      	movs	r0, #45	@ 0x2d
 80031ae:	f001 fa01 	bl	80045b4 <ssd1306_DrawBitmap>

	  ssd1306_UpdateScreen();
 80031b2:	f001 f887 	bl	80042c4 <ssd1306_UpdateScreen>
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	0800ae1c 	.word	0x0800ae1c
 80031c4:	0800a5d0 	.word	0x0800a5d0

080031c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b093      	sub	sp, #76	@ 0x4c
 80031cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ce:	2410      	movs	r4, #16
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	0018      	movs	r0, r3
 80031d4:	2338      	movs	r3, #56	@ 0x38
 80031d6:	001a      	movs	r2, r3
 80031d8:	2100      	movs	r1, #0
 80031da:	f004 ffe5 	bl	80081a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031de:	003b      	movs	r3, r7
 80031e0:	0018      	movs	r0, r3
 80031e2:	2310      	movs	r3, #16
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f004 ffde 	bl	80081a8 <memset>

  /** Configure the main internal regulator output voltage
   */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	0018      	movs	r0, r3
 80031f2:	f002 fde3 	bl	8005dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	2202      	movs	r2, #2
 80031fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	0052      	lsls	r2, r2, #1
 8003202:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2240      	movs	r2, #64	@ 0x40
 800320e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003210:	193b      	adds	r3, r7, r4
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003216:	193b      	adds	r3, r7, r4
 8003218:	0018      	movs	r0, r3
 800321a:	f002 fe1b 	bl	8005e54 <HAL_RCC_OscConfig>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d001      	beq.n	8003226 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003222:	f000 f92f 	bl	8003484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8003226:	003b      	movs	r3, r7
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800322c:	003b      	movs	r3, r7
 800322e:	2200      	movs	r2, #0
 8003230:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003232:	003b      	movs	r3, r7
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003238:	003b      	movs	r3, r7
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800323e:	003b      	movs	r3, r7
 8003240:	2100      	movs	r1, #0
 8003242:	0018      	movs	r0, r3
 8003244:	f003 f920 	bl	8006488 <HAL_RCC_ClockConfig>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800324c:	f000 f91a 	bl	8003484 <Error_Handler>
  }
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b013      	add	sp, #76	@ 0x4c
 8003256:	bd90      	pop	{r4, r7, pc}

08003258 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <MX_I2C1_Init+0x74>)
 800325e:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <MX_I2C1_Init+0x78>)
 8003260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003262:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003264:	4a1b      	ldr	r2, [pc, #108]	@ (80032d4 <MX_I2C1_Init+0x7c>)
 8003266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003268:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <MX_I2C1_Init+0x74>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800326e:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003270:	2201      	movs	r2, #1
 8003272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003274:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <MX_I2C1_Init+0x74>)
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003280:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003286:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800328c:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <MX_I2C1_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003292:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <MX_I2C1_Init+0x74>)
 8003294:	0018      	movs	r0, r3
 8003296:	f001 fdbb 	bl	8004e10 <HAL_I2C_Init>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d001      	beq.n	80032a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800329e:	f000 f8f1 	bl	8003484 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032a2:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <MX_I2C1_Init+0x74>)
 80032a4:	2100      	movs	r1, #0
 80032a6:	0018      	movs	r0, r3
 80032a8:	f002 fcf0 	bl	8005c8c <HAL_I2CEx_ConfigAnalogFilter>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d001      	beq.n	80032b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032b0:	f000 f8e8 	bl	8003484 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <MX_I2C1_Init+0x74>)
 80032b6:	2100      	movs	r1, #0
 80032b8:	0018      	movs	r0, r3
 80032ba:	f002 fd33 	bl	8005d24 <HAL_I2CEx_ConfigDigitalFilter>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d001      	beq.n	80032c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032c2:	f000 f8df 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200001f0 	.word	0x200001f0
 80032d0:	40005400 	.word	0x40005400
 80032d4:	00503d58 	.word	0x00503d58

080032d8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032dc:	4b16      	ldr	r3, [pc, #88]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032de:	4a17      	ldr	r2, [pc, #92]	@ (800333c <MX_USART2_UART_Init+0x64>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032e4:	22e1      	movs	r2, #225	@ 0xe1
 80032e6:	0252      	lsls	r2, r2, #9
 80032e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 800331c:	2200      	movs	r2, #0
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <MX_USART2_UART_Init+0x60>)
 8003322:	0018      	movs	r0, r3
 8003324:	f003 fbd4 	bl	8006ad0 <HAL_UART_Init>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d001      	beq.n	8003330 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800332c:	f000 f8aa 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	20000244 	.word	0x20000244
 800333c:	40004400 	.word	0x40004400

08003340 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b08b      	sub	sp, #44	@ 0x2c
 8003344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003346:	2414      	movs	r4, #20
 8003348:	193b      	adds	r3, r7, r4
 800334a:	0018      	movs	r0, r3
 800334c:	2314      	movs	r3, #20
 800334e:	001a      	movs	r2, r3
 8003350:	2100      	movs	r1, #0
 8003352:	f004 ff29 	bl	80081a8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335a:	4b46      	ldr	r3, [pc, #280]	@ (8003474 <MX_GPIO_Init+0x134>)
 800335c:	2104      	movs	r1, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34
 8003362:	4b44      	ldr	r3, [pc, #272]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003366:	2204      	movs	r2, #4
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800336e:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003372:	4b40      	ldr	r3, [pc, #256]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003374:	2120      	movs	r1, #32
 8003376:	430a      	orrs	r2, r1
 8003378:	635a      	str	r2, [r3, #52]	@ 0x34
 800337a:	4b3e      	ldr	r3, [pc, #248]	@ (8003474 <MX_GPIO_Init+0x134>)
 800337c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337e:	2220      	movs	r2, #32
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	4b3b      	ldr	r3, [pc, #236]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	4b3a      	ldr	r3, [pc, #232]	@ (8003474 <MX_GPIO_Init+0x134>)
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34
 8003392:	4b38      	ldr	r3, [pc, #224]	@ (8003474 <MX_GPIO_Init+0x134>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <MX_GPIO_Init+0x134>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a2:	4b34      	ldr	r3, [pc, #208]	@ (8003474 <MX_GPIO_Init+0x134>)
 80033a4:	2102      	movs	r1, #2
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033aa:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <MX_GPIO_Init+0x134>)
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80033b6:	4b30      	ldr	r3, [pc, #192]	@ (8003478 <MX_GPIO_Init+0x138>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	2140      	movs	r1, #64	@ 0x40
 80033bc:	0018      	movs	r0, r3
 80033be:	f001 fcb1 	bl	8004d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80033c2:	4b2e      	ldr	r3, [pc, #184]	@ (800347c <MX_GPIO_Init+0x13c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	2140      	movs	r1, #64	@ 0x40
 80033c8:	0018      	movs	r0, r3
 80033ca:	f001 fcab 	bl	8004d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	2204      	movs	r2, #4
 80033d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033d4:	193b      	adds	r3, r7, r4
 80033d6:	2288      	movs	r2, #136	@ 0x88
 80033d8:	0352      	lsls	r2, r2, #13
 80033da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80033e2:	193b      	adds	r3, r7, r4
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <MX_GPIO_Init+0x140>)
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f001 fb37 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Int__Pin */
  GPIO_InitStruct.Pin = Int__Pin;
 80033ee:	0021      	movs	r1, r4
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	2284      	movs	r2, #132	@ 0x84
 80033fa:	0392      	lsls	r2, r2, #14
 80033fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fe:	000c      	movs	r4, r1
 8003400:	193b      	adds	r3, r7, r4
 8003402:	2201      	movs	r2, #1
 8003404:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Int__GPIO_Port, &GPIO_InitStruct);
 8003406:	193b      	adds	r3, r7, r4
 8003408:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <MX_GPIO_Init+0x13c>)
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f001 fb25 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003412:	193b      	adds	r3, r7, r4
 8003414:	2240      	movs	r2, #64	@ 0x40
 8003416:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003418:	193b      	adds	r3, r7, r4
 800341a:	2201      	movs	r2, #1
 800341c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	193b      	adds	r3, r7, r4
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800342a:	193b      	adds	r3, r7, r4
 800342c:	4a12      	ldr	r2, [pc, #72]	@ (8003478 <MX_GPIO_Init+0x138>)
 800342e:	0019      	movs	r1, r3
 8003430:	0010      	movs	r0, r2
 8003432:	f001 fb13 	bl	8004a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003436:	0021      	movs	r1, r4
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2240      	movs	r2, #64	@ 0x40
 800343c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2201      	movs	r2, #1
 8003442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2200      	movs	r2, #0
 800344e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	187b      	adds	r3, r7, r1
 8003452:	4a0a      	ldr	r2, [pc, #40]	@ (800347c <MX_GPIO_Init+0x13c>)
 8003454:	0019      	movs	r1, r3
 8003456:	0010      	movs	r0, r2
 8003458:	f001 fb00 	bl	8004a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2005      	movs	r0, #5
 8003462:	f001 fac9 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003466:	2005      	movs	r0, #5
 8003468:	f001 fadb 	bl	8004a22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b00b      	add	sp, #44	@ 0x2c
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	50000800 	.word	0x50000800
 800347c:	50000400 	.word	0x50000400
 8003480:	50001400 	.word	0x50001400

08003484 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003488:	b672      	cpsid	i
}
 800348a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	e7fd      	b.n	800348c <Error_Handler+0x8>

08003490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <HAL_MspInit+0x44>)
 8003498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800349a:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <HAL_MspInit+0x44>)
 800349c:	2101      	movs	r1, #1
 800349e:	430a      	orrs	r2, r1
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80034a2:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_MspInit+0x44>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2201      	movs	r2, #1
 80034a8:	4013      	ands	r3, r2
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ae:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_MspInit+0x44>)
 80034b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <HAL_MspInit+0x44>)
 80034b4:	2180      	movs	r1, #128	@ 0x80
 80034b6:	0549      	lsls	r1, r1, #21
 80034b8:	430a      	orrs	r2, r1
 80034ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_MspInit+0x44>)
 80034be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	055b      	lsls	r3, r3, #21
 80034c4:	4013      	ands	r3, r2
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	40021000 	.word	0x40021000

080034d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b095      	sub	sp, #84	@ 0x54
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	233c      	movs	r3, #60	@ 0x3c
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	0018      	movs	r0, r3
 80034e6:	2314      	movs	r3, #20
 80034e8:	001a      	movs	r2, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	f004 fe5c 	bl	80081a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f0:	2414      	movs	r4, #20
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	0018      	movs	r0, r3
 80034f6:	2328      	movs	r3, #40	@ 0x28
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f004 fe54 	bl	80081a8 <memset>
  if(hi2c->Instance==I2C1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_I2C_MspInit+0xbc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d13f      	bne.n	800358a <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800350a:	193b      	adds	r3, r7, r4
 800350c:	2220      	movs	r2, #32
 800350e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003510:	193b      	adds	r3, r7, r4
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003516:	193b      	adds	r3, r7, r4
 8003518:	0018      	movs	r0, r3
 800351a:	f003 f95f 	bl	80067dc <HAL_RCCEx_PeriphCLKConfig>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003522:	f7ff ffaf 	bl	8003484 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	4b1c      	ldr	r3, [pc, #112]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 8003528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352a:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 800352c:	2101      	movs	r1, #1
 800352e:	430a      	orrs	r2, r1
 8003530:	635a      	str	r2, [r3, #52]	@ 0x34
 8003532:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800353e:	213c      	movs	r1, #60	@ 0x3c
 8003540:	187b      	adds	r3, r7, r1
 8003542:	22c0      	movs	r2, #192	@ 0xc0
 8003544:	00d2      	lsls	r2, r2, #3
 8003546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2212      	movs	r2, #18
 800354c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2206      	movs	r2, #6
 800355e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003560:	187a      	adds	r2, r7, r1
 8003562:	23a0      	movs	r3, #160	@ 0xa0
 8003564:	05db      	lsls	r3, r3, #23
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f001 fa77 	bl	8004a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 8003570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	0389      	lsls	r1, r1, #14
 8003578:	430a      	orrs	r2, r1
 800357a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_I2C_MspInit+0xc0>)
 800357e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	039b      	lsls	r3, r3, #14
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b015      	add	sp, #84	@ 0x54
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	40005400 	.word	0x40005400
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b08b      	sub	sp, #44	@ 0x2c
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	2414      	movs	r4, #20
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	0018      	movs	r0, r3
 80035aa:	2314      	movs	r3, #20
 80035ac:	001a      	movs	r2, r3
 80035ae:	2100      	movs	r1, #0
 80035b0:	f004 fdfa 	bl	80081a8 <memset>
  if(huart->Instance==USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003628 <HAL_UART_MspInit+0x8c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d130      	bne.n	8003620 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035be:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035c2:	4b1a      	ldr	r3, [pc, #104]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035c4:	2180      	movs	r1, #128	@ 0x80
 80035c6:	0289      	lsls	r1, r1, #10
 80035c8:	430a      	orrs	r2, r1
 80035ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80035cc:	4b17      	ldr	r3, [pc, #92]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	4b14      	ldr	r3, [pc, #80]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035de:	4b13      	ldr	r3, [pc, #76]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_UART_MspInit+0x90>)
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	2201      	movs	r2, #1
 80035ec:	4013      	ands	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80035f2:	0021      	movs	r1, r4
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	220c      	movs	r2, #12
 80035f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2202      	movs	r2, #2
 80035fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2201      	movs	r2, #1
 8003604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2201      	movs	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003612:	187a      	adds	r2, r7, r1
 8003614:	23a0      	movs	r3, #160	@ 0xa0
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	0011      	movs	r1, r2
 800361a:	0018      	movs	r0, r3
 800361c:	f001 fa1e 	bl	8004a5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b00b      	add	sp, #44	@ 0x2c
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	40004400 	.word	0x40004400
 800362c:	40021000 	.word	0x40021000

08003630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003634:	46c0      	nop			@ (mov r8, r8)
 8003636:	e7fd      	b.n	8003634 <NMI_Handler+0x4>

08003638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	e7fd      	b.n	800363c <HardFault_Handler+0x4>

08003640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003658:	f001 f8e2 	bl	8004820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Int__Pin);
 8003666:	2001      	movs	r0, #1
 8003668:	f001 fb94 	bl	8004d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  MAX30100_InterruptHandler();
 800366c:	f000 f994 	bl	8003998 <MAX30100_InterruptHandler>

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003670:	46c0      	nop			@ (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	af00      	add	r7, sp, #0
  return 1;
 800367a:	2301      	movs	r3, #1
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_kill>:

int _kill(int pid, int sig)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800368c:	f004 fde6 	bl	800825c <__errno>
 8003690:	0003      	movs	r3, r0
 8003692:	2216      	movs	r2, #22
 8003694:	601a      	str	r2, [r3, #0]
  return -1;
 8003696:	2301      	movs	r3, #1
 8003698:	425b      	negs	r3, r3
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_exit>:

void _exit (int status)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036aa:	2301      	movs	r3, #1
 80036ac:	425a      	negs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7ff ffe5 	bl	8003682 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	e7fd      	b.n	80036b8 <_exit+0x16>

080036bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e00a      	b.n	80036e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036ce:	e000      	b.n	80036d2 <_read+0x16>
 80036d0:	bf00      	nop
 80036d2:	0001      	movs	r1, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	60ba      	str	r2, [r7, #8]
 80036da:	b2ca      	uxtb	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dbf0      	blt.n	80036ce <_read+0x12>
  }

  return len;
 80036ec:	687b      	ldr	r3, [r7, #4]
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e009      	b.n	800371c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	0018      	movs	r0, r3
 8003712:	e000      	b.n	8003716 <_write+0x20>
 8003714:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf1      	blt.n	8003708 <_write+0x12>
  }
  return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b006      	add	sp, #24
 800372c:	bd80      	pop	{r7, pc}

0800372e <_close>:

int _close(int file)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003736:	2301      	movs	r3, #1
 8003738:	425b      	negs	r3, r3
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}

08003742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2280      	movs	r2, #128	@ 0x80
 8003750:	0192      	lsls	r2, r2, #6
 8003752:	605a      	str	r2, [r3, #4]
  return 0;
 8003754:	2300      	movs	r3, #0
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}

0800375e <_isatty>:

int _isatty(int file)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003766:	2301      	movs	r3, #1
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003790:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <_sbrk+0x5c>)
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <_sbrk+0x60>)
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800379c:	4b13      	ldr	r3, [pc, #76]	@ (80037ec <_sbrk+0x64>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a4:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <_sbrk+0x64>)
 80037a6:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <_sbrk+0x68>)
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <_sbrk+0x64>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b8:	f004 fd50 	bl	800825c <__errno>
 80037bc:	0003      	movs	r3, r0
 80037be:	220c      	movs	r2, #12
 80037c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	425b      	negs	r3, r3
 80037c6:	e009      	b.n	80037dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ce:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <_sbrk+0x64>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	18d2      	adds	r2, r2, r3
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <_sbrk+0x64>)
 80037d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037da:	68fb      	ldr	r3, [r7, #12]
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b006      	add	sp, #24
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20002000 	.word	0x20002000
 80037e8:	00000400 	.word	0x00000400
 80037ec:	200002d8 	.word	0x200002d8
 80037f0:	200008c0 	.word	0x200008c0

080037f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003800:	480d      	ldr	r0, [pc, #52]	@ (8003838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003802:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003804:	f7ff fff6 	bl	80037f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003808:	480c      	ldr	r0, [pc, #48]	@ (800383c <LoopForever+0x6>)
  ldr r1, =_edata
 800380a:	490d      	ldr	r1, [pc, #52]	@ (8003840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <LoopForever+0xe>)
  movs r3, #0
 800380e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003810:	e002      	b.n	8003818 <LoopCopyDataInit>

08003812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003816:	3304      	adds	r3, #4

08003818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800381a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800381c:	d3f9      	bcc.n	8003812 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381e:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003820:	4c0a      	ldr	r4, [pc, #40]	@ (800384c <LoopForever+0x16>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003824:	e001      	b.n	800382a <LoopFillZerobss>

08003826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003828:	3204      	adds	r2, #4

0800382a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800382a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800382c:	d3fb      	bcc.n	8003826 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800382e:	f004 fd1b 	bl	8008268 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003832:	f7ff fc19 	bl	8003068 <main>

08003836 <LoopForever>:

LoopForever:
  b LoopForever
 8003836:	e7fe      	b.n	8003836 <LoopForever>
  ldr   r0, =_estack
 8003838:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800383c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003840:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003844:	0800b1c0 	.word	0x0800b1c0
  ldr r2, =_sbss
 8003848:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800384c:	200008bc 	.word	0x200008bc

08003850 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003850:	e7fe      	b.n	8003850 <ADC1_IRQHandler>
	...

08003854 <MAX30100_Init>:
uint8_t _max30100_red_current;
uint8_t _max30100_ir_current_prev;
uint8_t _max30100_red_current_prev;
float _max30100_temp;

void MAX30100_Init(I2C_HandleTypeDef *ui2c, UART_HandleTypeDef *uuart){
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	_max30100_ui2c = ui2c;
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <MAX30100_Init+0x28>)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
	_max30100_uuart = uuart;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <MAX30100_Init+0x2c>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]
	MAX30100_Stop();
 800386a:	f000 fb2f 	bl	8003ecc <MAX30100_Stop>
	MAX30100_ClearFIFO();
 800386e:	f000 f9e5 	bl	8003c3c <MAX30100_ClearFIFO>
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	200002e0 	.word	0x200002e0
 8003880:	200002e4 	.word	0x200002e4

08003884 <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t regAddr){
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af02      	add	r7, sp, #8
 800388a:	0002      	movs	r2, r0
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	701a      	strb	r2, [r3, #0]
	uint8_t reg = regAddr, result;
 8003890:	210f      	movs	r1, #15
 8003892:	187b      	adds	r3, r7, r1
 8003894:	1dfa      	adds	r2, r7, #7
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <MAX30100_ReadReg+0x4c>)
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	187a      	adds	r2, r7, r1
 80038a0:	2301      	movs	r3, #1
 80038a2:	425b      	negs	r3, r3
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2301      	movs	r3, #1
 80038a8:	21ae      	movs	r1, #174	@ 0xae
 80038aa:	f001 fb57 	bl	8004f5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, &result, 1, MAX30100_TIMEOUT);
 80038ae:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <MAX30100_ReadReg+0x4c>)
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	240e      	movs	r4, #14
 80038b4:	193a      	adds	r2, r7, r4
 80038b6:	2301      	movs	r3, #1
 80038b8:	425b      	negs	r3, r3
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2301      	movs	r3, #1
 80038be:	21ae      	movs	r1, #174	@ 0xae
 80038c0:	f001 fc76 	bl	80051b0 <HAL_I2C_Master_Receive>
	return result;
 80038c4:	193b      	adds	r3, r7, r4
 80038c6:	781b      	ldrb	r3, [r3, #0]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b005      	add	sp, #20
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	200002e0 	.word	0x200002e0

080038d4 <MAX30100_WriteReg>:

void MAX30100_WriteReg(uint8_t regAddr, uint8_t byte){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	0002      	movs	r2, r0
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	1dbb      	adds	r3, r7, #6
 80038e2:	1c0a      	adds	r2, r1, #0
 80038e4:	701a      	strb	r2, [r3, #0]
	uint8_t reg[2] = { regAddr, byte };
 80038e6:	210c      	movs	r1, #12
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	1dfa      	adds	r2, r7, #7
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	1dba      	adds	r2, r7, #6
 80038f4:	7812      	ldrb	r2, [r2, #0]
 80038f6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, reg, 2, MAX30100_TIMEOUT);
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <MAX30100_WriteReg+0x40>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	187a      	adds	r2, r7, r1
 80038fe:	2301      	movs	r3, #1
 8003900:	425b      	negs	r3, r3
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2302      	movs	r3, #2
 8003906:	21ae      	movs	r1, #174	@ 0xae
 8003908:	f001 fb28 	bl	8004f5c <HAL_I2C_Master_Transmit>
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200002e0 	.word	0x200002e0

08003918 <MAX30100_EnableInterrupt>:

void MAX30100_EnableInterrupt(uint8_t a_full, uint8_t tmp_rdy, uint8_t hr_rdy, uint8_t spo2){
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	0005      	movs	r5, r0
 8003920:	000c      	movs	r4, r1
 8003922:	0010      	movs	r0, r2
 8003924:	0019      	movs	r1, r3
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	1c2a      	adds	r2, r5, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1c22      	adds	r2, r4, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	1d7b      	adds	r3, r7, #5
 8003934:	1c02      	adds	r2, r0, #0
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	1c0a      	adds	r2, r1, #0
 800393c:	701a      	strb	r2, [r3, #0]
	uint8_t itReg = ((a_full & 0x01) << MAX30100_ENB_A_FULL) | ((tmp_rdy & 0x01) << MAX30100_ENB_TMP_RDY) | ((hr_rdy & 0x01) << MAX30100_ENB_HR_RDY) | ((spo2 & 0x01) << MAX30100_ENB_SPO2_RDY);
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	b25a      	sxtb	r2, r3
 8003946:	1dbb      	adds	r3, r7, #6
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	019b      	lsls	r3, r3, #6
 800394c:	b25b      	sxtb	r3, r3
 800394e:	2140      	movs	r1, #64	@ 0x40
 8003950:	400b      	ands	r3, r1
 8003952:	b25b      	sxtb	r3, r3
 8003954:	4313      	orrs	r3, r2
 8003956:	b25a      	sxtb	r2, r3
 8003958:	1d7b      	adds	r3, r7, #5
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	015b      	lsls	r3, r3, #5
 800395e:	b25b      	sxtb	r3, r3
 8003960:	2120      	movs	r1, #32
 8003962:	400b      	ands	r3, r1
 8003964:	b25b      	sxtb	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b25a      	sxtb	r2, r3
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	b25b      	sxtb	r3, r3
 8003972:	2110      	movs	r1, #16
 8003974:	400b      	ands	r3, r1
 8003976:	b25b      	sxtb	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b25a      	sxtb	r2, r3
 800397c:	210f      	movs	r1, #15
 800397e:	187b      	adds	r3, r7, r1
 8003980:	701a      	strb	r2, [r3, #0]
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, itReg);
 8003982:	187b      	adds	r3, r7, r1
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	0019      	movs	r1, r3
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff ffa3 	bl	80038d4 <MAX30100_WriteReg>
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b004      	add	sp, #16
 8003994:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003998 <MAX30100_InterruptHandler>:

void MAX30100_InterruptHandler(void){
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
	uint8_t itReg = MAX30100_ReadReg(MAX30100_INTERRUPT);
 800399e:	1dfc      	adds	r4, r7, #7
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff ff6f 	bl	8003884 <MAX30100_ReadReg>
 80039a6:	0003      	movs	r3, r0
 80039a8:	7023      	strb	r3, [r4, #0]

	if((itReg >> MAX30100_A_FULL) & 0x01){
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	09db      	lsrs	r3, r3, #7
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	001a      	movs	r2, r3
 80039b4:	2301      	movs	r3, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	d01e      	beq.n	80039f8 <MAX30100_InterruptHandler+0x60>
		MAX30100_ReadFIFO();
 80039ba:	f000 f951 	bl	8003c60 <MAX30100_ReadFIFO>
		if(_max30100_mode == MAX30100_HRONLY_MODE)
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <MAX30100_InterruptHandler+0xac>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d107      	bne.n	80039d6 <MAX30100_InterruptHandler+0x3e>
			MAX30100_PlotIrToUART(_max30100_uuart, _max30100_ir_sample, 16);
 80039c6:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <MAX30100_InterruptHandler+0xb0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4920      	ldr	r1, [pc, #128]	@ (8003a4c <MAX30100_InterruptHandler+0xb4>)
 80039cc:	2210      	movs	r2, #16
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fa00 	bl	8003dd4 <MAX30100_PlotIrToUART>
 80039d4:	e00a      	b.n	80039ec <MAX30100_InterruptHandler+0x54>
		else if(_max30100_mode == MAX30100_SPO2_MODE)
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <MAX30100_InterruptHandler+0xac>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d106      	bne.n	80039ec <MAX30100_InterruptHandler+0x54>
			MAX30100_PlotBothToUART(_max30100_uuart, _max30100_red_sample, _max30100_ir_sample, 16);
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <MAX30100_InterruptHandler+0xb0>)
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <MAX30100_InterruptHandler+0xb4>)
 80039e4:	491a      	ldr	r1, [pc, #104]	@ (8003a50 <MAX30100_InterruptHandler+0xb8>)
 80039e6:	2310      	movs	r3, #16
 80039e8:	f000 fa2e 	bl	8003e48 <MAX30100_PlotBothToUART>
		MAX30100_SetMode(_max30100_mode);
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <MAX30100_InterruptHandler+0xac>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f853 	bl	8003a9c <MAX30100_SetMode>
        //MAX30100_PlotIrToUART(_max30100_uuart, _max30100_hr_sample, 16);

	}else if((itReg >> MAX30100_SPO2_RDY) & 0x01){

	}
}
 80039f6:	e021      	b.n	8003a3c <MAX30100_InterruptHandler+0xa4>
	}else if((itReg >> MAX30100_TMP_RDY) & 0x01){
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	001a      	movs	r2, r3
 8003a02:	2301      	movs	r3, #1
 8003a04:	4013      	ands	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <MAX30100_InterruptHandler+0x88>
		_max30100_temp = MAX30100_ReadTemperature();
 8003a08:	f000 f9b0 	bl	8003d6c <MAX30100_ReadTemperature>
 8003a0c:	1c02      	adds	r2, r0, #0
 8003a0e:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <MAX30100_InterruptHandler+0xbc>)
 8003a10:	601a      	str	r2, [r3, #0]
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 8003a12:	2300      	movs	r3, #0
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7ff ff7d 	bl	8003918 <MAX30100_EnableInterrupt>
}
 8003a1e:	e00d      	b.n	8003a3c <MAX30100_InterruptHandler+0xa4>
	}else if((itReg >> MAX30100_HR_RDY) & 0x01){
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	001a      	movs	r2, r3
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d005      	beq.n	8003a3c <MAX30100_InterruptHandler+0xa4>
        _max30100_hr_sample = MAX30100_ReadHeartRate();
 8003a30:	f000 f814 	bl	8003a5c <MAX30100_ReadHeartRate>
 8003a34:	0003      	movs	r3, r0
 8003a36:	001a      	movs	r2, r3
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <MAX30100_InterruptHandler+0xc0>)
 8003a3a:	801a      	strh	r2, [r3, #0]
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b003      	add	sp, #12
 8003a42:	bd90      	pop	{r4, r7, pc}
 8003a44:	200002e8 	.word	0x200002e8
 8003a48:	200002e4 	.word	0x200002e4
 8003a4c:	200002ec 	.word	0x200002ec
 8003a50:	2000030c 	.word	0x2000030c
 8003a54:	20000350 	.word	0x20000350
 8003a58:	200002dc 	.word	0x200002dc

08003a5c <MAX30100_ReadHeartRate>:

uint16_t MAX30100_ReadHeartRate(void) {
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
    uint8_t heartRateHigh = MAX30100_ReadReg(MAX30100_HR_DATA_H);
 8003a62:	1dfc      	adds	r4, r7, #7
 8003a64:	2002      	movs	r0, #2
 8003a66:	f7ff ff0d 	bl	8003884 <MAX30100_ReadReg>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	7023      	strb	r3, [r4, #0]
    uint8_t heartRateLow = MAX30100_ReadReg(MAX30100_HR_DATA_L);
 8003a6e:	1dbc      	adds	r4, r7, #6
 8003a70:	2003      	movs	r0, #3
 8003a72:	f7ff ff07 	bl	8003884 <MAX30100_ReadReg>
 8003a76:	0003      	movs	r3, r0
 8003a78:	7023      	strb	r3, [r4, #0]

    uint16_t heartRate = (heartRateHigh << 8) | heartRateLow;
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	b21a      	sxth	r2, r3
 8003a82:	1dbb      	adds	r3, r7, #6
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b21a      	sxth	r2, r3
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	801a      	strh	r2, [r3, #0]
    return heartRate;
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	881b      	ldrh	r3, [r3, #0]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b003      	add	sp, #12
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <MAX30100_SetMode>:
void MAX30100_SetMode(enum MAX30100_Mode mode){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
	_max30100_mode = mode;
 8003aa8:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <MAX30100_SetMode+0xac>)
 8003aaa:	1dfa      	adds	r2, r7, #7
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	701a      	strb	r2, [r3, #0]
	uint8_t modeReg = (MAX30100_ReadReg(MAX30100_MODE_CONFIG) & ~(0x07)) | ((mode << MAX30100_MODE) & 0x07);
 8003ab0:	2006      	movs	r0, #6
 8003ab2:	f7ff fee7 	bl	8003884 <MAX30100_ReadReg>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	b25b      	sxtb	r3, r3
 8003aba:	2207      	movs	r2, #7
 8003abc:	4393      	bics	r3, r2
 8003abe:	b25a      	sxtb	r2, r3
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	2107      	movs	r1, #7
 8003ac8:	400b      	ands	r3, r1
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b25a      	sxtb	r2, r3
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	187b      	adds	r3, r7, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
	if(mode == MAX30100_SPO2_MODE)
 8003ad6:	1dfb      	adds	r3, r7, #7
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d106      	bne.n	8003aec <MAX30100_SetMode+0x50>
		modeReg |= 0x08;
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	187a      	adds	r2, r7, r1
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	2108      	movs	r1, #8
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e006      	b.n	8003afa <MAX30100_SetMode+0x5e>
	else
		modeReg &= ~0x08;
 8003aec:	220f      	movs	r2, #15
 8003aee:	18bb      	adds	r3, r7, r2
 8003af0:	18ba      	adds	r2, r7, r2
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	2108      	movs	r1, #8
 8003af6:	438a      	bics	r2, r1
 8003af8:	701a      	strb	r2, [r3, #0]
	MAX30100_WriteReg(MAX30100_MODE_CONFIG, modeReg);
 8003afa:	230f      	movs	r3, #15
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	0019      	movs	r1, r3
 8003b02:	2006      	movs	r0, #6
 8003b04:	f7ff fee6 	bl	80038d4 <MAX30100_WriteReg>
	if(_max30100_mode == MAX30100_SPO2_MODE)
 8003b08:	4b0f      	ldr	r3, [pc, #60]	@ (8003b48 <MAX30100_SetMode+0xac>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d106      	bne.n	8003b1e <MAX30100_SetMode+0x82>
		MAX30100_EnableInterrupt(0, 1, 0, 0);
 8003b10:	2300      	movs	r3, #0
 8003b12:	2200      	movs	r2, #0
 8003b14:	2101      	movs	r1, #1
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7ff fefe 	bl	8003918 <MAX30100_EnableInterrupt>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
		MAX30100_EnableInterrupt(1, 0, 0, 0);
	else
		MAX30100_EnableInterrupt(0, 0, 0, 0);
}
 8003b1c:	e010      	b.n	8003b40 <MAX30100_SetMode+0xa4>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <MAX30100_SetMode+0xac>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d106      	bne.n	8003b34 <MAX30100_SetMode+0x98>
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 8003b26:	2300      	movs	r3, #0
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7ff fef3 	bl	8003918 <MAX30100_EnableInterrupt>
}
 8003b32:	e005      	b.n	8003b40 <MAX30100_SetMode+0xa4>
		MAX30100_EnableInterrupt(0, 0, 0, 0);
 8003b34:	2300      	movs	r3, #0
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7ff feec 	bl	8003918 <MAX30100_EnableInterrupt>
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200002e8 	.word	0x200002e8

08003b4c <MAX30100_SetSpO2SampleRate>:
//ok
void MAX30100_SetSpO2SampleRate(enum MAX30100_SpO2SR sr){
 8003b4c:	b5b0      	push	{r4, r5, r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	0002      	movs	r2, r0
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	701a      	strb	r2, [r3, #0]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 8003b58:	250f      	movs	r5, #15
 8003b5a:	197c      	adds	r4, r7, r5
 8003b5c:	2007      	movs	r0, #7
 8003b5e:	f7ff fe91 	bl	8003884 <MAX30100_ReadReg>
 8003b62:	0003      	movs	r3, r0
 8003b64:	7023      	strb	r3, [r4, #0]
	spo2Reg = ((sr << MAX30100_SPO2_SR) & 0x1c) | (spo2Reg & ~0x1c);
 8003b66:	1dfb      	adds	r3, r7, #7
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	221c      	movs	r2, #28
 8003b70:	4013      	ands	r3, r2
 8003b72:	b25a      	sxtb	r2, r3
 8003b74:	197b      	adds	r3, r7, r5
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	211c      	movs	r1, #28
 8003b7c:	438b      	bics	r3, r1
 8003b7e:	b25b      	sxtb	r3, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b25a      	sxtb	r2, r3
 8003b84:	197b      	adds	r3, r7, r5
 8003b86:	701a      	strb	r2, [r3, #0]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8003b88:	197b      	adds	r3, r7, r5
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	2007      	movs	r0, #7
 8003b90:	f7ff fea0 	bl	80038d4 <MAX30100_WriteReg>
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bdb0      	pop	{r4, r5, r7, pc}

08003b9c <MAX30100_SetLEDPulseWidth>:
//ok
void MAX30100_SetLEDPulseWidth(enum MAX30100_LEDPulseWidth pw){
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	1dfb      	adds	r3, r7, #7
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 8003ba8:	250f      	movs	r5, #15
 8003baa:	197c      	adds	r4, r7, r5
 8003bac:	2007      	movs	r0, #7
 8003bae:	f7ff fe69 	bl	8003884 <MAX30100_ReadReg>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	7023      	strb	r3, [r4, #0]
	spo2Reg = ((pw << MAX30100_LED_PW) & 0x03) | (spo2Reg & ~0x03);
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b25a      	sxtb	r2, r3
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	2103      	movs	r1, #3
 8003bca:	438b      	bics	r3, r1
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	b25a      	sxtb	r2, r3
 8003bd2:	197b      	adds	r3, r7, r5
 8003bd4:	701a      	strb	r2, [r3, #0]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	0019      	movs	r1, r3
 8003bdc:	2007      	movs	r0, #7
 8003bde:	f7ff fe79 	bl	80038d4 <MAX30100_WriteReg>
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003bec <MAX30100_SetLEDCurrent>:
void MAX30100_SetLEDCurrent(enum MAX30100_LEDCurrent redpa, enum MAX30100_LEDCurrent irpa){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	1dfb      	adds	r3, r7, #7
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	1dbb      	adds	r3, r7, #6
 8003bfa:	1c0a      	adds	r2, r1, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
	_max30100_red_current = redpa;
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <MAX30100_SetLEDCurrent+0x48>)
 8003c00:	1dfa      	adds	r2, r7, #7
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	701a      	strb	r2, [r3, #0]
	_max30100_ir_current = irpa;
 8003c06:	4b0c      	ldr	r3, [pc, #48]	@ (8003c38 <MAX30100_SetLEDCurrent+0x4c>)
 8003c08:	1dba      	adds	r2, r7, #6
 8003c0a:	7812      	ldrb	r2, [r2, #0]
 8003c0c:	701a      	strb	r2, [r3, #0]
	MAX30100_WriteReg(MAX30100_LED_CONFIG, (redpa << MAX30100_LED_RED_PA) | irpa);
 8003c0e:	1dfb      	adds	r3, r7, #7
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	b25a      	sxtb	r2, r3
 8003c16:	1dbb      	adds	r3, r7, #6
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	0019      	movs	r1, r3
 8003c24:	2009      	movs	r0, #9
 8003c26:	f7ff fe55 	bl	80038d4 <MAX30100_WriteReg>
}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b002      	add	sp, #8
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	2000034d 	.word	0x2000034d
 8003c38:	2000034c 	.word	0x2000034c

08003c3c <MAX30100_ClearFIFO>:

void MAX30100_ClearFIFO(void){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 8003c40:	2100      	movs	r1, #0
 8003c42:	2002      	movs	r0, #2
 8003c44:	f7ff fe46 	bl	80038d4 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2004      	movs	r0, #4
 8003c4c:	f7ff fe42 	bl	80038d4 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00);
 8003c50:	2100      	movs	r1, #0
 8003c52:	2003      	movs	r0, #3
 8003c54:	f7ff fe3e 	bl	80038d4 <MAX30100_WriteReg>
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <MAX30100_ReadFIFO>:
void MAX30100_ReadFIFO(void){
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b095      	sub	sp, #84	@ 0x54
 8003c64:	af02      	add	r7, sp, #8
//	uint8_t fifo_wr_ptr = MAX30100_ReadReg(MAX30100_FIFO_WR_PTR);
//	uint8_t fifo_rd_ptr = MAX30100_ReadReg(MAX30100_FIFO_RD_PTR);
	uint8_t num_sample = 64;//(fifo_wr_ptr - fifo_rd_ptr) * 4;
 8003c66:	2446      	movs	r4, #70	@ 0x46
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	701a      	strb	r2, [r3, #0]
	uint8_t fifo_data[64] = { 0 };
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	3304      	adds	r3, #4
 8003c76:	223c      	movs	r2, #60	@ 0x3c
 8003c78:	2100      	movs	r1, #0
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f004 fa94 	bl	80081a8 <memset>
	uint8_t reg = MAX30100_FIFO_DATA;
 8003c80:	1cfb      	adds	r3, r7, #3
 8003c82:	2205      	movs	r2, #5
 8003c84:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 8003c86:	4b35      	ldr	r3, [pc, #212]	@ (8003d5c <MAX30100_ReadFIFO+0xfc>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	1cfa      	adds	r2, r7, #3
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	425b      	negs	r3, r3
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2301      	movs	r3, #1
 8003c94:	21ae      	movs	r1, #174	@ 0xae
 8003c96:	f001 f961 	bl	8004f5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, fifo_data, num_sample, MAX30100_TIMEOUT);
 8003c9a:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <MAX30100_ReadFIFO+0xfc>)
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b299      	uxth	r1, r3
 8003ca4:	1d3a      	adds	r2, r7, #4
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	425b      	negs	r3, r3
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	000b      	movs	r3, r1
 8003cae:	21ae      	movs	r1, #174	@ 0xae
 8003cb0:	f001 fa7e 	bl	80051b0 <HAL_I2C_Master_Receive>
	for(uint8_t i = 0; i < num_sample; i += 4){
 8003cb4:	2347      	movs	r3, #71	@ 0x47
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e040      	b.n	8003d40 <MAX30100_ReadFIFO+0xe0>
		_max30100_ir_sample[i / 4] = (fifo_data[i] << 8) | fifo_data[i + 1];
 8003cbe:	2447      	movs	r4, #71	@ 0x47
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	1d3a      	adds	r2, r7, #4
 8003cc6:	5cd3      	ldrb	r3, [r2, r3]
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	193b      	adds	r3, r7, r4
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	1d39      	adds	r1, r7, #4
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	b21b      	sxth	r3, r3
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	b219      	sxth	r1, r3
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	b289      	uxth	r1, r1
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <MAX30100_ReadFIFO+0x100>)
 8003cea:	0052      	lsls	r2, r2, #1
 8003cec:	52d1      	strh	r1, [r2, r3]
		_max30100_red_sample[i / 4] = (fifo_data[i + 2] << 8) | fifo_data[i + 3];
 8003cee:	193b      	adds	r3, r7, r4
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	1d3a      	adds	r2, r7, #4
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	3303      	adds	r3, #3
 8003d02:	1d39      	adds	r1, r7, #4
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b219      	sxth	r1, r3
 8003d0c:	193b      	adds	r3, r7, r4
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	001a      	movs	r2, r3
 8003d16:	b289      	uxth	r1, r1
 8003d18:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <MAX30100_ReadFIFO+0x104>)
 8003d1a:	0052      	lsls	r2, r2, #1
 8003d1c:	52d1      	strh	r1, [r2, r3]
		_max30100_time_sample[i / 4] = HAL_GetTick();
 8003d1e:	f000 fd91 	bl	8004844 <HAL_GetTick>
 8003d22:	0001      	movs	r1, r0
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	b289      	uxth	r1, r1
 8003d30:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <MAX30100_ReadFIFO+0x108>)
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < num_sample; i += 4){
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	193a      	adds	r2, r7, r4
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	3204      	adds	r2, #4
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	2347      	movs	r3, #71	@ 0x47
 8003d42:	18fa      	adds	r2, r7, r3
 8003d44:	2346      	movs	r3, #70	@ 0x46
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3b6      	bcc.n	8003cbe <MAX30100_ReadFIFO+0x5e>
	}

}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b013      	add	sp, #76	@ 0x4c
 8003d58:	bd90      	pop	{r4, r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	200002e0 	.word	0x200002e0
 8003d60:	200002ec 	.word	0x200002ec
 8003d64:	2000030c 	.word	0x2000030c
 8003d68:	2000032c 	.word	0x2000032c

08003d6c <MAX30100_ReadTemperature>:

float MAX30100_ReadTemperature(){
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
	int8_t tempInt = (int8_t) MAX30100_ReadReg(MAX30100_TMP_INTEGER);
 8003d72:	2016      	movs	r0, #22
 8003d74:	f7ff fd86 	bl	8003884 <MAX30100_ReadReg>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	701a      	strb	r2, [r3, #0]
	uint8_t tempFrac = MAX30100_ReadReg(MAX30100_TMP_FRACTION);
 8003d80:	1dbc      	adds	r4, r7, #6
 8003d82:	2017      	movs	r0, #23
 8003d84:	f7ff fd7e 	bl	8003884 <MAX30100_ReadReg>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	7023      	strb	r3, [r4, #0]
	return (tempInt + tempFrac / 16.0);
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff f820 	bl	8002dd8 <__aeabi_i2d>
 8003d98:	0004      	movs	r4, r0
 8003d9a:	000d      	movs	r5, r1
 8003d9c:	1dbb      	adds	r3, r7, #6
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff f819 	bl	8002dd8 <__aeabi_i2d>
 8003da6:	2200      	movs	r2, #0
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <MAX30100_ReadTemperature+0x64>)
 8003daa:	f7fd fd0f 	bl	80017cc <__aeabi_ddiv>
 8003dae:	0002      	movs	r2, r0
 8003db0:	000b      	movs	r3, r1
 8003db2:	0020      	movs	r0, r4
 8003db4:	0029      	movs	r1, r5
 8003db6:	f7fd f9a5 	bl	8001104 <__aeabi_dadd>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	000b      	movs	r3, r1
 8003dbe:	0010      	movs	r0, r2
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	f7ff f8a3 	bl	8002f0c <__aeabi_d2f>
 8003dc6:	1c03      	adds	r3, r0, #0
}
 8003dc8:	1c18      	adds	r0, r3, #0
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd0:	40300000 	.word	0x40300000

08003dd4 <MAX30100_PlotIrToUART>:
	char data[15];
	sprintf(data, "temp:%d.%d\n", tempInt, tempFrac);
	HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
}

void MAX30100_PlotIrToUART(UART_HandleTypeDef *uuart, uint16_t *samples, uint8_t sampleSize){
 8003dd4:	b5b0      	push	{r4, r5, r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	701a      	strb	r2, [r3, #0]
	char data[10];
	for(uint8_t i = 0; i< sampleSize; i++){
 8003de2:	231f      	movs	r3, #31
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2200      	movs	r2, #0
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	e01e      	b.n	8003e2a <MAX30100_PlotIrToUART+0x56>
		sprintf(data, "s:%d\n", samples[i]);
 8003dec:	241f      	movs	r4, #31
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	4911      	ldr	r1, [pc, #68]	@ (8003e44 <MAX30100_PlotIrToUART+0x70>)
 8003dfe:	2514      	movs	r5, #20
 8003e00:	197b      	adds	r3, r7, r5
 8003e02:	0018      	movs	r0, r3
 8003e04:	f004 f964 	bl	80080d0 <siprintf>
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
 8003e08:	197b      	adds	r3, r7, r5
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc f97a 	bl	8000104 <strlen>
 8003e10:	0003      	movs	r3, r0
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	2301      	movs	r3, #1
 8003e16:	425b      	negs	r3, r3
 8003e18:	1979      	adds	r1, r7, r5
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f002 feae 	bl	8006b7c <HAL_UART_Transmit>
	for(uint8_t i = 0; i< sampleSize; i++){
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	3201      	adds	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fa      	adds	r2, r7, r3
 8003e2e:	1dfb      	adds	r3, r7, #7
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3d9      	bcc.n	8003dec <MAX30100_PlotIrToUART+0x18>
	}
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b008      	add	sp, #32
 8003e40:	bdb0      	pop	{r4, r5, r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	0800a4d4 	.word	0x0800a4d4

08003e48 <MAX30100_PlotBothToUART>:

void MAX30100_PlotBothToUART(UART_HandleTypeDef *uuart, uint16_t *samplesRed, uint16_t *samplesIr, uint8_t sampleSize){
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b08b      	sub	sp, #44	@ 0x2c
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	001a      	movs	r2, r3
 8003e56:	1cfb      	adds	r3, r7, #3
 8003e58:	701a      	strb	r2, [r3, #0]
	char data[20];
	for(uint8_t i = 0; i< sampleSize; i++){
 8003e5a:	2327      	movs	r3, #39	@ 0x27
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
 8003e62:	e025      	b.n	8003eb0 <MAX30100_PlotBothToUART+0x68>
		sprintf(data, "red:%d\tir:%d\n", samplesRed[i], samplesIr[i]);
 8003e64:	2527      	movs	r5, #39	@ 0x27
 8003e66:	197b      	adds	r3, r7, r5
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	001c      	movs	r4, r3
 8003e74:	197b      	adds	r3, r7, r5
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	4911      	ldr	r1, [pc, #68]	@ (8003ec8 <MAX30100_PlotBothToUART+0x80>)
 8003e82:	2610      	movs	r6, #16
 8003e84:	19b8      	adds	r0, r7, r6
 8003e86:	0022      	movs	r2, r4
 8003e88:	f004 f922 	bl	80080d0 <siprintf>
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
 8003e8c:	0034      	movs	r4, r6
 8003e8e:	193b      	adds	r3, r7, r4
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc f937 	bl	8000104 <strlen>
 8003e96:	0003      	movs	r3, r0
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	1939      	adds	r1, r7, r4
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f002 fe6b 	bl	8006b7c <HAL_UART_Transmit>
	for(uint8_t i = 0; i< sampleSize; i++){
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	197b      	adds	r3, r7, r5
 8003eac:	3201      	adds	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	2327      	movs	r3, #39	@ 0x27
 8003eb2:	18fa      	adds	r2, r7, r3
 8003eb4:	1cfb      	adds	r3, r7, #3
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3d2      	bcc.n	8003e64 <MAX30100_PlotBothToUART+0x1c>
	}
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b00b      	add	sp, #44	@ 0x2c
 8003ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec8:	0800a4dc 	.word	0x0800a4dc

08003ecc <MAX30100_Stop>:

void MAX30100_Stop(void){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	_max30100_mode = MAX30100_IDLE_MODE;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <MAX30100_Stop+0x20>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_0_0, MAX30100_LEDCURRENT_0_0);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7ff fe87 	bl	8003bec <MAX30100_SetLEDCurrent>
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, 0x00);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7ff fcf7 	bl	80038d4 <MAX30100_WriteReg>
}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200002e8 	.word	0x200002e8

08003ef0 <MAX30100_CalculateBPM>:
	MAX30100_SetLEDCurrent(_max30100_red_current_prev, _max30100_ir_current_prev);
	MAX30100_SetMode(_max30100_mode_prev);
}

float MAX30100_CalculateBPM(void)
{
 8003ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef2:	b095      	sub	sp, #84	@ 0x54
 8003ef4:	af04      	add	r7, sp, #16
    char uart_buffer[50];
    static uint32_t high = 0;
    static uint32_t low = 0;

    // Read new FIFO data
    MAX30100_ReadFIFO();
 8003ef6:	f7ff feb3 	bl	8003c60 <MAX30100_ReadFIFO>

    // Peak detection (simple threshold detection)
    if(_max30100_ir_sample[sample_index] > 63000)
 8003efa:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	001a      	movs	r2, r3
 8003f00:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <MAX30100_CalculateBPM+0x134>)
 8003f02:	0052      	lsls	r2, r2, #1
 8003f04:	5ad3      	ldrh	r3, [r2, r3]
 8003f06:	4a48      	ldr	r2, [pc, #288]	@ (8004028 <MAX30100_CalculateBPM+0x138>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d911      	bls.n	8003f30 <MAX30100_CalculateBPM+0x40>
    {
        high = _max30100_time_sample[sample_index];
 8003f0c:	4b44      	ldr	r3, [pc, #272]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	001a      	movs	r2, r3
 8003f12:	4b46      	ldr	r3, [pc, #280]	@ (800402c <MAX30100_CalculateBPM+0x13c>)
 8003f14:	0052      	lsls	r2, r2, #1
 8003f16:	5ad3      	ldrh	r3, [r2, r3]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	4b45      	ldr	r3, [pc, #276]	@ (8004030 <MAX30100_CalculateBPM+0x140>)
 8003f1c:	601a      	str	r2, [r3, #0]
        low = _max30100_time_sample[sample_index - 1];
 8003f1e:	4b40      	ldr	r3, [pc, #256]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	4b41      	ldr	r3, [pc, #260]	@ (800402c <MAX30100_CalculateBPM+0x13c>)
 8003f26:	0052      	lsls	r2, r2, #1
 8003f28:	5ad3      	ldrh	r3, [r2, r3]
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	4b41      	ldr	r3, [pc, #260]	@ (8004034 <MAX30100_CalculateBPM+0x144>)
 8003f2e:	601a      	str	r2, [r3, #0]
    }

    // Calculate time difference
    uint16_t time_diff = high > low ? high - low : low - high;
 8003f30:	4b3f      	ldr	r3, [pc, #252]	@ (8004030 <MAX30100_CalculateBPM+0x140>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b3f      	ldr	r3, [pc, #252]	@ (8004034 <MAX30100_CalculateBPM+0x144>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d908      	bls.n	8003f4e <MAX30100_CalculateBPM+0x5e>
 8003f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004030 <MAX30100_CalculateBPM+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	4b3c      	ldr	r3, [pc, #240]	@ (8004034 <MAX30100_CalculateBPM+0x144>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	e007      	b.n	8003f5e <MAX30100_CalculateBPM+0x6e>
 8003f4e:	4b39      	ldr	r3, [pc, #228]	@ (8004034 <MAX30100_CalculateBPM+0x144>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <MAX30100_CalculateBPM+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	213e      	movs	r1, #62	@ 0x3e
 8003f60:	187a      	adds	r2, r7, r1
 8003f62:	8013      	strh	r3, [r2, #0]

    // Ensure time_diff is not zero to prevent division by zero
    if (time_diff == 0) {
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <MAX30100_CalculateBPM+0x80>
        return 0.0f;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e053      	b.n	8004018 <MAX30100_CalculateBPM+0x128>
    }

    float bpm = 60000.0f / (float)time_diff;
 8003f70:	233e      	movs	r3, #62	@ 0x3e
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fd f882 	bl	8001080 <__aeabi_ui2f>
 8003f7c:	1c03      	adds	r3, r0, #0
 8003f7e:	1c19      	adds	r1, r3, #0
 8003f80:	482d      	ldr	r0, [pc, #180]	@ (8004038 <MAX30100_CalculateBPM+0x148>)
 8003f82:	f7fc fbb5 	bl	80006f0 <__aeabi_fdiv>
 8003f86:	1c03      	adds	r3, r0, #0
 8003f88:	63bb      	str	r3, [r7, #56]	@ 0x38

    sprintf(uart_buffer, "IR Sample[%d]: %d, Time: %d, bpm: %f\r\n", sample_index, _max30100_ir_sample[sample_index], _max30100_time_sample[sample_index], bpm);
 8003f8a:	4b25      	ldr	r3, [pc, #148]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	001d      	movs	r5, r3
 8003f90:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	001a      	movs	r2, r3
 8003f96:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <MAX30100_CalculateBPM+0x134>)
 8003f98:	0052      	lsls	r2, r2, #1
 8003f9a:	5ad3      	ldrh	r3, [r2, r3]
 8003f9c:	001e      	movs	r6, r3
 8003f9e:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	4b21      	ldr	r3, [pc, #132]	@ (800402c <MAX30100_CalculateBPM+0x13c>)
 8003fa6:	0052      	lsls	r2, r2, #1
 8003fa8:	5ad3      	ldrh	r3, [r2, r3]
 8003faa:	001c      	movs	r4, r3
 8003fac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003fae:	f7fe ff65 	bl	8002e7c <__aeabi_f2d>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	000b      	movs	r3, r1
 8003fb6:	4921      	ldr	r1, [pc, #132]	@ (800403c <MAX30100_CalculateBPM+0x14c>)
 8003fb8:	1d38      	adds	r0, r7, #4
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	9400      	str	r4, [sp, #0]
 8003fc0:	0033      	movs	r3, r6
 8003fc2:	002a      	movs	r2, r5
 8003fc4:	f004 f884 	bl	80080d0 <siprintf>
    HAL_UART_Transmit(_max30100_uuart, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <MAX30100_CalculateBPM+0x150>)
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7fc f898 	bl	8000104 <strlen>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	2301      	movs	r3, #1
 8003fda:	425b      	negs	r3, r3
 8003fdc:	1d39      	adds	r1, r7, #4
 8003fde:	0020      	movs	r0, r4
 8003fe0:	f002 fdcc 	bl	8006b7c <HAL_UART_Transmit>


    // Circular buffer update
    sample_index = (sample_index + 1) % 16;
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <MAX30100_CalculateBPM+0x154>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	d504      	bpl.n	8003ffa <MAX30100_CalculateBPM+0x10a>
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	4252      	negs	r2, r2
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <MAX30100_CalculateBPM+0x130>)
 8003ffe:	701a      	strb	r2, [r3, #0]
    return 60000.0f / (float)time_diff;
 8004000:	233e      	movs	r3, #62	@ 0x3e
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	0018      	movs	r0, r3
 8004008:	f7fd f83a 	bl	8001080 <__aeabi_ui2f>
 800400c:	1c03      	adds	r3, r0, #0
 800400e:	1c19      	adds	r1, r3, #0
 8004010:	4809      	ldr	r0, [pc, #36]	@ (8004038 <MAX30100_CalculateBPM+0x148>)
 8004012:	f7fc fb6d 	bl	80006f0 <__aeabi_fdiv>
 8004016:	1c03      	adds	r3, r0, #0
}
 8004018:	1c18      	adds	r0, r3, #0
 800401a:	46bd      	mov	sp, r7
 800401c:	b011      	add	sp, #68	@ 0x44
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004020:	20000354 	.word	0x20000354
 8004024:	200002ec 	.word	0x200002ec
 8004028:	0000f618 	.word	0x0000f618
 800402c:	2000032c 	.word	0x2000032c
 8004030:	20000358 	.word	0x20000358
 8004034:	2000035c 	.word	0x2000035c
 8004038:	476a6000 	.word	0x476a6000
 800403c:	0800a4ec 	.word	0x0800a4ec
 8004040:	200002e4 	.word	0x200002e4
 8004044:	8000000f 	.word	0x8000000f

08004048 <MAX30100_CalculateSpO2>:



float MAX30100_CalculateSpO2(void)
{
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b093      	sub	sp, #76	@ 0x4c
 800404c:	af00      	add	r7, sp, #0
	float ratio, spo2;
    char uart_buffer[50];


    // Read new FIFO data
    MAX30100_ReadFIFO();
 800404e:	f7ff fe07 	bl	8003c60 <MAX30100_ReadFIFO>

    uint32_t sum_ir = 0, sum_red = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	643b      	str	r3, [r7, #64]	@ 0x40
 8004056:	2300      	movs	r3, #0
 8004058:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if(sample_index == 0)
 800405a:	4b32      	ldr	r3, [pc, #200]	@ (8004124 <MAX30100_CalculateSpO2+0xdc>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <MAX30100_CalculateSpO2+0x22>
    {
    	sum_ir = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	643b      	str	r3, [r7, #64]	@ 0x40
    	sum_red = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    sum_ir += _max30100_ir_sample[sample_index];
 800406a:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <MAX30100_CalculateSpO2+0xdc>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	001a      	movs	r2, r3
 8004070:	4b2d      	ldr	r3, [pc, #180]	@ (8004128 <MAX30100_CalculateSpO2+0xe0>)
 8004072:	0052      	lsls	r2, r2, #1
 8004074:	5ad3      	ldrh	r3, [r2, r3]
 8004076:	001a      	movs	r2, r3
 8004078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407a:	189b      	adds	r3, r3, r2
 800407c:	643b      	str	r3, [r7, #64]	@ 0x40
    sum_red += _max30100_red_sample[sample_index];
 800407e:	4b29      	ldr	r3, [pc, #164]	@ (8004124 <MAX30100_CalculateSpO2+0xdc>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	001a      	movs	r2, r3
 8004084:	4b29      	ldr	r3, [pc, #164]	@ (800412c <MAX30100_CalculateSpO2+0xe4>)
 8004086:	0052      	lsls	r2, r2, #1
 8004088:	5ad3      	ldrh	r3, [r2, r3]
 800408a:	001a      	movs	r2, r3
 800408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408e:	189b      	adds	r3, r3, r2
 8004090:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Debug: Print Red and IR sum
//    snprintf(uart_buffer, sizeof(uart_buffer), "Red Sum: %lu, IR Sum: %lu\r\n", sum_red, sum_ir);
//    HAL_UART_Transmit(_max30100_uuart, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);

    if(sum_ir < 30) sum_ir = 0;
 8004092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004094:	2b1d      	cmp	r3, #29
 8004096:	d801      	bhi.n	800409c <MAX30100_CalculateSpO2+0x54>
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	@ 0x40

    // Compute ratio for SpO₂ estimation
    ratio = (float)sum_red / (float)sum_ir;
 800409c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800409e:	f7fc ffef 	bl	8001080 <__aeabi_ui2f>
 80040a2:	1c04      	adds	r4, r0, #0
 80040a4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80040a6:	f7fc ffeb 	bl	8001080 <__aeabi_ui2f>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	1c19      	adds	r1, r3, #0
 80040ae:	1c20      	adds	r0, r4, #0
 80040b0:	f7fc fb1e 	bl	80006f0 <__aeabi_fdiv>
 80040b4:	1c03      	adds	r3, r0, #0
 80040b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    spo2 = 114.0f - (17.0f * ratio);  // Empirical formula
 80040b8:	491d      	ldr	r1, [pc, #116]	@ (8004130 <MAX30100_CalculateSpO2+0xe8>)
 80040ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80040bc:	f7fc fcfe 	bl	8000abc <__aeabi_fmul>
 80040c0:	1c03      	adds	r3, r0, #0
 80040c2:	1c19      	adds	r1, r3, #0
 80040c4:	481b      	ldr	r0, [pc, #108]	@ (8004134 <MAX30100_CalculateSpO2+0xec>)
 80040c6:	f7fc fe37 	bl	8000d38 <__aeabi_fsub>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	647b      	str	r3, [r7, #68]	@ 0x44

    // Clamp values to valid SpO₂ range
    if (spo2 > 100.0f) spo2 = 100.0f;
 80040ce:	491a      	ldr	r1, [pc, #104]	@ (8004138 <MAX30100_CalculateSpO2+0xf0>)
 80040d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80040d2:	f7fc fa0d 	bl	80004f0 <__aeabi_fcmpgt>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d001      	beq.n	80040de <MAX30100_CalculateSpO2+0x96>
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <MAX30100_CalculateSpO2+0xf0>)
 80040dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (spo2 < 70.0f) spo2 = 70.0f;
 80040de:	4917      	ldr	r1, [pc, #92]	@ (800413c <MAX30100_CalculateSpO2+0xf4>)
 80040e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80040e2:	f7fc f9f1 	bl	80004c8 <__aeabi_fcmplt>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d001      	beq.n	80040ee <MAX30100_CalculateSpO2+0xa6>
 80040ea:	4b14      	ldr	r3, [pc, #80]	@ (800413c <MAX30100_CalculateSpO2+0xf4>)
 80040ec:	647b      	str	r3, [r7, #68]	@ 0x44
    // Debug: Print calculated SpO₂
//    snprintf(uart_buffer, sizeof(uart_buffer), "Ratio: %.3f SpO2 Calculated: %.3f\r\n", ratio, spo2);
//    HAL_UART_Transmit(_max30100_uuart, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);

    // Check if sum_ir is valid
    if (sum_ir == 0 || sum_red == 0) return 0.0f;
 80040ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <MAX30100_CalculateSpO2+0xb2>
 80040f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <MAX30100_CalculateSpO2+0xb6>
 80040fa:	2300      	movs	r3, #0
 80040fc:	e00e      	b.n	800411c <MAX30100_CalculateSpO2+0xd4>

    sample_index = (sample_index + 1) % 16;
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <MAX30100_CalculateSpO2+0xdc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a0e      	ldr	r2, [pc, #56]	@ (8004140 <MAX30100_CalculateSpO2+0xf8>)
 8004106:	4013      	ands	r3, r2
 8004108:	d504      	bpl.n	8004114 <MAX30100_CalculateSpO2+0xcc>
 800410a:	3b01      	subs	r3, #1
 800410c:	2210      	movs	r2, #16
 800410e:	4252      	negs	r2, r2
 8004110:	4313      	orrs	r3, r2
 8004112:	3301      	adds	r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <MAX30100_CalculateSpO2+0xdc>)
 8004118:	701a      	strb	r2, [r3, #0]
    return spo2;
 800411a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800411c:	1c18      	adds	r0, r3, #0
 800411e:	46bd      	mov	sp, r7
 8004120:	b013      	add	sp, #76	@ 0x4c
 8004122:	bd90      	pop	{r4, r7, pc}
 8004124:	20000360 	.word	0x20000360
 8004128:	200002ec 	.word	0x200002ec
 800412c:	2000030c 	.word	0x2000030c
 8004130:	41880000 	.word	0x41880000
 8004134:	42e40000 	.word	0x42e40000
 8004138:	42c80000 	.word	0x42c80000
 800413c:	428c0000 	.word	0x428c0000
 8004140:	8000000f 	.word	0x8000000f

08004144 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af04      	add	r7, sp, #16
 8004156:	0002      	movs	r2, r0
 8004158:	1dfb      	adds	r3, r7, #7
 800415a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800415c:	4808      	ldr	r0, [pc, #32]	@ (8004180 <ssd1306_WriteCommand+0x30>)
 800415e:	2301      	movs	r3, #1
 8004160:	425b      	negs	r3, r3
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	2301      	movs	r3, #1
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2301      	movs	r3, #1
 800416e:	2200      	movs	r2, #0
 8004170:	2178      	movs	r1, #120	@ 0x78
 8004172:	f001 f925 	bl	80053c0 <HAL_I2C_Mem_Write>
}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b002      	add	sp, #8
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	200001f0 	.word	0x200001f0

08004184 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af04      	add	r7, sp, #16
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4808      	ldr	r0, [pc, #32]	@ (80041b4 <ssd1306_WriteData+0x30>)
 8004194:	2201      	movs	r2, #1
 8004196:	4252      	negs	r2, r2
 8004198:	9202      	str	r2, [sp, #8]
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2301      	movs	r3, #1
 80041a2:	2240      	movs	r2, #64	@ 0x40
 80041a4:	2178      	movs	r1, #120	@ 0x78
 80041a6:	f001 f90b 	bl	80053c0 <HAL_I2C_Mem_Write>
}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b002      	add	sp, #8
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	200001f0 	.word	0x200001f0

080041b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80041bc:	f7ff ffc2 	bl	8004144 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80041c0:	2064      	movs	r0, #100	@ 0x64
 80041c2:	f000 fb49 	bl	8004858 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80041c6:	2000      	movs	r0, #0
 80041c8:	f000 fa9a 	bl	8004700 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80041cc:	2020      	movs	r0, #32
 80041ce:	f7ff ffbf 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff ffbc 	bl	8004150 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80041d8:	20b0      	movs	r0, #176	@ 0xb0
 80041da:	f7ff ffb9 	bl	8004150 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80041de:	20c8      	movs	r0, #200	@ 0xc8
 80041e0:	f7ff ffb6 	bl	8004150 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7ff ffb3 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80041ea:	2010      	movs	r0, #16
 80041ec:	f7ff ffb0 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80041f0:	2040      	movs	r0, #64	@ 0x40
 80041f2:	f7ff ffad 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80041f6:	20ff      	movs	r0, #255	@ 0xff
 80041f8:	f000 fa6a 	bl	80046d0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80041fc:	20a1      	movs	r0, #161	@ 0xa1
 80041fe:	f7ff ffa7 	bl	8004150 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004202:	20a6      	movs	r0, #166	@ 0xa6
 8004204:	f7ff ffa4 	bl	8004150 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004208:	20a8      	movs	r0, #168	@ 0xa8
 800420a:	f7ff ffa1 	bl	8004150 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800420e:	203f      	movs	r0, #63	@ 0x3f
 8004210:	f7ff ff9e 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004214:	20a4      	movs	r0, #164	@ 0xa4
 8004216:	f7ff ff9b 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800421a:	20d3      	movs	r0, #211	@ 0xd3
 800421c:	f7ff ff98 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004220:	2000      	movs	r0, #0
 8004222:	f7ff ff95 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004226:	20d5      	movs	r0, #213	@ 0xd5
 8004228:	f7ff ff92 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800422c:	20f0      	movs	r0, #240	@ 0xf0
 800422e:	f7ff ff8f 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004232:	20d9      	movs	r0, #217	@ 0xd9
 8004234:	f7ff ff8c 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004238:	2022      	movs	r0, #34	@ 0x22
 800423a:	f7ff ff89 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800423e:	20da      	movs	r0, #218	@ 0xda
 8004240:	f7ff ff86 	bl	8004150 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004244:	2012      	movs	r0, #18
 8004246:	f7ff ff83 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800424a:	20db      	movs	r0, #219	@ 0xdb
 800424c:	f7ff ff80 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004250:	2020      	movs	r0, #32
 8004252:	f7ff ff7d 	bl	8004150 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004256:	208d      	movs	r0, #141	@ 0x8d
 8004258:	f7ff ff7a 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800425c:	2014      	movs	r0, #20
 800425e:	f7ff ff77 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004262:	2001      	movs	r0, #1
 8004264:	f000 fa4c 	bl	8004700 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004268:	2000      	movs	r0, #0
 800426a:	f000 f811 	bl	8004290 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800426e:	f000 f829 	bl	80042c4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <ssd1306_Init+0xd4>)
 8004274:	2200      	movs	r2, #0
 8004276:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <ssd1306_Init+0xd4>)
 800427a:	2200      	movs	r2, #0
 800427c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800427e:	4b03      	ldr	r3, [pc, #12]	@ (800428c <ssd1306_Init+0xd4>)
 8004280:	2201      	movs	r2, #1
 8004282:	711a      	strb	r2, [r3, #4]
}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	20000764 	.word	0x20000764

08004290 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	0002      	movs	r2, r0
 8004298:	1dfb      	adds	r3, r7, #7
 800429a:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <ssd1306_Fill+0x18>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <ssd1306_Fill+0x1a>
 80042a8:	23ff      	movs	r3, #255	@ 0xff
 80042aa:	2280      	movs	r2, #128	@ 0x80
 80042ac:	00d2      	lsls	r2, r2, #3
 80042ae:	4804      	ldr	r0, [pc, #16]	@ (80042c0 <ssd1306_Fill+0x30>)
 80042b0:	0019      	movs	r1, r3
 80042b2:	f003 ff79 	bl	80081a8 <memset>
}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b002      	add	sp, #8
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	20000364 	.word	0x20000364

080042c4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80042ca:	1dfb      	adds	r3, r7, #7
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e01a      	b.n	8004308 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	3b50      	subs	r3, #80	@ 0x50
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	0018      	movs	r0, r3
 80042dc:	f7ff ff38 	bl	8004150 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7ff ff35 	bl	8004150 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80042e6:	2010      	movs	r0, #16
 80042e8:	f7ff ff32 	bl	8004150 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80042ec:	1dfb      	adds	r3, r7, #7
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	01da      	lsls	r2, r3, #7
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <ssd1306_UpdateScreen+0x58>)
 80042f4:	18d3      	adds	r3, r2, r3
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ff43 	bl	8004184 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	1dfb      	adds	r3, r7, #7
 8004304:	3201      	adds	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b07      	cmp	r3, #7
 800430e:	d9e0      	bls.n	80042d2 <ssd1306_UpdateScreen+0xe>
    }
}
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	20000364 	.word	0x20000364

08004320 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	0004      	movs	r4, r0
 8004328:	0008      	movs	r0, r1
 800432a:	0011      	movs	r1, r2
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	1c22      	adds	r2, r4, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	1dbb      	adds	r3, r7, #6
 8004334:	1c02      	adds	r2, r0, #0
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	1d7b      	adds	r3, r7, #5
 800433a:	1c0a      	adds	r2, r1, #0
 800433c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800433e:	1dfb      	adds	r3, r7, #7
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b25b      	sxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	db47      	blt.n	80043d8 <ssd1306_DrawPixel+0xb8>
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b3f      	cmp	r3, #63	@ 0x3f
 800434e:	d843      	bhi.n	80043d8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004350:	1d7b      	adds	r3, r7, #5
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d11e      	bne.n	8004396 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	1dbb      	adds	r3, r7, #6
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	b2d8      	uxtb	r0, r3
 8004364:	0003      	movs	r3, r0
 8004366:	01db      	lsls	r3, r3, #7
 8004368:	18d3      	adds	r3, r2, r3
 800436a:	4a1d      	ldr	r2, [pc, #116]	@ (80043e0 <ssd1306_DrawPixel+0xc0>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	b25a      	sxtb	r2, r3
 8004370:	1dbb      	adds	r3, r7, #6
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2107      	movs	r1, #7
 8004376:	400b      	ands	r3, r1
 8004378:	2101      	movs	r1, #1
 800437a:	4099      	lsls	r1, r3
 800437c:	000b      	movs	r3, r1
 800437e:	b25b      	sxtb	r3, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	b259      	sxtb	r1, r3
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	0003      	movs	r3, r0
 800438a:	01db      	lsls	r3, r3, #7
 800438c:	18d3      	adds	r3, r2, r3
 800438e:	b2c9      	uxtb	r1, r1
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <ssd1306_DrawPixel+0xc0>)
 8004392:	54d1      	strb	r1, [r2, r3]
 8004394:	e021      	b.n	80043da <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004396:	1dfb      	adds	r3, r7, #7
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	1dbb      	adds	r3, r7, #6
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	08db      	lsrs	r3, r3, #3
 80043a0:	b2d8      	uxtb	r0, r3
 80043a2:	0003      	movs	r3, r0
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <ssd1306_DrawPixel+0xc0>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	1dba      	adds	r2, r7, #6
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	2107      	movs	r1, #7
 80043b4:	400a      	ands	r2, r1
 80043b6:	2101      	movs	r1, #1
 80043b8:	4091      	lsls	r1, r2
 80043ba:	000a      	movs	r2, r1
 80043bc:	b252      	sxtb	r2, r2
 80043be:	43d2      	mvns	r2, r2
 80043c0:	b252      	sxtb	r2, r2
 80043c2:	4013      	ands	r3, r2
 80043c4:	b259      	sxtb	r1, r3
 80043c6:	1dfb      	adds	r3, r7, #7
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	0003      	movs	r3, r0
 80043cc:	01db      	lsls	r3, r3, #7
 80043ce:	18d3      	adds	r3, r2, r3
 80043d0:	b2c9      	uxtb	r1, r1
 80043d2:	4a03      	ldr	r2, [pc, #12]	@ (80043e0 <ssd1306_DrawPixel+0xc0>)
 80043d4:	54d1      	strb	r1, [r2, r3]
 80043d6:	e000      	b.n	80043da <ssd1306_DrawPixel+0xba>
        return;
 80043d8:	46c0      	nop			@ (mov r8, r8)
    }
}
 80043da:	46bd      	mov	sp, r7
 80043dc:	b003      	add	sp, #12
 80043de:	bd90      	pop	{r4, r7, pc}
 80043e0:	20000364 	.word	0x20000364

080043e4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	0004      	movs	r4, r0
 80043ec:	0038      	movs	r0, r7
 80043ee:	6001      	str	r1, [r0, #0]
 80043f0:	6042      	str	r2, [r0, #4]
 80043f2:	6083      	str	r3, [r0, #8]
 80043f4:	210f      	movs	r1, #15
 80043f6:	187b      	adds	r3, r7, r1
 80043f8:	1c22      	adds	r2, r4, #0
 80043fa:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80043fc:	000a      	movs	r2, r1
 80043fe:	18bb      	adds	r3, r7, r2
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b1f      	cmp	r3, #31
 8004404:	d903      	bls.n	800440e <ssd1306_WriteChar+0x2a>
 8004406:	18bb      	adds	r3, r7, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b7e      	cmp	r3, #126	@ 0x7e
 800440c:	d901      	bls.n	8004412 <ssd1306_WriteChar+0x2e>
        return 0;
 800440e:	2300      	movs	r3, #0
 8004410:	e084      	b.n	800451c <ssd1306_WriteChar+0x138>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004412:	4b44      	ldr	r3, [pc, #272]	@ (8004524 <ssd1306_WriteChar+0x140>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	001a      	movs	r2, r3
 8004418:	003b      	movs	r3, r7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	18d3      	adds	r3, r2, r3
 800441e:	2b80      	cmp	r3, #128	@ 0x80
 8004420:	dc07      	bgt.n	8004432 <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004422:	4b40      	ldr	r3, [pc, #256]	@ (8004524 <ssd1306_WriteChar+0x140>)
 8004424:	885b      	ldrh	r3, [r3, #2]
 8004426:	001a      	movs	r2, r3
 8004428:	003b      	movs	r3, r7
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	dd01      	ble.n	8004436 <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 8004432:	2300      	movs	r3, #0
 8004434:	e072      	b.n	800451c <ssd1306_WriteChar+0x138>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e051      	b.n	80044e0 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 800443c:	003b      	movs	r3, r7
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	230f      	movs	r3, #15
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	3b20      	subs	r3, #32
 8004448:	0039      	movs	r1, r7
 800444a:	7849      	ldrb	r1, [r1, #1]
 800444c:	434b      	muls	r3, r1
 800444e:	0019      	movs	r1, r3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	18cb      	adds	r3, r1, r3
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	18d3      	adds	r3, r2, r3
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e035      	b.n	80044ce <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	409a      	lsls	r2, r3
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	4013      	ands	r3, r2
 800446e:	d014      	beq.n	800449a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004470:	4b2c      	ldr	r3, [pc, #176]	@ (8004524 <ssd1306_WriteChar+0x140>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b2da      	uxtb	r2, r3
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	b2d8      	uxtb	r0, r3
 800447e:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <ssd1306_WriteChar+0x140>)
 8004480:	885b      	ldrh	r3, [r3, #2]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	18d3      	adds	r3, r2, r3
 800448a:	b2d9      	uxtb	r1, r3
 800448c:	2330      	movs	r3, #48	@ 0x30
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	001a      	movs	r2, r3
 8004494:	f7ff ff44 	bl	8004320 <ssd1306_DrawPixel>
 8004498:	e016      	b.n	80044c8 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800449a:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <ssd1306_WriteChar+0x140>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	b2d8      	uxtb	r0, r3
 80044a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004524 <ssd1306_WriteChar+0x140>)
 80044aa:	885b      	ldrh	r3, [r3, #2]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	b2d9      	uxtb	r1, r3
 80044b6:	2330      	movs	r3, #48	@ 0x30
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	425a      	negs	r2, r3
 80044be:	4153      	adcs	r3, r2
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	001a      	movs	r2, r3
 80044c4:	f7ff ff2c 	bl	8004320 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	003b      	movs	r3, r7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	001a      	movs	r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d3c3      	bcc.n	8004462 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	003b      	movs	r3, r7
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	001a      	movs	r2, r3
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d3a7      	bcc.n	800443c <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80044ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <ssd1306_WriteChar+0x140>)
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	003b      	movs	r3, r7
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <ssd1306_WriteChar+0x126>
 80044f8:	003b      	movs	r3, r7
 80044fa:	6899      	ldr	r1, [r3, #8]
 80044fc:	230f      	movs	r3, #15
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	3b20      	subs	r3, #32
 8004504:	18cb      	adds	r3, r1, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	e001      	b.n	800450e <ssd1306_WriteChar+0x12a>
 800450a:	003b      	movs	r3, r7
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	189b      	adds	r3, r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <ssd1306_WriteChar+0x140>)
 8004514:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004516:	230f      	movs	r3, #15
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	781b      	ldrb	r3, [r3, #0]
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b009      	add	sp, #36	@ 0x24
 8004522:	bd90      	pop	{r4, r7, pc}
 8004524:	20000764 	.word	0x20000764

08004528 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	0038      	movs	r0, r7
 8004532:	6001      	str	r1, [r0, #0]
 8004534:	6042      	str	r2, [r0, #4]
 8004536:	6083      	str	r3, [r0, #8]
    while (*str) {
 8004538:	e017      	b.n	800456a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	7818      	ldrb	r0, [r3, #0]
 800453e:	003b      	movs	r3, r7
 8004540:	2218      	movs	r2, #24
 8004542:	18ba      	adds	r2, r7, r2
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	9200      	str	r2, [sp, #0]
 8004548:	6819      	ldr	r1, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f7ff ff49 	bl	80043e4 <ssd1306_WriteChar>
 8004552:	0003      	movs	r3, r0
 8004554:	001a      	movs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d002      	beq.n	8004564 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	e008      	b.n	8004576 <ssd1306_WriteString+0x4e>
        }
        str++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	781b      	ldrb	r3, [r3, #0]
}
 8004576:	0018      	movs	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	0002      	movs	r2, r0
 8004588:	1dfb      	adds	r3, r7, #7
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	1dbb      	adds	r3, r7, #6
 800458e:	1c0a      	adds	r2, r1, #0
 8004590:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b29a      	uxth	r2, r3
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <ssd1306_SetCursor+0x30>)
 800459a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <ssd1306_SetCursor+0x30>)
 80045a4:	805a      	strh	r2, [r3, #2]
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	20000764 	.word	0x20000764

080045b4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	0004      	movs	r4, r0
 80045bc:	0008      	movs	r0, r1
 80045be:	603a      	str	r2, [r7, #0]
 80045c0:	0019      	movs	r1, r3
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	1c22      	adds	r2, r4, #0
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	1c02      	adds	r2, r0, #0
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	1d7b      	adds	r3, r7, #5
 80045d0:	1c0a      	adds	r2, r1, #0
 80045d2:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80045d4:	1d7b      	adds	r3, r7, #5
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	3307      	adds	r3, #7
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da00      	bge.n	80045e0 <ssd1306_DrawBitmap+0x2c>
 80045de:	3307      	adds	r3, #7
 80045e0:	10db      	asrs	r3, r3, #3
 80045e2:	001a      	movs	r2, r3
 80045e4:	230a      	movs	r3, #10
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 80045ea:	230f      	movs	r3, #15
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	2200      	movs	r2, #0
 80045f0:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db65      	blt.n	80046c8 <ssd1306_DrawBitmap+0x114>
 80045fc:	1dbb      	adds	r3, r7, #6
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b3f      	cmp	r3, #63	@ 0x3f
 8004602:	d861      	bhi.n	80046c8 <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004604:	230e      	movs	r3, #14
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e053      	b.n	80046b6 <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 800460e:	230d      	movs	r3, #13
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e03c      	b.n	8004692 <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 8004618:	230d      	movs	r3, #13
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	d006      	beq.n	8004632 <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8004624:	230f      	movs	r3, #15
 8004626:	18fa      	adds	r2, r7, r3
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	18db      	adds	r3, r3, r3
 800462e:	7013      	strb	r3, [r2, #0]
 8004630:	e014      	b.n	800465c <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004632:	230e      	movs	r3, #14
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	220a      	movs	r2, #10
 800463a:	18ba      	adds	r2, r7, r2
 800463c:	2100      	movs	r1, #0
 800463e:	5e52      	ldrsh	r2, [r2, r1]
 8004640:	4353      	muls	r3, r2
 8004642:	220d      	movs	r2, #13
 8004644:	18ba      	adds	r2, r7, r2
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	08d2      	lsrs	r2, r2, #3
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	189b      	adds	r3, r3, r2
 800464e:	001a      	movs	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	189a      	adds	r2, r3, r2
 8004654:	230f      	movs	r3, #15
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 800465c:	230f      	movs	r3, #15
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b25b      	sxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	da0e      	bge.n	8004686 <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 8004668:	1dfa      	adds	r2, r7, #7
 800466a:	230d      	movs	r3, #13
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	18d3      	adds	r3, r2, r3
 8004674:	b2d8      	uxtb	r0, r3
 8004676:	2324      	movs	r3, #36	@ 0x24
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	1dbb      	adds	r3, r7, #6
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	0019      	movs	r1, r3
 8004682:	f7ff fe4d 	bl	8004320 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004686:	210d      	movs	r1, #13
 8004688:	187b      	adds	r3, r7, r1
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	187b      	adds	r3, r7, r1
 800468e:	3201      	adds	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	230d      	movs	r3, #13
 8004694:	18fa      	adds	r2, r7, r3
 8004696:	1d7b      	adds	r3, r7, #5
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d3bb      	bcc.n	8004618 <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 80046a0:	210e      	movs	r1, #14
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	3201      	adds	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	1dbb      	adds	r3, r7, #6
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	1dbb      	adds	r3, r7, #6
 80046b2:	3201      	adds	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	230e      	movs	r3, #14
 80046b8:	18fa      	adds	r2, r7, r3
 80046ba:	2320      	movs	r3, #32
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	7812      	ldrb	r2, [r2, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3a3      	bcc.n	800460e <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 80046c6:	e000      	b.n	80046ca <ssd1306_DrawBitmap+0x116>
        return;
 80046c8:	46c0      	nop			@ (mov r8, r8)
}
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b005      	add	sp, #20
 80046ce:	bd90      	pop	{r4, r7, pc}

080046d0 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	0002      	movs	r2, r0
 80046d8:	1dfb      	adds	r3, r7, #7
 80046da:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80046dc:	210f      	movs	r1, #15
 80046de:	187b      	adds	r3, r7, r1
 80046e0:	2281      	movs	r2, #129	@ 0x81
 80046e2:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80046e4:	187b      	adds	r3, r7, r1
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff fd31 	bl	8004150 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80046ee:	1dfb      	adds	r3, r7, #7
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7ff fd2c 	bl	8004150 <ssd1306_WriteCommand>
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b004      	add	sp, #16
 80046fe:	bd80      	pop	{r7, pc}

08004700 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	0002      	movs	r2, r0
 8004708:	1dfb      	adds	r3, r7, #7
 800470a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800470c:	1dfb      	adds	r3, r7, #7
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8004714:	230f      	movs	r3, #15
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	22af      	movs	r2, #175	@ 0xaf
 800471a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800471c:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <ssd1306_SetDisplayOn+0x48>)
 800471e:	2201      	movs	r2, #1
 8004720:	715a      	strb	r2, [r3, #5]
 8004722:	e006      	b.n	8004732 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8004724:	230f      	movs	r3, #15
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	22ae      	movs	r2, #174	@ 0xae
 800472a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <ssd1306_SetDisplayOn+0x48>)
 800472e:	2200      	movs	r2, #0
 8004730:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004732:	230f      	movs	r3, #15
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff fd09 	bl	8004150 <ssd1306_WriteCommand>
}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	20000764 	.word	0x20000764

0800474c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <HAL_Init+0x3c>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <HAL_Init+0x3c>)
 800475e:	2180      	movs	r1, #128	@ 0x80
 8004760:	0049      	lsls	r1, r1, #1
 8004762:	430a      	orrs	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004766:	2000      	movs	r0, #0
 8004768:	f000 f810 	bl	800478c <HAL_InitTick>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d003      	beq.n	8004778 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e001      	b.n	800477c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004778:	f7fe fe8a 	bl	8003490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	781b      	ldrb	r3, [r3, #0]
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40022000 	.word	0x40022000

0800478c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004794:	230f      	movs	r3, #15
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800479c:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <HAL_InitTick+0x88>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02b      	beq.n	80047fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80047a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <HAL_InitTick+0x8c>)
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <HAL_InitTick+0x88>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	0019      	movs	r1, r3
 80047ae:	23fa      	movs	r3, #250	@ 0xfa
 80047b0:	0098      	lsls	r0, r3, #2
 80047b2:	f7fb fcc3 	bl	800013c <__udivsi3>
 80047b6:	0003      	movs	r3, r0
 80047b8:	0019      	movs	r1, r3
 80047ba:	0020      	movs	r0, r4
 80047bc:	f7fb fcbe 	bl	800013c <__udivsi3>
 80047c0:	0003      	movs	r3, r0
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 f93d 	bl	8004a42 <HAL_SYSTICK_Config>
 80047c8:	1e03      	subs	r3, r0, #0
 80047ca:	d112      	bne.n	80047f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d80a      	bhi.n	80047e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	2301      	movs	r3, #1
 80047d6:	425b      	negs	r3, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	0018      	movs	r0, r3
 80047dc:	f000 f90c 	bl	80049f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047e0:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <HAL_InitTick+0x90>)
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00d      	b.n	8004804 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80047e8:	230f      	movs	r3, #15
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e008      	b.n	8004804 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e003      	b.n	8004804 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047fc:	230f      	movs	r3, #15
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004804:	230f      	movs	r3, #15
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b005      	add	sp, #20
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	20000008 	.word	0x20000008
 8004818:	20000000 	.word	0x20000000
 800481c:	20000004 	.word	0x20000004

08004820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <HAL_IncTick+0x1c>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	001a      	movs	r2, r3
 800482a:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_IncTick+0x20>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	18d2      	adds	r2, r2, r3
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_IncTick+0x20>)
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	46c0      	nop			@ (mov r8, r8)
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	20000008 	.word	0x20000008
 8004840:	2000076c 	.word	0x2000076c

08004844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  return uwTick;
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <HAL_GetTick+0x10>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	2000076c 	.word	0x2000076c

08004858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff fff0 	bl	8004844 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	d005      	beq.n	800487e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <HAL_Delay+0x44>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	001a      	movs	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	189b      	adds	r3, r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	f7ff ffe0 	bl	8004844 <HAL_GetTick>
 8004884:	0002      	movs	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	429a      	cmp	r2, r3
 800488e:	d8f7      	bhi.n	8004880 <HAL_Delay+0x28>
  {
  }
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b004      	add	sp, #16
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	20000008 	.word	0x20000008

080048a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	0002      	movs	r2, r0
 80048a8:	1dfb      	adds	r3, r7, #7
 80048aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048ac:	1dfb      	adds	r3, r7, #7
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048b2:	d809      	bhi.n	80048c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b4:	1dfb      	adds	r3, r7, #7
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	001a      	movs	r2, r3
 80048ba:	231f      	movs	r3, #31
 80048bc:	401a      	ands	r2, r3
 80048be:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <__NVIC_EnableIRQ+0x30>)
 80048c0:	2101      	movs	r1, #1
 80048c2:	4091      	lsls	r1, r2
 80048c4:	000a      	movs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	e000e100 	.word	0xe000e100

080048d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	0002      	movs	r2, r0
 80048dc:	6039      	str	r1, [r7, #0]
 80048de:	1dfb      	adds	r3, r7, #7
 80048e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048e8:	d828      	bhi.n	800493c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80048ea:	4a2f      	ldr	r2, [pc, #188]	@ (80049a8 <__NVIC_SetPriority+0xd4>)
 80048ec:	1dfb      	adds	r3, r7, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	33c0      	adds	r3, #192	@ 0xc0
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	589b      	ldr	r3, [r3, r2]
 80048fa:	1dfa      	adds	r2, r7, #7
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	0011      	movs	r1, r2
 8004900:	2203      	movs	r2, #3
 8004902:	400a      	ands	r2, r1
 8004904:	00d2      	lsls	r2, r2, #3
 8004906:	21ff      	movs	r1, #255	@ 0xff
 8004908:	4091      	lsls	r1, r2
 800490a:	000a      	movs	r2, r1
 800490c:	43d2      	mvns	r2, r2
 800490e:	401a      	ands	r2, r3
 8004910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	22ff      	movs	r2, #255	@ 0xff
 8004918:	401a      	ands	r2, r3
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	0018      	movs	r0, r3
 8004920:	2303      	movs	r3, #3
 8004922:	4003      	ands	r3, r0
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004928:	481f      	ldr	r0, [pc, #124]	@ (80049a8 <__NVIC_SetPriority+0xd4>)
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b25b      	sxtb	r3, r3
 8004930:	089b      	lsrs	r3, r3, #2
 8004932:	430a      	orrs	r2, r1
 8004934:	33c0      	adds	r3, #192	@ 0xc0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800493a:	e031      	b.n	80049a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <__NVIC_SetPriority+0xd8>)
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	0019      	movs	r1, r3
 8004944:	230f      	movs	r3, #15
 8004946:	400b      	ands	r3, r1
 8004948:	3b08      	subs	r3, #8
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3306      	adds	r3, #6
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	18d3      	adds	r3, r2, r3
 8004952:	3304      	adds	r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1dfa      	adds	r2, r7, #7
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	0011      	movs	r1, r2
 800495c:	2203      	movs	r2, #3
 800495e:	400a      	ands	r2, r1
 8004960:	00d2      	lsls	r2, r2, #3
 8004962:	21ff      	movs	r1, #255	@ 0xff
 8004964:	4091      	lsls	r1, r2
 8004966:	000a      	movs	r2, r1
 8004968:	43d2      	mvns	r2, r2
 800496a:	401a      	ands	r2, r3
 800496c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	22ff      	movs	r2, #255	@ 0xff
 8004974:	401a      	ands	r2, r3
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	0018      	movs	r0, r3
 800497c:	2303      	movs	r3, #3
 800497e:	4003      	ands	r3, r0
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004984:	4809      	ldr	r0, [pc, #36]	@ (80049ac <__NVIC_SetPriority+0xd8>)
 8004986:	1dfb      	adds	r3, r7, #7
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	001c      	movs	r4, r3
 800498c:	230f      	movs	r3, #15
 800498e:	4023      	ands	r3, r4
 8004990:	3b08      	subs	r3, #8
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	430a      	orrs	r2, r1
 8004996:	3306      	adds	r3, #6
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	18c3      	adds	r3, r0, r3
 800499c:	3304      	adds	r3, #4
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b003      	add	sp, #12
 80049a6:	bd90      	pop	{r4, r7, pc}
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	1e5a      	subs	r2, r3, #1
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	045b      	lsls	r3, r3, #17
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d301      	bcc.n	80049c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049c4:	2301      	movs	r3, #1
 80049c6:	e010      	b.n	80049ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <SysTick_Config+0x44>)
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	3a01      	subs	r2, #1
 80049ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049d0:	2301      	movs	r3, #1
 80049d2:	425b      	negs	r3, r3
 80049d4:	2103      	movs	r1, #3
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7ff ff7c 	bl	80048d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <SysTick_Config+0x44>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049e2:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <SysTick_Config+0x44>)
 80049e4:	2207      	movs	r2, #7
 80049e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	e000e010 	.word	0xe000e010

080049f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	210f      	movs	r1, #15
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	1c02      	adds	r2, r0, #0
 8004a08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	0011      	movs	r1, r2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7ff ff5d 	bl	80048d4 <__NVIC_SetPriority>
}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b004      	add	sp, #16
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	0002      	movs	r2, r0
 8004a2a:	1dfb      	adds	r3, r7, #7
 8004a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a2e:	1dfb      	adds	r3, r7, #7
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b25b      	sxtb	r3, r3
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7ff ff33 	bl	80048a0 <__NVIC_EnableIRQ>
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff ffaf 	bl	80049b0 <SysTick_Config>
 8004a52:	0003      	movs	r3, r0
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a6a:	e147      	b.n	8004cfc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4091      	lsls	r1, r2
 8004a76:	000a      	movs	r2, r1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d100      	bne.n	8004a84 <HAL_GPIO_Init+0x28>
 8004a82:	e138      	b.n	8004cf6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d005      	beq.n	8004a9c <HAL_GPIO_Init+0x40>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d130      	bne.n	8004afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	43da      	mvns	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	409a      	lsls	r2, r3
 8004abe:	0013      	movs	r3, r2
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	0013      	movs	r3, r2
 8004ada:	43da      	mvns	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	2201      	movs	r2, #1
 8004aea:	401a      	ands	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	409a      	lsls	r2, r3
 8004af0:	0013      	movs	r3, r2
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2203      	movs	r2, #3
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d017      	beq.n	8004b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	409a      	lsls	r2, r3
 8004b18:	0013      	movs	r3, r2
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	0013      	movs	r3, r2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d123      	bne.n	8004b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	08da      	lsrs	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3208      	adds	r2, #8
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	58d3      	ldr	r3, [r2, r3]
 8004b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2207      	movs	r2, #7
 8004b58:	4013      	ands	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	220f      	movs	r2, #15
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	0013      	movs	r3, r2
 8004b62:	43da      	mvns	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4013      	ands	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2107      	movs	r1, #7
 8004b72:	400b      	ands	r3, r1
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	409a      	lsls	r2, r3
 8004b78:	0013      	movs	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	08da      	lsrs	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3208      	adds	r2, #8
 8004b88:	0092      	lsls	r2, r2, #2
 8004b8a:	6939      	ldr	r1, [r7, #16]
 8004b8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	2203      	movs	r2, #3
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	401a      	ands	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	23c0      	movs	r3, #192	@ 0xc0
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d100      	bne.n	8004bd0 <HAL_GPIO_Init+0x174>
 8004bce:	e092      	b.n	8004cf6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004bd0:	4a50      	ldr	r2, [pc, #320]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3318      	adds	r3, #24
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	589b      	ldr	r3, [r3, r2]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4013      	ands	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	220f      	movs	r2, #15
 8004be8:	409a      	lsls	r2, r3
 8004bea:	0013      	movs	r3, r2
 8004bec:	43da      	mvns	r2, r3
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	23a0      	movs	r3, #160	@ 0xa0
 8004bf8:	05db      	lsls	r3, r3, #23
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d013      	beq.n	8004c26 <HAL_GPIO_Init+0x1ca>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a45      	ldr	r2, [pc, #276]	@ (8004d18 <HAL_GPIO_Init+0x2bc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00d      	beq.n	8004c22 <HAL_GPIO_Init+0x1c6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a44      	ldr	r2, [pc, #272]	@ (8004d1c <HAL_GPIO_Init+0x2c0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <HAL_GPIO_Init+0x1c2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a43      	ldr	r2, [pc, #268]	@ (8004d20 <HAL_GPIO_Init+0x2c4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_GPIO_Init+0x1be>
 8004c16:	2303      	movs	r3, #3
 8004c18:	e006      	b.n	8004c28 <HAL_GPIO_Init+0x1cc>
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	e004      	b.n	8004c28 <HAL_GPIO_Init+0x1cc>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e002      	b.n	8004c28 <HAL_GPIO_Init+0x1cc>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_GPIO_Init+0x1cc>
 8004c26:	2300      	movs	r3, #0
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	400a      	ands	r2, r1
 8004c2e:	00d2      	lsls	r2, r2, #3
 8004c30:	4093      	lsls	r3, r2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c38:	4936      	ldr	r1, [pc, #216]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	3318      	adds	r3, #24
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c46:	4b33      	ldr	r3, [pc, #204]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	2380      	movs	r3, #128	@ 0x80
 8004c5c:	035b      	lsls	r3, r3, #13
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	2380      	movs	r3, #128	@ 0x80
 8004c86:	039b      	lsls	r3, r3, #14
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c94:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004c9c:	2384      	movs	r3, #132	@ 0x84
 8004c9e:	58d3      	ldr	r3, [r2, r3]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43da      	mvns	r2, r3
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	029b      	lsls	r3, r3, #10
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cc0:	4914      	ldr	r1, [pc, #80]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004cc2:	2284      	movs	r2, #132	@ 0x84
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004cc8:	4a12      	ldr	r2, [pc, #72]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004cca:	2380      	movs	r3, #128	@ 0x80
 8004ccc:	58d3      	ldr	r3, [r2, r3]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	025b      	lsls	r3, r3, #9
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cee:	4909      	ldr	r1, [pc, #36]	@ (8004d14 <HAL_GPIO_Init+0x2b8>)
 8004cf0:	2280      	movs	r2, #128	@ 0x80
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	40da      	lsrs	r2, r3
 8004d04:	1e13      	subs	r3, r2, #0
 8004d06:	d000      	beq.n	8004d0a <HAL_GPIO_Init+0x2ae>
 8004d08:	e6b0      	b.n	8004a6c <HAL_GPIO_Init+0x10>
  }
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b006      	add	sp, #24
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021800 	.word	0x40021800
 8004d18:	50000400 	.word	0x50000400
 8004d1c:	50000800 	.word	0x50000800
 8004d20:	50000c00 	.word	0x50000c00

08004d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	0008      	movs	r0, r1
 8004d2e:	0011      	movs	r1, r2
 8004d30:	1cbb      	adds	r3, r7, #2
 8004d32:	1c02      	adds	r2, r0, #0
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	1c7b      	adds	r3, r7, #1
 8004d38:	1c0a      	adds	r2, r1, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d3c:	1c7b      	adds	r3, r7, #1
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d44:	1cbb      	adds	r3, r7, #2
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d4c:	e003      	b.n	8004d56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d4e:	1cbb      	adds	r3, r7, #2
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	000a      	movs	r2, r1
 8004d68:	1cbb      	adds	r3, r7, #2
 8004d6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d72:	1cbb      	adds	r3, r7, #2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	041a      	lsls	r2, r3, #16
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	1cb9      	adds	r1, r7, #2
 8004d82:	8809      	ldrh	r1, [r1, #0]
 8004d84:	400b      	ands	r3, r1
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	619a      	str	r2, [r3, #24]
}
 8004d8c:	46c0      	nop			@ (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	1dbb      	adds	r3, r7, #6
 8004d9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	1dba      	adds	r2, r7, #6
 8004da6:	8812      	ldrh	r2, [r2, #0]
 8004da8:	4013      	ands	r3, r2
 8004daa:	d008      	beq.n	8004dbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004dac:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004dae:	1dba      	adds	r2, r7, #6
 8004db0:	8812      	ldrh	r2, [r2, #0]
 8004db2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004db4:	1dbb      	adds	r3, r7, #6
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f000 f815 	bl	8004de8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	1dba      	adds	r2, r7, #6
 8004dc4:	8812      	ldrh	r2, [r2, #0]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d008      	beq.n	8004ddc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004dcc:	1dba      	adds	r2, r7, #6
 8004dce:	8812      	ldrh	r2, [r2, #0]
 8004dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004dd2:	1dbb      	adds	r3, r7, #6
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 f810 	bl	8004dfc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021800 	.word	0x40021800

08004de8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	0002      	movs	r2, r0
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	0002      	movs	r2, r0
 8004e04:	1dbb      	adds	r3, r7, #6
 8004e06:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004e08:	46c0      	nop			@ (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e08f      	b.n	8004f42 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2241      	movs	r2, #65	@ 0x41
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2240      	movs	r2, #64	@ 0x40
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7fe fb4d 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2241      	movs	r2, #65	@ 0x41
 8004e42:	2124      	movs	r1, #36	@ 0x24
 8004e44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	438a      	bics	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	493b      	ldr	r1, [pc, #236]	@ (8004f4c <HAL_I2C_Init+0x13c>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4938      	ldr	r1, [pc, #224]	@ (8004f50 <HAL_I2C_Init+0x140>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	@ 0x80
 8004e86:	0209      	lsls	r1, r1, #8
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	e007      	b.n	8004e9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2184      	movs	r1, #132	@ 0x84
 8004e98:	0209      	lsls	r1, r1, #8
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d109      	bne.n	8004eba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2180      	movs	r1, #128	@ 0x80
 8004eb2:	0109      	lsls	r1, r1, #4
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	e007      	b.n	8004eca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4923      	ldr	r1, [pc, #140]	@ (8004f54 <HAL_I2C_Init+0x144>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4920      	ldr	r1, [pc, #128]	@ (8004f58 <HAL_I2C_Init+0x148>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	491a      	ldr	r1, [pc, #104]	@ (8004f50 <HAL_I2C_Init+0x140>)
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69d9      	ldr	r1, [r3, #28]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2101      	movs	r1, #1
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2241      	movs	r2, #65	@ 0x41
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2242      	movs	r2, #66	@ 0x42
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b002      	add	sp, #8
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	f0ffffff 	.word	0xf0ffffff
 8004f50:	ffff7fff 	.word	0xffff7fff
 8004f54:	fffff7ff 	.word	0xfffff7ff
 8004f58:	02008000 	.word	0x02008000

08004f5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b089      	sub	sp, #36	@ 0x24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	0008      	movs	r0, r1
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	0019      	movs	r1, r3
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	1c02      	adds	r2, r0, #0
 8004f70:	801a      	strh	r2, [r3, #0]
 8004f72:	2308      	movs	r3, #8
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	1c0a      	adds	r2, r1, #0
 8004f78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2241      	movs	r2, #65	@ 0x41
 8004f7e:	5c9b      	ldrb	r3, [r3, r2]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d000      	beq.n	8004f88 <HAL_I2C_Master_Transmit+0x2c>
 8004f86:	e10a      	b.n	800519e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	5c9b      	ldrb	r3, [r3, r2]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_I2C_Master_Transmit+0x3a>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e104      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2240      	movs	r2, #64	@ 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f9e:	f7ff fc51 	bl	8004844 <HAL_GetTick>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	0219      	lsls	r1, r3, #8
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2319      	movs	r3, #25
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f000 fbb8 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	1e03      	subs	r3, r0, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0ef      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2241      	movs	r2, #65	@ 0x41
 8004fc4:	2121      	movs	r1, #33	@ 0x21
 8004fc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2242      	movs	r2, #66	@ 0x42
 8004fcc:	2110      	movs	r1, #16
 8004fce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	18ba      	adds	r2, r7, r2
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2bff      	cmp	r3, #255	@ 0xff
 8004ff4:	d906      	bls.n	8005004 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	045b      	lsls	r3, r3, #17
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e007      	b.n	8005014 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800500e:	2380      	movs	r3, #128	@ 0x80
 8005010:	049b      	lsls	r3, r3, #18
 8005012:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	d027      	beq.n	800506c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005050:	b2db      	uxtb	r3, r3
 8005052:	3301      	adds	r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	697c      	ldr	r4, [r7, #20]
 8005058:	230a      	movs	r3, #10
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	8819      	ldrh	r1, [r3, #0]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	4b51      	ldr	r3, [pc, #324]	@ (80051a8 <HAL_I2C_Master_Transmit+0x24c>)
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	0023      	movs	r3, r4
 8005066:	f000 fdd7 	bl	8005c18 <I2C_TransferConfig>
 800506a:	e06f      	b.n	800514c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	b2da      	uxtb	r2, r3
 8005072:	697c      	ldr	r4, [r7, #20]
 8005074:	230a      	movs	r3, #10
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	8819      	ldrh	r1, [r3, #0]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_I2C_Master_Transmit+0x24c>)
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	f000 fdc9 	bl	8005c18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005086:	e061      	b.n	800514c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0018      	movs	r0, r3
 8005090:	f000 fba2 	bl	80057d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005094:	1e03      	subs	r3, r0, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e081      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d03a      	beq.n	800514c <HAL_I2C_Master_Transmit+0x1f0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d136      	bne.n	800514c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	0013      	movs	r3, r2
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	f000 fb1c 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e053      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2bff      	cmp	r3, #255	@ 0xff
 8005100:	d911      	bls.n	8005126 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22ff      	movs	r2, #255	@ 0xff
 8005106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	b2da      	uxtb	r2, r3
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	045c      	lsls	r4, r3, #17
 8005112:	230a      	movs	r3, #10
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	8819      	ldrh	r1, [r3, #0]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	0023      	movs	r3, r4
 8005120:	f000 fd7a 	bl	8005c18 <I2C_TransferConfig>
 8005124:	e012      	b.n	800514c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005134:	b2da      	uxtb	r2, r3
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	049c      	lsls	r4, r3, #18
 800513a:	230a      	movs	r3, #10
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	8819      	ldrh	r1, [r3, #0]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	0023      	movs	r3, r4
 8005148:	f000 fd66 	bl	8005c18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d198      	bne.n	8005088 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 fb81 	bl	8005864 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d001      	beq.n	800516a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e01a      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2220      	movs	r2, #32
 8005170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	490b      	ldr	r1, [pc, #44]	@ (80051ac <HAL_I2C_Master_Transmit+0x250>)
 800517e:	400a      	ands	r2, r1
 8005180:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2241      	movs	r2, #65	@ 0x41
 8005186:	2120      	movs	r1, #32
 8005188:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2242      	movs	r2, #66	@ 0x42
 800518e:	2100      	movs	r1, #0
 8005190:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2240      	movs	r2, #64	@ 0x40
 8005196:	2100      	movs	r1, #0
 8005198:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
  }
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b007      	add	sp, #28
 80051a6:	bd90      	pop	{r4, r7, pc}
 80051a8:	80002000 	.word	0x80002000
 80051ac:	fe00e800 	.word	0xfe00e800

080051b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b089      	sub	sp, #36	@ 0x24
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	0008      	movs	r0, r1
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	0019      	movs	r1, r3
 80051be:	230a      	movs	r3, #10
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	1c02      	adds	r2, r0, #0
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	2308      	movs	r3, #8
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	1c0a      	adds	r2, r1, #0
 80051cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2241      	movs	r2, #65	@ 0x41
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d000      	beq.n	80051dc <HAL_I2C_Master_Receive+0x2c>
 80051da:	e0e8      	b.n	80053ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2240      	movs	r2, #64	@ 0x40
 80051e0:	5c9b      	ldrb	r3, [r3, r2]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_I2C_Master_Receive+0x3a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0e2      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2240      	movs	r2, #64	@ 0x40
 80051ee:	2101      	movs	r1, #1
 80051f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051f2:	f7ff fb27 	bl	8004844 <HAL_GetTick>
 80051f6:	0003      	movs	r3, r0
 80051f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	0219      	lsls	r1, r3, #8
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2319      	movs	r3, #25
 8005206:	2201      	movs	r2, #1
 8005208:	f000 fa8e 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 800520c:	1e03      	subs	r3, r0, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0cd      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2241      	movs	r2, #65	@ 0x41
 8005218:	2122      	movs	r1, #34	@ 0x22
 800521a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2242      	movs	r2, #66	@ 0x42
 8005220:	2110      	movs	r1, #16
 8005222:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2208      	movs	r2, #8
 8005234:	18ba      	adds	r2, r7, r2
 8005236:	8812      	ldrh	r2, [r2, #0]
 8005238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2bff      	cmp	r3, #255	@ 0xff
 8005248:	d911      	bls.n	800526e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	22ff      	movs	r2, #255	@ 0xff
 800524e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	045c      	lsls	r4, r3, #17
 800525a:	230a      	movs	r3, #10
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	8819      	ldrh	r1, [r3, #0]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	4b55      	ldr	r3, [pc, #340]	@ (80053b8 <HAL_I2C_Master_Receive+0x208>)
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	0023      	movs	r3, r4
 8005268:	f000 fcd6 	bl	8005c18 <I2C_TransferConfig>
 800526c:	e076      	b.n	800535c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	b2da      	uxtb	r2, r3
 800527e:	2380      	movs	r3, #128	@ 0x80
 8005280:	049c      	lsls	r4, r3, #18
 8005282:	230a      	movs	r3, #10
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	8819      	ldrh	r1, [r3, #0]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	4b4b      	ldr	r3, [pc, #300]	@ (80053b8 <HAL_I2C_Master_Receive+0x208>)
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	0023      	movs	r3, r4
 8005290:	f000 fcc2 	bl	8005c18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005294:	e062      	b.n	800535c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fb25 	bl	80058ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80052a2:	1e03      	subs	r3, r0, #0
 80052a4:	d001      	beq.n	80052aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e082      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03a      	beq.n	800535c <HAL_I2C_Master_Receive+0x1ac>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d136      	bne.n	800535c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0013      	movs	r3, r2
 80052f8:	2200      	movs	r2, #0
 80052fa:	2180      	movs	r1, #128	@ 0x80
 80052fc:	f000 fa14 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d001      	beq.n	8005308 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e053      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2bff      	cmp	r3, #255	@ 0xff
 8005310:	d911      	bls.n	8005336 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	22ff      	movs	r2, #255	@ 0xff
 8005316:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531c:	b2da      	uxtb	r2, r3
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	045c      	lsls	r4, r3, #17
 8005322:	230a      	movs	r3, #10
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	8819      	ldrh	r1, [r3, #0]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	0023      	movs	r3, r4
 8005330:	f000 fc72 	bl	8005c18 <I2C_TransferConfig>
 8005334:	e012      	b.n	800535c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005344:	b2da      	uxtb	r2, r3
 8005346:	2380      	movs	r3, #128	@ 0x80
 8005348:	049c      	lsls	r4, r3, #18
 800534a:	230a      	movs	r3, #10
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	8819      	ldrh	r1, [r3, #0]
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	2300      	movs	r3, #0
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	0023      	movs	r3, r4
 8005358:	f000 fc5e 	bl	8005c18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d197      	bne.n	8005296 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fa79 	bl	8005864 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d001      	beq.n	800537a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e01a      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2220      	movs	r2, #32
 8005380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	490b      	ldr	r1, [pc, #44]	@ (80053bc <HAL_I2C_Master_Receive+0x20c>)
 800538e:	400a      	ands	r2, r1
 8005390:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2241      	movs	r2, #65	@ 0x41
 8005396:	2120      	movs	r1, #32
 8005398:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2242      	movs	r2, #66	@ 0x42
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2240      	movs	r2, #64	@ 0x40
 80053a6:	2100      	movs	r1, #0
 80053a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b007      	add	sp, #28
 80053b6:	bd90      	pop	{r4, r7, pc}
 80053b8:	80002400 	.word	0x80002400
 80053bc:	fe00e800 	.word	0xfe00e800

080053c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b089      	sub	sp, #36	@ 0x24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	000c      	movs	r4, r1
 80053ca:	0010      	movs	r0, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	230a      	movs	r3, #10
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	1c22      	adds	r2, r4, #0
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	2308      	movs	r3, #8
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	1c02      	adds	r2, r0, #0
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	1dbb      	adds	r3, r7, #6
 80053e0:	1c0a      	adds	r2, r1, #0
 80053e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2241      	movs	r2, #65	@ 0x41
 80053e8:	5c9b      	ldrb	r3, [r3, r2]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d000      	beq.n	80053f2 <HAL_I2C_Mem_Write+0x32>
 80053f0:	e10c      	b.n	800560c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <HAL_I2C_Mem_Write+0x42>
 80053f8:	232c      	movs	r3, #44	@ 0x2c
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2280      	movs	r2, #128	@ 0x80
 8005406:	0092      	lsls	r2, r2, #2
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0ff      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2240      	movs	r2, #64	@ 0x40
 8005412:	5c9b      	ldrb	r3, [r3, r2]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2C_Mem_Write+0x5c>
 8005418:	2302      	movs	r3, #2
 800541a:	e0f8      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	@ 0x40
 8005420:	2101      	movs	r1, #1
 8005422:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005424:	f7ff fa0e 	bl	8004844 <HAL_GetTick>
 8005428:	0003      	movs	r3, r0
 800542a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800542c:	2380      	movs	r3, #128	@ 0x80
 800542e:	0219      	lsls	r1, r3, #8
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2319      	movs	r3, #25
 8005438:	2201      	movs	r2, #1
 800543a:	f000 f975 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e3      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2241      	movs	r2, #65	@ 0x41
 800544a:	2121      	movs	r1, #33	@ 0x21
 800544c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2242      	movs	r2, #66	@ 0x42
 8005452:	2140      	movs	r1, #64	@ 0x40
 8005454:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	222c      	movs	r2, #44	@ 0x2c
 8005466:	18ba      	adds	r2, r7, r2
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005472:	1dbb      	adds	r3, r7, #6
 8005474:	881c      	ldrh	r4, [r3, #0]
 8005476:	2308      	movs	r3, #8
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	230a      	movs	r3, #10
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	8819      	ldrh	r1, [r3, #0]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	0023      	movs	r3, r4
 800548e:	f000 f8c5 	bl	800561c <I2C_RequestMemoryWrite>
 8005492:	1e03      	subs	r3, r0, #0
 8005494:	d005      	beq.n	80054a2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2240      	movs	r2, #64	@ 0x40
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0b5      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2bff      	cmp	r3, #255	@ 0xff
 80054aa:	d911      	bls.n	80054d0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	22ff      	movs	r2, #255	@ 0xff
 80054b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	045c      	lsls	r4, r3, #17
 80054bc:	230a      	movs	r3, #10
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	8819      	ldrh	r1, [r3, #0]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	0023      	movs	r3, r4
 80054ca:	f000 fba5 	bl	8005c18 <I2C_TransferConfig>
 80054ce:	e012      	b.n	80054f6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	2380      	movs	r3, #128	@ 0x80
 80054e2:	049c      	lsls	r4, r3, #18
 80054e4:	230a      	movs	r3, #10
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	8819      	ldrh	r1, [r3, #0]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	2300      	movs	r3, #0
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 fb91 	bl	8005c18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 f96b 	bl	80057d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005502:	1e03      	subs	r3, r0, #0
 8005504:	d001      	beq.n	800550a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e081      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d03a      	beq.n	80055ba <HAL_I2C_Mem_Write+0x1fa>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	d136      	bne.n	80055ba <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800554c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	0013      	movs	r3, r2
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	@ 0x80
 800555a:	f000 f8e5 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d001      	beq.n	8005566 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e053      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	2bff      	cmp	r3, #255	@ 0xff
 800556e:	d911      	bls.n	8005594 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	22ff      	movs	r2, #255	@ 0xff
 8005574:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557a:	b2da      	uxtb	r2, r3
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	045c      	lsls	r4, r3, #17
 8005580:	230a      	movs	r3, #10
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	8819      	ldrh	r1, [r3, #0]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	2300      	movs	r3, #0
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	0023      	movs	r3, r4
 800558e:	f000 fb43 	bl	8005c18 <I2C_TransferConfig>
 8005592:	e012      	b.n	80055ba <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	049c      	lsls	r4, r3, #18
 80055a8:	230a      	movs	r3, #10
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	8819      	ldrh	r1, [r3, #0]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	2300      	movs	r3, #0
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	0023      	movs	r3, r4
 80055b6:	f000 fb2f 	bl	8005c18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d198      	bne.n	80054f6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0018      	movs	r0, r3
 80055cc:	f000 f94a 	bl	8005864 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d0:	1e03      	subs	r3, r0, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e01a      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2220      	movs	r2, #32
 80055de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	490b      	ldr	r1, [pc, #44]	@ (8005618 <HAL_I2C_Mem_Write+0x258>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2241      	movs	r2, #65	@ 0x41
 80055f4:	2120      	movs	r1, #32
 80055f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2242      	movs	r2, #66	@ 0x42
 80055fc:	2100      	movs	r1, #0
 80055fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2240      	movs	r2, #64	@ 0x40
 8005604:	2100      	movs	r1, #0
 8005606:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	0018      	movs	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	b007      	add	sp, #28
 8005614:	bd90      	pop	{r4, r7, pc}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	fe00e800 	.word	0xfe00e800

0800561c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	000c      	movs	r4, r1
 8005626:	0010      	movs	r0, r2
 8005628:	0019      	movs	r1, r3
 800562a:	250a      	movs	r5, #10
 800562c:	197b      	adds	r3, r7, r5
 800562e:	1c22      	adds	r2, r4, #0
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	2308      	movs	r3, #8
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	1c02      	adds	r2, r0, #0
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	1dbb      	adds	r3, r7, #6
 800563c:	1c0a      	adds	r2, r1, #0
 800563e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005640:	1dbb      	adds	r3, r7, #6
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	2380      	movs	r3, #128	@ 0x80
 8005648:	045c      	lsls	r4, r3, #17
 800564a:	197b      	adds	r3, r7, r5
 800564c:	8819      	ldrh	r1, [r3, #0]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	4b23      	ldr	r3, [pc, #140]	@ (80056e0 <I2C_RequestMemoryWrite+0xc4>)
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	0023      	movs	r3, r4
 8005656:	f000 fadf 	bl	8005c18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f8b9 	bl	80057d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005666:	1e03      	subs	r3, r0, #0
 8005668:	d001      	beq.n	800566e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e033      	b.n	80056d6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800566e:	1dbb      	adds	r3, r7, #6
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005676:	2308      	movs	r3, #8
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	629a      	str	r2, [r3, #40]	@ 0x28
 8005684:	e019      	b.n	80056ba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005686:	2308      	movs	r3, #8
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	b29b      	uxth	r3, r3
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 f89a 	bl	80057d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80056a4:	1e03      	subs	r3, r0, #0
 80056a6:	d001      	beq.n	80056ac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e014      	b.n	80056d6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056ac:	2308      	movs	r3, #8
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	0013      	movs	r3, r2
 80056c4:	2200      	movs	r2, #0
 80056c6:	2180      	movs	r1, #128	@ 0x80
 80056c8:	f000 f82e 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bdb0      	pop	{r4, r5, r7, pc}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	80002000 	.word	0x80002000

080056e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2202      	movs	r2, #2
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d103      	bne.n	8005702 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2201      	movs	r2, #1
 800570a:	4013      	ands	r3, r2
 800570c:	2b01      	cmp	r3, #1
 800570e:	d007      	beq.n	8005720 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2101      	movs	r1, #1
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
  }
}
 8005720:	46c0      	nop			@ (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	1dfb      	adds	r3, r7, #7
 8005736:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005738:	e03a      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0018      	movs	r0, r3
 8005742:	f000 f971 	bl	8005a28 <I2C_IsErrorOccurred>
 8005746:	1e03      	subs	r3, r0, #0
 8005748:	d001      	beq.n	800574e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e040      	b.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	d02d      	beq.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005754:	f7ff f876 	bl	8004844 <HAL_GetTick>
 8005758:	0002      	movs	r2, r0
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d302      	bcc.n	800576a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d122      	bne.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	425a      	negs	r2, r3
 800577a:	4153      	adcs	r3, r2
 800577c:	b2db      	uxtb	r3, r3
 800577e:	001a      	movs	r2, r3
 8005780:	1dfb      	adds	r3, r7, #7
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d113      	bne.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	2220      	movs	r2, #32
 800578e:	431a      	orrs	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2241      	movs	r2, #65	@ 0x41
 8005798:	2120      	movs	r1, #32
 800579a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2242      	movs	r2, #66	@ 0x42
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2240      	movs	r2, #64	@ 0x40
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e00f      	b.n	80057d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	425a      	negs	r2, r3
 80057c0:	4153      	adcs	r3, r2
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	001a      	movs	r2, r3
 80057c6:	1dfb      	adds	r3, r7, #7
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d0b5      	beq.n	800573a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b004      	add	sp, #16
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057e4:	e032      	b.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 f91b 	bl	8005a28 <I2C_IsErrorOccurred>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d001      	beq.n	80057fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e030      	b.n	800585c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3301      	adds	r3, #1
 80057fe:	d025      	beq.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7ff f820 	bl	8004844 <HAL_GetTick>
 8005804:	0002      	movs	r2, r0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d11a      	bne.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2202      	movs	r2, #2
 800581e:	4013      	ands	r3, r2
 8005820:	2b02      	cmp	r3, #2
 8005822:	d013      	beq.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005828:	2220      	movs	r2, #32
 800582a:	431a      	orrs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2241      	movs	r2, #65	@ 0x41
 8005834:	2120      	movs	r1, #32
 8005836:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2242      	movs	r2, #66	@ 0x42
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2240      	movs	r2, #64	@ 0x40
 8005844:	2100      	movs	r1, #0
 8005846:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e007      	b.n	800585c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2202      	movs	r2, #2
 8005854:	4013      	ands	r3, r2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d1c5      	bne.n	80057e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b004      	add	sp, #16
 8005862:	bd80      	pop	{r7, pc}

08005864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005870:	e02f      	b.n	80058d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0018      	movs	r0, r3
 800587a:	f000 f8d5 	bl	8005a28 <I2C_IsErrorOccurred>
 800587e:	1e03      	subs	r3, r0, #0
 8005880:	d001      	beq.n	8005886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02d      	b.n	80058e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005886:	f7fe ffdd 	bl	8004844 <HAL_GetTick>
 800588a:	0002      	movs	r2, r0
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d302      	bcc.n	800589c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d11a      	bne.n	80058d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2220      	movs	r2, #32
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d013      	beq.n	80058d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	2220      	movs	r2, #32
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2241      	movs	r2, #65	@ 0x41
 80058ba:	2120      	movs	r1, #32
 80058bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2242      	movs	r2, #66	@ 0x42
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2240      	movs	r2, #64	@ 0x40
 80058ca:	2100      	movs	r1, #0
 80058cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e007      	b.n	80058e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2220      	movs	r2, #32
 80058da:	4013      	ands	r3, r2
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d1c8      	bne.n	8005872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b004      	add	sp, #16
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2317      	movs	r3, #23
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005900:	e07b      	b.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f88d 	bl	8005a28 <I2C_IsErrorOccurred>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d003      	beq.n	800591a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005912:	2317      	movs	r3, #23
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2220      	movs	r2, #32
 8005922:	4013      	ands	r3, r2
 8005924:	2b20      	cmp	r3, #32
 8005926:	d140      	bne.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005928:	2117      	movs	r1, #23
 800592a:	187b      	adds	r3, r7, r1
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d13b      	bne.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2204      	movs	r2, #4
 800593a:	4013      	ands	r3, r2
 800593c:	2b04      	cmp	r3, #4
 800593e:	d106      	bne.n	800594e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005948:	187b      	adds	r3, r7, r1
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2210      	movs	r2, #16
 8005956:	4013      	ands	r3, r2
 8005958:	2b10      	cmp	r3, #16
 800595a:	d123      	bne.n	80059a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2210      	movs	r2, #16
 8005962:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2204      	movs	r2, #4
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2220      	movs	r2, #32
 8005970:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4929      	ldr	r1, [pc, #164]	@ (8005a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800597e:	400a      	ands	r2, r1
 8005980:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2241      	movs	r2, #65	@ 0x41
 8005986:	2120      	movs	r1, #32
 8005988:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2242      	movs	r2, #66	@ 0x42
 800598e:	2100      	movs	r1, #0
 8005990:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2240      	movs	r2, #64	@ 0x40
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800599a:	2317      	movs	r3, #23
 800599c:	18fb      	adds	r3, r7, r3
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	e002      	b.n	80059aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80059aa:	f7fe ff4b 	bl	8004844 <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11c      	bne.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80059c0:	2017      	movs	r0, #23
 80059c2:	183b      	adds	r3, r7, r0
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d117      	bne.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2204      	movs	r2, #4
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d010      	beq.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059dc:	2220      	movs	r2, #32
 80059de:	431a      	orrs	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2241      	movs	r2, #65	@ 0x41
 80059e8:	2120      	movs	r1, #32
 80059ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2240      	movs	r2, #64	@ 0x40
 80059f0:	2100      	movs	r1, #0
 80059f2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80059f4:	183b      	adds	r3, r7, r0
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2204      	movs	r2, #4
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d005      	beq.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005a08:	2317      	movs	r3, #23
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d100      	bne.n	8005a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005a12:	e776      	b.n	8005902 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005a14:	2317      	movs	r3, #23
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	781b      	ldrb	r3, [r3, #0]
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b006      	add	sp, #24
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	fe00e800 	.word	0xfe00e800

08005a28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a34:	2327      	movs	r3, #39	@ 0x27
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2210      	movs	r2, #16
 8005a50:	4013      	ands	r3, r2
 8005a52:	d100      	bne.n	8005a56 <I2C_IsErrorOccurred+0x2e>
 8005a54:	e079      	b.n	8005b4a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a5e:	e057      	b.n	8005b10 <I2C_IsErrorOccurred+0xe8>
 8005a60:	2227      	movs	r2, #39	@ 0x27
 8005a62:	18bb      	adds	r3, r7, r2
 8005a64:	18ba      	adds	r2, r7, r2
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	d04f      	beq.n	8005b10 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fe fee8 	bl	8004844 <HAL_GetTick>
 8005a74:	0002      	movs	r2, r0
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <I2C_IsErrorOccurred+0x5e>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d144      	bne.n	8005b10 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	4013      	ands	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a94:	2013      	movs	r0, #19
 8005a96:	183b      	adds	r3, r7, r0
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	2142      	movs	r1, #66	@ 0x42
 8005a9c:	5c52      	ldrb	r2, [r2, r1]
 8005a9e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	401a      	ands	r2, r3
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d126      	bne.n	8005b02 <I2C_IsErrorOccurred+0xda>
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	2380      	movs	r3, #128	@ 0x80
 8005ab8:	01db      	lsls	r3, r3, #7
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d021      	beq.n	8005b02 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005abe:	183b      	adds	r3, r7, r0
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d01d      	beq.n	8005b02 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2180      	movs	r1, #128	@ 0x80
 8005ad2:	01c9      	lsls	r1, r1, #7
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ad8:	f7fe feb4 	bl	8004844 <HAL_GetTick>
 8005adc:	0003      	movs	r3, r0
 8005ade:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ae0:	e00f      	b.n	8005b02 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ae2:	f7fe feaf 	bl	8004844 <HAL_GetTick>
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b19      	cmp	r3, #25
 8005aee:	d908      	bls.n	8005b02 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	2220      	movs	r2, #32
 8005af4:	4313      	orrs	r3, r2
 8005af6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005af8:	2327      	movs	r3, #39	@ 0x27
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]

              break;
 8005b00:	e006      	b.n	8005b10 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d1e8      	bne.n	8005ae2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2220      	movs	r2, #32
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d004      	beq.n	8005b28 <I2C_IsErrorOccurred+0x100>
 8005b1e:	2327      	movs	r3, #39	@ 0x27
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d09b      	beq.n	8005a60 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b28:	2327      	movs	r3, #39	@ 0x27
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2220      	movs	r2, #32
 8005b38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b42:	2327      	movs	r3, #39	@ 0x27
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d00c      	beq.n	8005b76 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2280      	movs	r2, #128	@ 0x80
 8005b6a:	0052      	lsls	r2, r2, #1
 8005b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b6e:	2327      	movs	r3, #39	@ 0x27
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d00c      	beq.n	8005b9a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	2208      	movs	r2, #8
 8005b84:	4313      	orrs	r3, r2
 8005b86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2280      	movs	r2, #128	@ 0x80
 8005b8e:	00d2      	lsls	r2, r2, #3
 8005b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b92:	2327      	movs	r3, #39	@ 0x27
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00c      	beq.n	8005bbe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2280      	movs	r2, #128	@ 0x80
 8005bb2:	0092      	lsls	r2, r2, #2
 8005bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bb6:	2327      	movs	r3, #39	@ 0x27
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005bbe:	2327      	movs	r3, #39	@ 0x27
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01d      	beq.n	8005c04 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7ff fd8a 	bl	80056e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	490e      	ldr	r1, [pc, #56]	@ (8005c14 <I2C_IsErrorOccurred+0x1ec>)
 8005bdc:	400a      	ands	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2241      	movs	r2, #65	@ 0x41
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2242      	movs	r2, #66	@ 0x42
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2240      	movs	r2, #64	@ 0x40
 8005c00:	2100      	movs	r1, #0
 8005c02:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005c04:	2327      	movs	r3, #39	@ 0x27
 8005c06:	18fb      	adds	r3, r7, r3
 8005c08:	781b      	ldrb	r3, [r3, #0]
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b00a      	add	sp, #40	@ 0x28
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	fe00e800 	.word	0xfe00e800

08005c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	0008      	movs	r0, r1
 8005c22:	0011      	movs	r1, r2
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	240a      	movs	r4, #10
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	1c02      	adds	r2, r0, #0
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	2009      	movs	r0, #9
 8005c30:	183b      	adds	r3, r7, r0
 8005c32:	1c0a      	adds	r2, r1, #0
 8005c34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c36:	193b      	adds	r3, r7, r4
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	059b      	lsls	r3, r3, #22
 8005c3c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c3e:	183b      	adds	r3, r7, r0
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	0419      	lsls	r1, r3, #16
 8005c44:	23ff      	movs	r3, #255	@ 0xff
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c4a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	4313      	orrs	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c62:	0d51      	lsrs	r1, r2, #21
 8005c64:	2280      	movs	r2, #128	@ 0x80
 8005c66:	00d2      	lsls	r2, r2, #3
 8005c68:	400a      	ands	r2, r1
 8005c6a:	4907      	ldr	r1, [pc, #28]	@ (8005c88 <I2C_TransferConfig+0x70>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	43d2      	mvns	r2, r2
 8005c70:	401a      	ands	r2, r3
 8005c72:	0011      	movs	r1, r2
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b007      	add	sp, #28
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	46c0      	nop			@ (mov r8, r8)
 8005c88:	03ff63ff 	.word	0x03ff63ff

08005c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2241      	movs	r2, #65	@ 0x41
 8005c9a:	5c9b      	ldrb	r3, [r3, r2]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d138      	bne.n	8005d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2240      	movs	r2, #64	@ 0x40
 8005ca6:	5c9b      	ldrb	r3, [r3, r2]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e032      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2241      	movs	r2, #65	@ 0x41
 8005cbc:	2124      	movs	r1, #36	@ 0x24
 8005cbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2101      	movs	r1, #1
 8005ccc:	438a      	bics	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4911      	ldr	r1, [pc, #68]	@ (8005d20 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2241      	movs	r2, #65	@ 0x41
 8005d04:	2120      	movs	r1, #32
 8005d06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b002      	add	sp, #8
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			@ (mov r8, r8)
 8005d20:	ffffefff 	.word	0xffffefff

08005d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2241      	movs	r2, #65	@ 0x41
 8005d32:	5c9b      	ldrb	r3, [r3, r2]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d139      	bne.n	8005dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2240      	movs	r2, #64	@ 0x40
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e033      	b.n	8005db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2240      	movs	r2, #64	@ 0x40
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2241      	movs	r2, #65	@ 0x41
 8005d54:	2124      	movs	r1, #36	@ 0x24
 8005d56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2101      	movs	r1, #1
 8005d64:	438a      	bics	r2, r1
 8005d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a11      	ldr	r2, [pc, #68]	@ (8005db8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2101      	movs	r1, #1
 8005d96:	430a      	orrs	r2, r1
 8005d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2241      	movs	r2, #65	@ 0x41
 8005d9e:	2120      	movs	r1, #32
 8005da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2240      	movs	r2, #64	@ 0x40
 8005da6:	2100      	movs	r1, #0
 8005da8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e000      	b.n	8005db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
  }
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b004      	add	sp, #16
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	fffff0ff 	.word	0xfffff0ff

08005dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	2380      	movs	r3, #128	@ 0x80
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d11f      	bne.n	8005e20 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005de0:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	0013      	movs	r3, r2
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	189b      	adds	r3, r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	4912      	ldr	r1, [pc, #72]	@ (8005e38 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005dee:	0018      	movs	r0, r3
 8005df0:	f7fa f9a4 	bl	800013c <__udivsi3>
 8005df4:	0003      	movs	r3, r0
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dfa:	e008      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	e001      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e009      	b.n	8005e22 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e0e:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005e10:	695a      	ldr	r2, [r3, #20]
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	401a      	ands	r2, r3
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d0ed      	beq.n	8005dfc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b004      	add	sp, #16
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			@ (mov r8, r8)
 8005e2c:	40007000 	.word	0x40007000
 8005e30:	fffff9ff 	.word	0xfffff9ff
 8005e34:	20000000 	.word	0x20000000
 8005e38:	000f4240 	.word	0x000f4240

08005e3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005e40:	4b03      	ldr	r3, [pc, #12]	@ (8005e50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	23e0      	movs	r3, #224	@ 0xe0
 8005e46:	01db      	lsls	r3, r3, #7
 8005e48:	4013      	ands	r3, r2
}
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40021000 	.word	0x40021000

08005e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e2fe      	b.n	8006464 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <HAL_RCC_OscConfig+0x1e>
 8005e70:	e07c      	b.n	8005f6c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e72:	4bc3      	ldr	r3, [pc, #780]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2238      	movs	r2, #56	@ 0x38
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e7c:	4bc0      	ldr	r3, [pc, #768]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2203      	movs	r2, #3
 8005e82:	4013      	ands	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d102      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3e>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d002      	beq.n	8005e98 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	4bb9      	ldr	r3, [pc, #740]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	2380      	movs	r3, #128	@ 0x80
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d062      	beq.n	8005f6a <HAL_RCC_OscConfig+0x116>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d15e      	bne.n	8005f6a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e2d9      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	2380      	movs	r3, #128	@ 0x80
 8005eb6:	025b      	lsls	r3, r3, #9
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_OscConfig+0x78>
 8005ebc:	4bb0      	ldr	r3, [pc, #704]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4baf      	ldr	r3, [pc, #700]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005ec2:	2180      	movs	r1, #128	@ 0x80
 8005ec4:	0249      	lsls	r1, r1, #9
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e020      	b.n	8005f0e <HAL_RCC_OscConfig+0xba>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	23a0      	movs	r3, #160	@ 0xa0
 8005ed2:	02db      	lsls	r3, r3, #11
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d10e      	bne.n	8005ef6 <HAL_RCC_OscConfig+0xa2>
 8005ed8:	4ba9      	ldr	r3, [pc, #676]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4ba8      	ldr	r3, [pc, #672]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005ede:	2180      	movs	r1, #128	@ 0x80
 8005ee0:	02c9      	lsls	r1, r1, #11
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	4ba6      	ldr	r3, [pc, #664]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4ba5      	ldr	r3, [pc, #660]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005eec:	2180      	movs	r1, #128	@ 0x80
 8005eee:	0249      	lsls	r1, r1, #9
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e00b      	b.n	8005f0e <HAL_RCC_OscConfig+0xba>
 8005ef6:	4ba2      	ldr	r3, [pc, #648]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4ba1      	ldr	r3, [pc, #644]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005efc:	49a1      	ldr	r1, [pc, #644]	@ (8006184 <HAL_RCC_OscConfig+0x330>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	4b9f      	ldr	r3, [pc, #636]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b9e      	ldr	r3, [pc, #632]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f08:	499f      	ldr	r1, [pc, #636]	@ (8006188 <HAL_RCC_OscConfig+0x334>)
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d014      	beq.n	8005f40 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fe fc95 	bl	8004844 <HAL_GetTick>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f20:	f7fe fc90 	bl	8004844 <HAL_GetTick>
 8005f24:	0002      	movs	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b64      	cmp	r3, #100	@ 0x64
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e298      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f32:	4b93      	ldr	r3, [pc, #588]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	2380      	movs	r3, #128	@ 0x80
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0xcc>
 8005f3e:	e015      	b.n	8005f6c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f40:	f7fe fc80 	bl	8004844 <HAL_GetTick>
 8005f44:	0003      	movs	r3, r0
 8005f46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f4a:	f7fe fc7b 	bl	8004844 <HAL_GetTick>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b64      	cmp	r3, #100	@ 0x64
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e283      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f5c:	4b88      	ldr	r3, [pc, #544]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	029b      	lsls	r3, r3, #10
 8005f64:	4013      	ands	r3, r2
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCC_OscConfig+0xf6>
 8005f68:	e000      	b.n	8005f6c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d100      	bne.n	8005f78 <HAL_RCC_OscConfig+0x124>
 8005f76:	e099      	b.n	80060ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f78:	4b81      	ldr	r3, [pc, #516]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2238      	movs	r2, #56	@ 0x38
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f82:	4b7f      	ldr	r3, [pc, #508]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2203      	movs	r2, #3
 8005f88:	4013      	ands	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b10      	cmp	r3, #16
 8005f90:	d102      	bne.n	8005f98 <HAL_RCC_OscConfig+0x144>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d002      	beq.n	8005f9e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d135      	bne.n	800600a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f9e:	4b78      	ldr	r3, [pc, #480]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d005      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x162>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e256      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb6:	4b72      	ldr	r3, [pc, #456]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a74      	ldr	r2, [pc, #464]	@ (800618c <HAL_RCC_OscConfig+0x338>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	021a      	lsls	r2, r3, #8
 8005fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d112      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8006190 <HAL_RCC_OscConfig+0x33c>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	0019      	movs	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	4b67      	ldr	r3, [pc, #412]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005fe6:	4b66      	ldr	r3, [pc, #408]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	2207      	movs	r2, #7
 8005fee:	4013      	ands	r3, r2
 8005ff0:	4a68      	ldr	r2, [pc, #416]	@ (8006194 <HAL_RCC_OscConfig+0x340>)
 8005ff2:	40da      	lsrs	r2, r3
 8005ff4:	4b68      	ldr	r3, [pc, #416]	@ (8006198 <HAL_RCC_OscConfig+0x344>)
 8005ff6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ff8:	4b68      	ldr	r3, [pc, #416]	@ (800619c <HAL_RCC_OscConfig+0x348>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f7fe fbc5 	bl	800478c <HAL_InitTick>
 8006002:	1e03      	subs	r3, r0, #0
 8006004:	d051      	beq.n	80060aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e22c      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d030      	beq.n	8006074 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006012:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a5e      	ldr	r2, [pc, #376]	@ (8006190 <HAL_RCC_OscConfig+0x33c>)
 8006018:	4013      	ands	r3, r2
 800601a:	0019      	movs	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	4b57      	ldr	r3, [pc, #348]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006026:	4b56      	ldr	r3, [pc, #344]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b55      	ldr	r3, [pc, #340]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800602c:	2180      	movs	r1, #128	@ 0x80
 800602e:	0049      	lsls	r1, r1, #1
 8006030:	430a      	orrs	r2, r1
 8006032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fe fc06 	bl	8004844 <HAL_GetTick>
 8006038:	0003      	movs	r3, r0
 800603a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800603e:	f7fe fc01 	bl	8004844 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e209      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006050:	4b4b      	ldr	r3, [pc, #300]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4013      	ands	r3, r2
 800605a:	d0f0      	beq.n	800603e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605c:	4b48      	ldr	r3, [pc, #288]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a4a      	ldr	r2, [pc, #296]	@ (800618c <HAL_RCC_OscConfig+0x338>)
 8006062:	4013      	ands	r3, r2
 8006064:	0019      	movs	r1, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	4b44      	ldr	r3, [pc, #272]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
 8006072:	e01b      	b.n	80060ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006074:	4b42      	ldr	r3, [pc, #264]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b41      	ldr	r3, [pc, #260]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800607a:	4949      	ldr	r1, [pc, #292]	@ (80061a0 <HAL_RCC_OscConfig+0x34c>)
 800607c:	400a      	ands	r2, r1
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fe fbe0 	bl	8004844 <HAL_GetTick>
 8006084:	0003      	movs	r3, r0
 8006086:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608a:	f7fe fbdb 	bl	8004844 <HAL_GetTick>
 800608e:	0002      	movs	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e1e3      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800609c:	4b38      	ldr	r3, [pc, #224]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4013      	ands	r3, r2
 80060a6:	d1f0      	bne.n	800608a <HAL_RCC_OscConfig+0x236>
 80060a8:	e000      	b.n	80060ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2208      	movs	r2, #8
 80060b2:	4013      	ands	r3, r2
 80060b4:	d047      	beq.n	8006146 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80060b6:	4b32      	ldr	r3, [pc, #200]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2238      	movs	r2, #56	@ 0x38
 80060bc:	4013      	ands	r3, r2
 80060be:	2b18      	cmp	r3, #24
 80060c0:	d10a      	bne.n	80060d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	2202      	movs	r2, #2
 80060c8:	4013      	ands	r3, r2
 80060ca:	d03c      	beq.n	8006146 <HAL_RCC_OscConfig+0x2f2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d138      	bne.n	8006146 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e1c5      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d019      	beq.n	8006114 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80060e0:	4b27      	ldr	r3, [pc, #156]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 80060e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060e4:	4b26      	ldr	r3, [pc, #152]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 80060e6:	2101      	movs	r1, #1
 80060e8:	430a      	orrs	r2, r1
 80060ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fe fbaa 	bl	8004844 <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f6:	f7fe fba5 	bl	8004844 <HAL_GetTick>
 80060fa:	0002      	movs	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e1ad      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800610a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610c:	2202      	movs	r2, #2
 800610e:	4013      	ands	r3, r2
 8006110:	d0f1      	beq.n	80060f6 <HAL_RCC_OscConfig+0x2a2>
 8006112:	e018      	b.n	8006146 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006114:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006116:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006118:	4b19      	ldr	r3, [pc, #100]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800611a:	2101      	movs	r1, #1
 800611c:	438a      	bics	r2, r1
 800611e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fe fb90 	bl	8004844 <HAL_GetTick>
 8006124:	0003      	movs	r3, r0
 8006126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612a:	f7fe fb8b 	bl	8004844 <HAL_GetTick>
 800612e:	0002      	movs	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e193      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800613e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006140:	2202      	movs	r2, #2
 8006142:	4013      	ands	r3, r2
 8006144:	d1f1      	bne.n	800612a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2204      	movs	r2, #4
 800614c:	4013      	ands	r3, r2
 800614e:	d100      	bne.n	8006152 <HAL_RCC_OscConfig+0x2fe>
 8006150:	e0c6      	b.n	80062e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006152:	231f      	movs	r3, #31
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800615a:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2238      	movs	r2, #56	@ 0x38
 8006160:	4013      	ands	r3, r2
 8006162:	2b20      	cmp	r3, #32
 8006164:	d11e      	bne.n	80061a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006166:	4b06      	ldr	r3, [pc, #24]	@ (8006180 <HAL_RCC_OscConfig+0x32c>)
 8006168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800616a:	2202      	movs	r2, #2
 800616c:	4013      	ands	r3, r2
 800616e:	d100      	bne.n	8006172 <HAL_RCC_OscConfig+0x31e>
 8006170:	e0b6      	b.n	80062e0 <HAL_RCC_OscConfig+0x48c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d000      	beq.n	800617c <HAL_RCC_OscConfig+0x328>
 800617a:	e0b1      	b.n	80062e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e171      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
 8006180:	40021000 	.word	0x40021000
 8006184:	fffeffff 	.word	0xfffeffff
 8006188:	fffbffff 	.word	0xfffbffff
 800618c:	ffff80ff 	.word	0xffff80ff
 8006190:	ffffc7ff 	.word	0xffffc7ff
 8006194:	00f42400 	.word	0x00f42400
 8006198:	20000000 	.word	0x20000000
 800619c:	20000004 	.word	0x20000004
 80061a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061a4:	4bb1      	ldr	r3, [pc, #708]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80061a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	055b      	lsls	r3, r3, #21
 80061ac:	4013      	ands	r3, r2
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_OscConfig+0x360>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <HAL_RCC_OscConfig+0x362>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	4bac      	ldr	r3, [pc, #688]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80061bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061be:	4bab      	ldr	r3, [pc, #684]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80061c0:	2180      	movs	r1, #128	@ 0x80
 80061c2:	0549      	lsls	r1, r1, #21
 80061c4:	430a      	orrs	r2, r1
 80061c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061c8:	4ba8      	ldr	r3, [pc, #672]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80061ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061cc:	2380      	movs	r3, #128	@ 0x80
 80061ce:	055b      	lsls	r3, r3, #21
 80061d0:	4013      	ands	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80061d6:	231f      	movs	r3, #31
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061de:	4ba4      	ldr	r3, [pc, #656]	@ (8006470 <HAL_RCC_OscConfig+0x61c>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4013      	ands	r3, r2
 80061e8:	d11a      	bne.n	8006220 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006470 <HAL_RCC_OscConfig+0x61c>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4ba0      	ldr	r3, [pc, #640]	@ (8006470 <HAL_RCC_OscConfig+0x61c>)
 80061f0:	2180      	movs	r1, #128	@ 0x80
 80061f2:	0049      	lsls	r1, r1, #1
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80061f8:	f7fe fb24 	bl	8004844 <HAL_GetTick>
 80061fc:	0003      	movs	r3, r0
 80061fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fe fb1f 	bl	8004844 <HAL_GetTick>
 8006206:	0002      	movs	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e127      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006214:	4b96      	ldr	r3, [pc, #600]	@ (8006470 <HAL_RCC_OscConfig+0x61c>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	4013      	ands	r3, r2
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x3e2>
 8006228:	4b90      	ldr	r3, [pc, #576]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800622a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800622c:	4b8f      	ldr	r3, [pc, #572]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800622e:	2101      	movs	r1, #1
 8006230:	430a      	orrs	r2, r1
 8006232:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006234:	e01c      	b.n	8006270 <HAL_RCC_OscConfig+0x41c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b05      	cmp	r3, #5
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x404>
 800623e:	4b8b      	ldr	r3, [pc, #556]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006240:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006242:	4b8a      	ldr	r3, [pc, #552]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006244:	2104      	movs	r1, #4
 8006246:	430a      	orrs	r2, r1
 8006248:	65da      	str	r2, [r3, #92]	@ 0x5c
 800624a:	4b88      	ldr	r3, [pc, #544]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800624c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800624e:	4b87      	ldr	r3, [pc, #540]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006250:	2101      	movs	r1, #1
 8006252:	430a      	orrs	r2, r1
 8006254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006256:	e00b      	b.n	8006270 <HAL_RCC_OscConfig+0x41c>
 8006258:	4b84      	ldr	r3, [pc, #528]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800625a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800625c:	4b83      	ldr	r3, [pc, #524]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800625e:	2101      	movs	r1, #1
 8006260:	438a      	bics	r2, r1
 8006262:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006264:	4b81      	ldr	r3, [pc, #516]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006268:	4b80      	ldr	r3, [pc, #512]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800626a:	2104      	movs	r1, #4
 800626c:	438a      	bics	r2, r1
 800626e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d014      	beq.n	80062a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fe fae4 	bl	8004844 <HAL_GetTick>
 800627c:	0003      	movs	r3, r0
 800627e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006280:	e009      	b.n	8006296 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fe fadf 	bl	8004844 <HAL_GetTick>
 8006286:	0002      	movs	r2, r0
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	4a79      	ldr	r2, [pc, #484]	@ (8006474 <HAL_RCC_OscConfig+0x620>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e0e6      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006296:	4b75      	ldr	r3, [pc, #468]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629a:	2202      	movs	r2, #2
 800629c:	4013      	ands	r3, r2
 800629e:	d0f0      	beq.n	8006282 <HAL_RCC_OscConfig+0x42e>
 80062a0:	e013      	b.n	80062ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7fe facf 	bl	8004844 <HAL_GetTick>
 80062a6:	0003      	movs	r3, r0
 80062a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062aa:	e009      	b.n	80062c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ac:	f7fe faca 	bl	8004844 <HAL_GetTick>
 80062b0:	0002      	movs	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006474 <HAL_RCC_OscConfig+0x620>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e0d1      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062c0:	4b6a      	ldr	r3, [pc, #424]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	2202      	movs	r2, #2
 80062c6:	4013      	ands	r3, r2
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80062ca:	231f      	movs	r3, #31
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d105      	bne.n	80062e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80062d4:	4b65      	ldr	r3, [pc, #404]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80062d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062d8:	4b64      	ldr	r3, [pc, #400]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80062da:	4967      	ldr	r1, [pc, #412]	@ (8006478 <HAL_RCC_OscConfig+0x624>)
 80062dc:	400a      	ands	r2, r1
 80062de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d100      	bne.n	80062ea <HAL_RCC_OscConfig+0x496>
 80062e8:	e0bb      	b.n	8006462 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ea:	4b60      	ldr	r3, [pc, #384]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2238      	movs	r2, #56	@ 0x38
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d100      	bne.n	80062f8 <HAL_RCC_OscConfig+0x4a4>
 80062f6:	e07b      	b.n	80063f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d156      	bne.n	80063ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006300:	4b5a      	ldr	r3, [pc, #360]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b59      	ldr	r3, [pc, #356]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006306:	495d      	ldr	r1, [pc, #372]	@ (800647c <HAL_RCC_OscConfig+0x628>)
 8006308:	400a      	ands	r2, r1
 800630a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fe fa9a 	bl	8004844 <HAL_GetTick>
 8006310:	0003      	movs	r3, r0
 8006312:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006316:	f7fe fa95 	bl	8004844 <HAL_GetTick>
 800631a:	0002      	movs	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e09d      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006328:	4b50      	ldr	r3, [pc, #320]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	049b      	lsls	r3, r3, #18
 8006330:	4013      	ands	r3, r2
 8006332:	d1f0      	bne.n	8006316 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006334:	4b4d      	ldr	r3, [pc, #308]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4a51      	ldr	r2, [pc, #324]	@ (8006480 <HAL_RCC_OscConfig+0x62c>)
 800633a:	4013      	ands	r3, r2
 800633c:	0019      	movs	r1, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006360:	431a      	orrs	r2, r3
 8006362:	4b42      	ldr	r3, [pc, #264]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006364:	430a      	orrs	r2, r1
 8006366:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006368:	4b40      	ldr	r3, [pc, #256]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b3f      	ldr	r3, [pc, #252]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800636e:	2180      	movs	r1, #128	@ 0x80
 8006370:	0449      	lsls	r1, r1, #17
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006376:	4b3d      	ldr	r3, [pc, #244]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	0549      	lsls	r1, r1, #21
 8006380:	430a      	orrs	r2, r1
 8006382:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fe fa5e 	bl	8004844 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638e:	f7fe fa59 	bl	8004844 <HAL_GetTick>
 8006392:	0002      	movs	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e061      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063a0:	4b32      	ldr	r3, [pc, #200]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	2380      	movs	r3, #128	@ 0x80
 80063a6:	049b      	lsls	r3, r3, #18
 80063a8:	4013      	ands	r3, r2
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x53a>
 80063ac:	e059      	b.n	8006462 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ae:	4b2f      	ldr	r3, [pc, #188]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4b2e      	ldr	r3, [pc, #184]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063b4:	4931      	ldr	r1, [pc, #196]	@ (800647c <HAL_RCC_OscConfig+0x628>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fe fa43 	bl	8004844 <HAL_GetTick>
 80063be:	0003      	movs	r3, r0
 80063c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c4:	f7fe fa3e 	bl	8004844 <HAL_GetTick>
 80063c8:	0002      	movs	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e046      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d6:	4b25      	ldr	r3, [pc, #148]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	049b      	lsls	r3, r3, #18
 80063de:	4013      	ands	r3, r2
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80063e2:	4b22      	ldr	r3, [pc, #136]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	4b21      	ldr	r3, [pc, #132]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063e8:	4926      	ldr	r1, [pc, #152]	@ (8006484 <HAL_RCC_OscConfig+0x630>)
 80063ea:	400a      	ands	r2, r1
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	e038      	b.n	8006462 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e033      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80063fc:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <HAL_RCC_OscConfig+0x618>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2203      	movs	r2, #3
 8006406:	401a      	ands	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	429a      	cmp	r2, r3
 800640e:	d126      	bne.n	800645e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2270      	movs	r2, #112	@ 0x70
 8006414:	401a      	ands	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d11f      	bne.n	800645e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	23fe      	movs	r3, #254	@ 0xfe
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	401a      	ands	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d116      	bne.n	800645e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	23f8      	movs	r3, #248	@ 0xf8
 8006434:	039b      	lsls	r3, r3, #14
 8006436:	401a      	ands	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d10e      	bne.n	800645e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	23e0      	movs	r3, #224	@ 0xe0
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	401a      	ands	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800644c:	429a      	cmp	r2, r3
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	0f5b      	lsrs	r3, r3, #29
 8006454:	075a      	lsls	r2, r3, #29
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800645a:	429a      	cmp	r2, r3
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	0018      	movs	r0, r3
 8006466:	46bd      	mov	sp, r7
 8006468:	b008      	add	sp, #32
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
 8006474:	00001388 	.word	0x00001388
 8006478:	efffffff 	.word	0xefffffff
 800647c:	feffffff 	.word	0xfeffffff
 8006480:	11c1808c 	.word	0x11c1808c
 8006484:	eefefffc 	.word	0xeefefffc

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0e9      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800649c:	4b76      	ldr	r3, [pc, #472]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2207      	movs	r2, #7
 80064a2:	4013      	ands	r3, r2
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d91e      	bls.n	80064e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064aa:	4b73      	ldr	r3, [pc, #460]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2207      	movs	r2, #7
 80064b0:	4393      	bics	r3, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	4b70      	ldr	r3, [pc, #448]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064bc:	f7fe f9c2 	bl	8004844 <HAL_GetTick>
 80064c0:	0003      	movs	r3, r0
 80064c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064c4:	e009      	b.n	80064da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c6:	f7fe f9bd 	bl	8004844 <HAL_GetTick>
 80064ca:	0002      	movs	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	4a6a      	ldr	r2, [pc, #424]	@ (800667c <HAL_RCC_ClockConfig+0x1f4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0ca      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064da:	4b67      	ldr	r3, [pc, #412]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2207      	movs	r2, #7
 80064e0:	4013      	ands	r3, r2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d1ee      	bne.n	80064c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2202      	movs	r2, #2
 80064ee:	4013      	ands	r3, r2
 80064f0:	d015      	beq.n	800651e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2204      	movs	r2, #4
 80064f8:	4013      	ands	r3, r2
 80064fa:	d006      	beq.n	800650a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80064fc:	4b60      	ldr	r3, [pc, #384]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	4b5f      	ldr	r3, [pc, #380]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006502:	21e0      	movs	r1, #224	@ 0xe0
 8006504:	01c9      	lsls	r1, r1, #7
 8006506:	430a      	orrs	r2, r1
 8006508:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800650a:	4b5d      	ldr	r3, [pc, #372]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4a5d      	ldr	r2, [pc, #372]	@ (8006684 <HAL_RCC_ClockConfig+0x1fc>)
 8006510:	4013      	ands	r3, r2
 8006512:	0019      	movs	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	4b59      	ldr	r3, [pc, #356]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	4013      	ands	r3, r2
 8006526:	d057      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d107      	bne.n	8006540 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006530:	4b53      	ldr	r3, [pc, #332]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	2380      	movs	r3, #128	@ 0x80
 8006536:	029b      	lsls	r3, r3, #10
 8006538:	4013      	ands	r3, r2
 800653a:	d12b      	bne.n	8006594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e097      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d107      	bne.n	8006558 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006548:	4b4d      	ldr	r3, [pc, #308]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	2380      	movs	r3, #128	@ 0x80
 800654e:	049b      	lsls	r3, r3, #18
 8006550:	4013      	ands	r3, r2
 8006552:	d11f      	bne.n	8006594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e08b      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006560:	4b47      	ldr	r3, [pc, #284]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4013      	ands	r3, r2
 800656a:	d113      	bne.n	8006594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e07f      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b03      	cmp	r3, #3
 8006576:	d106      	bne.n	8006586 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006578:	4b41      	ldr	r3, [pc, #260]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800657a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657c:	2202      	movs	r2, #2
 800657e:	4013      	ands	r3, r2
 8006580:	d108      	bne.n	8006594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e074      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006586:	4b3e      	ldr	r3, [pc, #248]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658a:	2202      	movs	r2, #2
 800658c:	4013      	ands	r3, r2
 800658e:	d101      	bne.n	8006594 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e06d      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006594:	4b3a      	ldr	r3, [pc, #232]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2207      	movs	r2, #7
 800659a:	4393      	bics	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a8:	f7fe f94c 	bl	8004844 <HAL_GetTick>
 80065ac:	0003      	movs	r3, r0
 80065ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b0:	e009      	b.n	80065c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b2:	f7fe f947 	bl	8004844 <HAL_GetTick>
 80065b6:	0002      	movs	r2, r0
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	4a2f      	ldr	r2, [pc, #188]	@ (800667c <HAL_RCC_ClockConfig+0x1f4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e054      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2238      	movs	r2, #56	@ 0x38
 80065cc:	401a      	ands	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d1ec      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065d8:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2207      	movs	r2, #7
 80065de:	4013      	ands	r3, r2
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d21e      	bcs.n	8006624 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e6:	4b24      	ldr	r3, [pc, #144]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2207      	movs	r2, #7
 80065ec:	4393      	bics	r3, r2
 80065ee:	0019      	movs	r1, r3
 80065f0:	4b21      	ldr	r3, [pc, #132]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065f8:	f7fe f924 	bl	8004844 <HAL_GetTick>
 80065fc:	0003      	movs	r3, r0
 80065fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006600:	e009      	b.n	8006616 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006602:	f7fe f91f 	bl	8004844 <HAL_GetTick>
 8006606:	0002      	movs	r2, r0
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	4a1b      	ldr	r2, [pc, #108]	@ (800667c <HAL_RCC_ClockConfig+0x1f4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e02c      	b.n	8006670 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006616:	4b18      	ldr	r3, [pc, #96]	@ (8006678 <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2207      	movs	r2, #7
 800661c:	4013      	ands	r3, r2
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d1ee      	bne.n	8006602 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2204      	movs	r2, #4
 800662a:	4013      	ands	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800662e:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <HAL_RCC_ClockConfig+0x200>)
 8006634:	4013      	ands	r3, r2
 8006636:	0019      	movs	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006642:	f000 f829 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8006646:	0001      	movs	r1, r0
 8006648:	4b0d      	ldr	r3, [pc, #52]	@ (8006680 <HAL_RCC_ClockConfig+0x1f8>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	220f      	movs	r2, #15
 8006650:	401a      	ands	r2, r3
 8006652:	4b0e      	ldr	r3, [pc, #56]	@ (800668c <HAL_RCC_ClockConfig+0x204>)
 8006654:	0092      	lsls	r2, r2, #2
 8006656:	58d3      	ldr	r3, [r2, r3]
 8006658:	221f      	movs	r2, #31
 800665a:	4013      	ands	r3, r2
 800665c:	000a      	movs	r2, r1
 800665e:	40da      	lsrs	r2, r3
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <HAL_RCC_ClockConfig+0x208>)
 8006662:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <HAL_RCC_ClockConfig+0x20c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0018      	movs	r0, r3
 800666a:	f7fe f88f 	bl	800478c <HAL_InitTick>
 800666e:	0003      	movs	r3, r0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40022000 	.word	0x40022000
 800667c:	00001388 	.word	0x00001388
 8006680:	40021000 	.word	0x40021000
 8006684:	fffff0ff 	.word	0xfffff0ff
 8006688:	ffff8fff 	.word	0xffff8fff
 800668c:	0800a650 	.word	0x0800a650
 8006690:	20000000 	.word	0x20000000
 8006694:	20000004 	.word	0x20000004

08006698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800669e:	4b3c      	ldr	r3, [pc, #240]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2238      	movs	r2, #56	@ 0x38
 80066a4:	4013      	ands	r3, r2
 80066a6:	d10f      	bne.n	80066c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80066a8:	4b39      	ldr	r3, [pc, #228]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	0adb      	lsrs	r3, r3, #11
 80066ae:	2207      	movs	r2, #7
 80066b0:	4013      	ands	r3, r2
 80066b2:	2201      	movs	r2, #1
 80066b4:	409a      	lsls	r2, r3
 80066b6:	0013      	movs	r3, r2
 80066b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	4835      	ldr	r0, [pc, #212]	@ (8006794 <HAL_RCC_GetSysClockFreq+0xfc>)
 80066be:	f7f9 fd3d 	bl	800013c <__udivsi3>
 80066c2:	0003      	movs	r3, r0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e05d      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c8:	4b31      	ldr	r3, [pc, #196]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2238      	movs	r2, #56	@ 0x38
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d102      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066d4:	4b30      	ldr	r3, [pc, #192]	@ (8006798 <HAL_RCC_GetSysClockFreq+0x100>)
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	e054      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066da:	4b2d      	ldr	r3, [pc, #180]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2238      	movs	r2, #56	@ 0x38
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d138      	bne.n	8006758 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80066e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2203      	movs	r2, #3
 80066ec:	4013      	ands	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066f0:	4b27      	ldr	r3, [pc, #156]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	091b      	lsrs	r3, r3, #4
 80066f6:	2207      	movs	r2, #7
 80066f8:	4013      	ands	r3, r2
 80066fa:	3301      	adds	r3, #1
 80066fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d10d      	bne.n	8006720 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	4824      	ldr	r0, [pc, #144]	@ (8006798 <HAL_RCC_GetSysClockFreq+0x100>)
 8006708:	f7f9 fd18 	bl	800013c <__udivsi3>
 800670c:	0003      	movs	r3, r0
 800670e:	0019      	movs	r1, r3
 8006710:	4b1f      	ldr	r3, [pc, #124]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	227f      	movs	r2, #127	@ 0x7f
 8006718:	4013      	ands	r3, r2
 800671a:	434b      	muls	r3, r1
 800671c:	617b      	str	r3, [r7, #20]
        break;
 800671e:	e00d      	b.n	800673c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	481c      	ldr	r0, [pc, #112]	@ (8006794 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006724:	f7f9 fd0a 	bl	800013c <__udivsi3>
 8006728:	0003      	movs	r3, r0
 800672a:	0019      	movs	r1, r3
 800672c:	4b18      	ldr	r3, [pc, #96]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	227f      	movs	r2, #127	@ 0x7f
 8006734:	4013      	ands	r3, r2
 8006736:	434b      	muls	r3, r1
 8006738:	617b      	str	r3, [r7, #20]
        break;
 800673a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800673c:	4b14      	ldr	r3, [pc, #80]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	0f5b      	lsrs	r3, r3, #29
 8006742:	2207      	movs	r2, #7
 8006744:	4013      	ands	r3, r2
 8006746:	3301      	adds	r3, #1
 8006748:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	6978      	ldr	r0, [r7, #20]
 800674e:	f7f9 fcf5 	bl	800013c <__udivsi3>
 8006752:	0003      	movs	r3, r0
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	e015      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006758:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2238      	movs	r2, #56	@ 0x38
 800675e:	4013      	ands	r3, r2
 8006760:	2b20      	cmp	r3, #32
 8006762:	d103      	bne.n	800676c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006764:	2380      	movs	r3, #128	@ 0x80
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e00b      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800676c:	4b08      	ldr	r3, [pc, #32]	@ (8006790 <HAL_RCC_GetSysClockFreq+0xf8>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2238      	movs	r2, #56	@ 0x38
 8006772:	4013      	ands	r3, r2
 8006774:	2b18      	cmp	r3, #24
 8006776:	d103      	bne.n	8006780 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006778:	23fa      	movs	r3, #250	@ 0xfa
 800677a:	01db      	lsls	r3, r3, #7
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	e001      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006784:	693b      	ldr	r3, [r7, #16]
}
 8006786:	0018      	movs	r0, r3
 8006788:	46bd      	mov	sp, r7
 800678a:	b006      	add	sp, #24
 800678c:	bd80      	pop	{r7, pc}
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	40021000 	.word	0x40021000
 8006794:	00f42400 	.word	0x00f42400
 8006798:	007a1200 	.word	0x007a1200

0800679c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <HAL_RCC_GetHCLKFreq+0x10>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	20000000 	.word	0x20000000

080067b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80067b4:	f7ff fff2 	bl	800679c <HAL_RCC_GetHCLKFreq>
 80067b8:	0004      	movs	r4, r0
 80067ba:	f7ff fb3f 	bl	8005e3c <LL_RCC_GetAPB1Prescaler>
 80067be:	0003      	movs	r3, r0
 80067c0:	0b1a      	lsrs	r2, r3, #12
 80067c2:	4b05      	ldr	r3, [pc, #20]	@ (80067d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067c4:	0092      	lsls	r2, r2, #2
 80067c6:	58d3      	ldr	r3, [r2, r3]
 80067c8:	221f      	movs	r2, #31
 80067ca:	4013      	ands	r3, r2
 80067cc:	40dc      	lsrs	r4, r3
 80067ce:	0023      	movs	r3, r4
}
 80067d0:	0018      	movs	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bdb0      	pop	{r4, r5, r7, pc}
 80067d6:	46c0      	nop			@ (mov r8, r8)
 80067d8:	0800a690 	.word	0x0800a690

080067dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80067e4:	2313      	movs	r3, #19
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80067ec:	2312      	movs	r3, #18
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	2380      	movs	r3, #128	@ 0x80
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	4013      	ands	r3, r2
 80067fe:	d100      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006800:	e0a3      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006802:	2011      	movs	r0, #17
 8006804:	183b      	adds	r3, r7, r0
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4ba5      	ldr	r3, [pc, #660]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800680c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	055b      	lsls	r3, r3, #21
 8006812:	4013      	ands	r3, r2
 8006814:	d110      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	4ba2      	ldr	r3, [pc, #648]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800681a:	4ba1      	ldr	r3, [pc, #644]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800681c:	2180      	movs	r1, #128	@ 0x80
 800681e:	0549      	lsls	r1, r1, #21
 8006820:	430a      	orrs	r2, r1
 8006822:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006824:	4b9e      	ldr	r3, [pc, #632]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006828:	2380      	movs	r3, #128	@ 0x80
 800682a:	055b      	lsls	r3, r3, #21
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006832:	183b      	adds	r3, r7, r0
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006838:	4b9a      	ldr	r3, [pc, #616]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b99      	ldr	r3, [pc, #612]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800683e:	2180      	movs	r1, #128	@ 0x80
 8006840:	0049      	lsls	r1, r1, #1
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006846:	f7fd fffd 	bl	8004844 <HAL_GetTick>
 800684a:	0003      	movs	r3, r0
 800684c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800684e:	e00b      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006850:	f7fd fff8 	bl	8004844 <HAL_GetTick>
 8006854:	0002      	movs	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d904      	bls.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800685e:	2313      	movs	r3, #19
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	2203      	movs	r2, #3
 8006864:	701a      	strb	r2, [r3, #0]
        break;
 8006866:	e005      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006868:	4b8e      	ldr	r3, [pc, #568]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4013      	ands	r3, r2
 8006872:	d0ed      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006874:	2313      	movs	r3, #19
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d154      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800687e:	4b88      	ldr	r3, [pc, #544]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006880:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006882:	23c0      	movs	r3, #192	@ 0xc0
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4013      	ands	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d019      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d014      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800689a:	4b81      	ldr	r3, [pc, #516]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800689c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689e:	4a82      	ldr	r2, [pc, #520]	@ (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a4:	4b7e      	ldr	r3, [pc, #504]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068a8:	4b7d      	ldr	r3, [pc, #500]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068aa:	2180      	movs	r1, #128	@ 0x80
 80068ac:	0249      	lsls	r1, r1, #9
 80068ae:	430a      	orrs	r2, r1
 80068b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b2:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068b6:	4b7a      	ldr	r3, [pc, #488]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068b8:	497c      	ldr	r1, [pc, #496]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80068ba:	400a      	ands	r2, r1
 80068bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068be:	4b78      	ldr	r3, [pc, #480]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2201      	movs	r2, #1
 80068c8:	4013      	ands	r3, r2
 80068ca:	d016      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068cc:	f7fd ffba 	bl	8004844 <HAL_GetTick>
 80068d0:	0003      	movs	r3, r0
 80068d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d4:	e00c      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fd ffb5 	bl	8004844 <HAL_GetTick>
 80068da:	0002      	movs	r2, r0
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	4a73      	ldr	r2, [pc, #460]	@ (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d904      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80068e6:	2313      	movs	r3, #19
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	2203      	movs	r2, #3
 80068ec:	701a      	strb	r2, [r3, #0]
            break;
 80068ee:	e004      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f0:	4b6b      	ldr	r3, [pc, #428]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80068f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f4:	2202      	movs	r2, #2
 80068f6:	4013      	ands	r3, r2
 80068f8:	d0ed      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80068fa:	2313      	movs	r3, #19
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006904:	4b66      	ldr	r3, [pc, #408]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006908:	4a67      	ldr	r2, [pc, #412]	@ (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800690a:	4013      	ands	r3, r2
 800690c:	0019      	movs	r1, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006912:	4b63      	ldr	r3, [pc, #396]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006914:	430a      	orrs	r2, r1
 8006916:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006918:	e00c      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800691a:	2312      	movs	r3, #18
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	2213      	movs	r2, #19
 8006920:	18ba      	adds	r2, r7, r2
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	e005      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	2312      	movs	r3, #18
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	2213      	movs	r2, #19
 800692e:	18ba      	adds	r2, r7, r2
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006934:	2311      	movs	r3, #17
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693e:	4b58      	ldr	r3, [pc, #352]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006942:	4b57      	ldr	r3, [pc, #348]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006944:	495b      	ldr	r1, [pc, #364]	@ (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006946:	400a      	ands	r2, r1
 8006948:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2201      	movs	r2, #1
 8006950:	4013      	ands	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006954:	4b52      	ldr	r3, [pc, #328]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006958:	2203      	movs	r2, #3
 800695a:	4393      	bics	r3, r2
 800695c:	0019      	movs	r1, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006964:	430a      	orrs	r2, r1
 8006966:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2210      	movs	r2, #16
 800696e:	4013      	ands	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006976:	4a50      	ldr	r2, [pc, #320]	@ (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006978:	4013      	ands	r3, r2
 800697a:	0019      	movs	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	4b47      	ldr	r3, [pc, #284]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006982:	430a      	orrs	r2, r1
 8006984:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4013      	ands	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006992:	4b43      	ldr	r3, [pc, #268]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006996:	4a49      	ldr	r2, [pc, #292]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006998:	4013      	ands	r3, r2
 800699a:	0019      	movs	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069a2:	430a      	orrs	r2, r1
 80069a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	2380      	movs	r3, #128	@ 0x80
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4013      	ands	r3, r2
 80069b0:	d009      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069b2:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	4a42      	ldr	r2, [pc, #264]	@ (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	4b37      	ldr	r3, [pc, #220]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069c2:	430a      	orrs	r2, r1
 80069c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2220      	movs	r2, #32
 80069cc:	4013      	ands	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069d0:	4b33      	ldr	r3, [pc, #204]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	4b30      	ldr	r3, [pc, #192]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069e0:	430a      	orrs	r2, r1
 80069e2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	2380      	movs	r3, #128	@ 0x80
 80069ea:	01db      	lsls	r3, r3, #7
 80069ec:	4013      	ands	r3, r2
 80069ee:	d015      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069f0:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	0899      	lsrs	r1, r3, #2
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80069fe:	430a      	orrs	r2, r1
 8006a00:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	2380      	movs	r3, #128	@ 0x80
 8006a08:	05db      	lsls	r3, r3, #23
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d106      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006a0e:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	4b23      	ldr	r3, [pc, #140]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a14:	2180      	movs	r1, #128	@ 0x80
 8006a16:	0249      	lsls	r1, r1, #9
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	039b      	lsls	r3, r3, #14
 8006a24:	4013      	ands	r3, r2
 8006a26:	d016      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006a28:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2c:	4a26      	ldr	r2, [pc, #152]	@ (8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	0019      	movs	r1, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	03db      	lsls	r3, r3, #15
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	4b14      	ldr	r3, [pc, #80]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a4e:	2180      	movs	r1, #128	@ 0x80
 8006a50:	0449      	lsls	r1, r1, #17
 8006a52:	430a      	orrs	r2, r1
 8006a54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	2380      	movs	r3, #128	@ 0x80
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d016      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006a62:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a66:	4a19      	ldr	r2, [pc, #100]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	0019      	movs	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a72:	430a      	orrs	r2, r1
 8006a74:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	2380      	movs	r3, #128	@ 0x80
 8006a7c:	01db      	lsls	r3, r3, #7
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d106      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006a82:	4b07      	ldr	r3, [pc, #28]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006a88:	2180      	movs	r1, #128	@ 0x80
 8006a8a:	0249      	lsls	r1, r1, #9
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006a90:	2312      	movs	r3, #18
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	781b      	ldrb	r3, [r3, #0]
}
 8006a96:	0018      	movs	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	b006      	add	sp, #24
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	46c0      	nop			@ (mov r8, r8)
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	fffffcff 	.word	0xfffffcff
 8006aac:	fffeffff 	.word	0xfffeffff
 8006ab0:	00001388 	.word	0x00001388
 8006ab4:	efffffff 	.word	0xefffffff
 8006ab8:	fffff3ff 	.word	0xfffff3ff
 8006abc:	fff3ffff 	.word	0xfff3ffff
 8006ac0:	ffcfffff 	.word	0xffcfffff
 8006ac4:	ffffcfff 	.word	0xffffcfff
 8006ac8:	ffbfffff 	.word	0xffbfffff
 8006acc:	ffff3fff 	.word	0xffff3fff

08006ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e046      	b.n	8006b70 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2288      	movs	r2, #136	@ 0x88
 8006ae6:	589b      	ldr	r3, [r3, r2]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2284      	movs	r2, #132	@ 0x84
 8006af0:	2100      	movs	r1, #0
 8006af2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	0018      	movs	r0, r3
 8006af8:	f7fc fd50 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2288      	movs	r2, #136	@ 0x88
 8006b00:	2124      	movs	r1, #36	@ 0x24
 8006b02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2101      	movs	r1, #1
 8006b10:	438a      	bics	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f000 fb48 	bl	80071b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	0018      	movs	r0, r3
 8006b28:	f000 f8cc 	bl	8006cc4 <UART_SetConfig>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e01c      	b.n	8006b70 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	490d      	ldr	r1, [pc, #52]	@ (8006b78 <HAL_UART_Init+0xa8>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	212a      	movs	r1, #42	@ 0x2a
 8006b52:	438a      	bics	r2, r1
 8006b54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2101      	movs	r1, #1
 8006b62:	430a      	orrs	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f000 fbd7 	bl	800731c <UART_CheckIdleState>
 8006b6e:	0003      	movs	r3, r0
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	ffffb7ff 	.word	0xffffb7ff

08006b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	@ 0x28
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	1dbb      	adds	r3, r7, #6
 8006b8a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2288      	movs	r2, #136	@ 0x88
 8006b90:	589b      	ldr	r3, [r3, r2]
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d000      	beq.n	8006b98 <HAL_UART_Transmit+0x1c>
 8006b96:	e090      	b.n	8006cba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_UART_Transmit+0x2a>
 8006b9e:	1dbb      	adds	r3, r7, #6
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e088      	b.n	8006cbc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	2380      	movs	r3, #128	@ 0x80
 8006bb0:	015b      	lsls	r3, r3, #5
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d109      	bne.n	8006bca <HAL_UART_Transmit+0x4e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d105      	bne.n	8006bca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d001      	beq.n	8006bca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e078      	b.n	8006cbc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2290      	movs	r2, #144	@ 0x90
 8006bce:	2100      	movs	r1, #0
 8006bd0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2288      	movs	r2, #136	@ 0x88
 8006bd6:	2121      	movs	r1, #33	@ 0x21
 8006bd8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bda:	f7fd fe33 	bl	8004844 <HAL_GetTick>
 8006bde:	0003      	movs	r3, r0
 8006be0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1dba      	adds	r2, r7, #6
 8006be6:	2154      	movs	r1, #84	@ 0x54
 8006be8:	8812      	ldrh	r2, [r2, #0]
 8006bea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1dba      	adds	r2, r7, #6
 8006bf0:	2156      	movs	r1, #86	@ 0x56
 8006bf2:	8812      	ldrh	r2, [r2, #0]
 8006bf4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	2380      	movs	r3, #128	@ 0x80
 8006bfc:	015b      	lsls	r3, r3, #5
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d108      	bne.n	8006c14 <HAL_UART_Transmit+0x98>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e003      	b.n	8006c1c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c1c:	e030      	b.n	8006c80 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	0013      	movs	r3, r2
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2180      	movs	r1, #128	@ 0x80
 8006c2c:	f000 fc20 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 8006c30:	1e03      	subs	r3, r0, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2288      	movs	r2, #136	@ 0x88
 8006c38:	2120      	movs	r1, #32
 8006c3a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e03d      	b.n	8006cbc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	05d2      	lsls	r2, r2, #23
 8006c52:	0dd2      	lsrs	r2, r2, #23
 8006c54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3302      	adds	r3, #2
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	e007      	b.n	8006c6e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2256      	movs	r2, #86	@ 0x56
 8006c72:	5a9b      	ldrh	r3, [r3, r2]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b299      	uxth	r1, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2256      	movs	r2, #86	@ 0x56
 8006c7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2256      	movs	r2, #86	@ 0x56
 8006c84:	5a9b      	ldrh	r3, [r3, r2]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1c8      	bne.n	8006c1e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	0013      	movs	r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	2140      	movs	r1, #64	@ 0x40
 8006c9a:	f000 fbe9 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d005      	beq.n	8006cae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2288      	movs	r2, #136	@ 0x88
 8006ca6:	2120      	movs	r1, #32
 8006ca8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e006      	b.n	8006cbc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2288      	movs	r2, #136	@ 0x88
 8006cb2:	2120      	movs	r1, #32
 8006cb4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e000      	b.n	8006cbc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006cba:	2302      	movs	r3, #2
  }
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b008      	add	sp, #32
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b5b0      	push	{r4, r5, r7, lr}
 8006cc6:	b090      	sub	sp, #64	@ 0x40
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ccc:	231a      	movs	r3, #26
 8006cce:	2220      	movs	r2, #32
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	19db      	adds	r3, r3, r7
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4ac4      	ldr	r2, [pc, #784]	@ (8007008 <UART_SetConfig+0x344>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d02:	430b      	orrs	r3, r1
 8006d04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4abf      	ldr	r2, [pc, #764]	@ (800700c <UART_SetConfig+0x348>)
 8006d0e:	4013      	ands	r3, r2
 8006d10:	0018      	movs	r0, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	68d9      	ldr	r1, [r3, #12]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	0003      	movs	r3, r0
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4ab9      	ldr	r2, [pc, #740]	@ (8007010 <UART_SetConfig+0x34c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d36:	4313      	orrs	r3, r2
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4ab4      	ldr	r2, [pc, #720]	@ (8007014 <UART_SetConfig+0x350>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	0019      	movs	r1, r3
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	220f      	movs	r2, #15
 8006d58:	4393      	bics	r3, r2
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	0003      	movs	r3, r0
 8006d66:	430b      	orrs	r3, r1
 8006d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4aaa      	ldr	r2, [pc, #680]	@ (8007018 <UART_SetConfig+0x354>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d131      	bne.n	8006dd8 <UART_SetConfig+0x114>
 8006d74:	4ba9      	ldr	r3, [pc, #676]	@ (800701c <UART_SetConfig+0x358>)
 8006d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d78:	2203      	movs	r2, #3
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d01d      	beq.n	8006dbc <UART_SetConfig+0xf8>
 8006d80:	d823      	bhi.n	8006dca <UART_SetConfig+0x106>
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d00c      	beq.n	8006da0 <UART_SetConfig+0xdc>
 8006d86:	d820      	bhi.n	8006dca <UART_SetConfig+0x106>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <UART_SetConfig+0xce>
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d00e      	beq.n	8006dae <UART_SetConfig+0xea>
 8006d90:	e01b      	b.n	8006dca <UART_SetConfig+0x106>
 8006d92:	231b      	movs	r3, #27
 8006d94:	2220      	movs	r2, #32
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	19db      	adds	r3, r3, r7
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e071      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006da0:	231b      	movs	r3, #27
 8006da2:	2220      	movs	r2, #32
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	19db      	adds	r3, r3, r7
 8006da8:	2202      	movs	r2, #2
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e06a      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006dae:	231b      	movs	r3, #27
 8006db0:	2220      	movs	r2, #32
 8006db2:	189b      	adds	r3, r3, r2
 8006db4:	19db      	adds	r3, r3, r7
 8006db6:	2204      	movs	r2, #4
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e063      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006dbc:	231b      	movs	r3, #27
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	189b      	adds	r3, r3, r2
 8006dc2:	19db      	adds	r3, r3, r7
 8006dc4:	2208      	movs	r2, #8
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e05c      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006dca:	231b      	movs	r3, #27
 8006dcc:	2220      	movs	r2, #32
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	19db      	adds	r3, r3, r7
 8006dd2:	2210      	movs	r2, #16
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e055      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a90      	ldr	r2, [pc, #576]	@ (8007020 <UART_SetConfig+0x35c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d106      	bne.n	8006df0 <UART_SetConfig+0x12c>
 8006de2:	231b      	movs	r3, #27
 8006de4:	2220      	movs	r2, #32
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	19db      	adds	r3, r3, r7
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e049      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a86      	ldr	r2, [pc, #536]	@ (8007010 <UART_SetConfig+0x34c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d13e      	bne.n	8006e78 <UART_SetConfig+0x1b4>
 8006dfa:	4b88      	ldr	r3, [pc, #544]	@ (800701c <UART_SetConfig+0x358>)
 8006dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dfe:	23c0      	movs	r3, #192	@ 0xc0
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	4013      	ands	r3, r2
 8006e04:	22c0      	movs	r2, #192	@ 0xc0
 8006e06:	0112      	lsls	r2, r2, #4
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d027      	beq.n	8006e5c <UART_SetConfig+0x198>
 8006e0c:	22c0      	movs	r2, #192	@ 0xc0
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d82a      	bhi.n	8006e6a <UART_SetConfig+0x1a6>
 8006e14:	2280      	movs	r2, #128	@ 0x80
 8006e16:	0112      	lsls	r2, r2, #4
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d011      	beq.n	8006e40 <UART_SetConfig+0x17c>
 8006e1c:	2280      	movs	r2, #128	@ 0x80
 8006e1e:	0112      	lsls	r2, r2, #4
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d822      	bhi.n	8006e6a <UART_SetConfig+0x1a6>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <UART_SetConfig+0x16e>
 8006e28:	2280      	movs	r2, #128	@ 0x80
 8006e2a:	00d2      	lsls	r2, r2, #3
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00e      	beq.n	8006e4e <UART_SetConfig+0x18a>
 8006e30:	e01b      	b.n	8006e6a <UART_SetConfig+0x1a6>
 8006e32:	231b      	movs	r3, #27
 8006e34:	2220      	movs	r2, #32
 8006e36:	189b      	adds	r3, r3, r2
 8006e38:	19db      	adds	r3, r3, r7
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e021      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e40:	231b      	movs	r3, #27
 8006e42:	2220      	movs	r2, #32
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	19db      	adds	r3, r3, r7
 8006e48:	2202      	movs	r2, #2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e01a      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e4e:	231b      	movs	r3, #27
 8006e50:	2220      	movs	r2, #32
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	19db      	adds	r3, r3, r7
 8006e56:	2204      	movs	r2, #4
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	e013      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e5c:	231b      	movs	r3, #27
 8006e5e:	2220      	movs	r2, #32
 8006e60:	189b      	adds	r3, r3, r2
 8006e62:	19db      	adds	r3, r3, r7
 8006e64:	2208      	movs	r2, #8
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e00c      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e6a:	231b      	movs	r3, #27
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	19db      	adds	r3, r3, r7
 8006e72:	2210      	movs	r2, #16
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e005      	b.n	8006e84 <UART_SetConfig+0x1c0>
 8006e78:	231b      	movs	r3, #27
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	189b      	adds	r3, r3, r2
 8006e7e:	19db      	adds	r3, r3, r7
 8006e80:	2210      	movs	r2, #16
 8006e82:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a61      	ldr	r2, [pc, #388]	@ (8007010 <UART_SetConfig+0x34c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d000      	beq.n	8006e90 <UART_SetConfig+0x1cc>
 8006e8e:	e092      	b.n	8006fb6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e90:	231b      	movs	r3, #27
 8006e92:	2220      	movs	r2, #32
 8006e94:	189b      	adds	r3, r3, r2
 8006e96:	19db      	adds	r3, r3, r7
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d015      	beq.n	8006eca <UART_SetConfig+0x206>
 8006e9e:	dc18      	bgt.n	8006ed2 <UART_SetConfig+0x20e>
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d00d      	beq.n	8006ec0 <UART_SetConfig+0x1fc>
 8006ea4:	dc15      	bgt.n	8006ed2 <UART_SetConfig+0x20e>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <UART_SetConfig+0x1ec>
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d005      	beq.n	8006eba <UART_SetConfig+0x1f6>
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb0:	f7ff fc7e 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eb8:	e014      	b.n	8006ee4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eba:	4b5a      	ldr	r3, [pc, #360]	@ (8007024 <UART_SetConfig+0x360>)
 8006ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ebe:	e011      	b.n	8006ee4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec0:	f7ff fbea 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec8:	e00c      	b.n	8006ee4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eca:	2380      	movs	r3, #128	@ 0x80
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed0:	e008      	b.n	8006ee4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006ed6:	231a      	movs	r3, #26
 8006ed8:	2220      	movs	r2, #32
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	19db      	adds	r3, r3, r7
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
        break;
 8006ee2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d100      	bne.n	8006eec <UART_SetConfig+0x228>
 8006eea:	e147      	b.n	800717c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8007028 <UART_SetConfig+0x364>)
 8006ef2:	0052      	lsls	r2, r2, #1
 8006ef4:	5ad3      	ldrh	r3, [r2, r3]
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006efa:	f7f9 f91f 	bl	800013c <__udivsi3>
 8006efe:	0003      	movs	r3, r0
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	0013      	movs	r3, r2
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d305      	bcc.n	8006f1e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d906      	bls.n	8006f2c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8006f1e:	231a      	movs	r3, #26
 8006f20:	2220      	movs	r2, #32
 8006f22:	189b      	adds	r3, r3, r2
 8006f24:	19db      	adds	r3, r3, r7
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e127      	b.n	800717c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	2300      	movs	r3, #0
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f38:	4b3b      	ldr	r3, [pc, #236]	@ (8007028 <UART_SetConfig+0x364>)
 8006f3a:	0052      	lsls	r2, r2, #1
 8006f3c:	5ad3      	ldrh	r3, [r2, r3]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	69b8      	ldr	r0, [r7, #24]
 8006f4a:	69f9      	ldr	r1, [r7, #28]
 8006f4c:	f7f9 fae4 	bl	8000518 <__aeabi_uldivmod>
 8006f50:	0002      	movs	r2, r0
 8006f52:	000b      	movs	r3, r1
 8006f54:	0e11      	lsrs	r1, r2, #24
 8006f56:	021d      	lsls	r5, r3, #8
 8006f58:	430d      	orrs	r5, r1
 8006f5a:	0214      	lsls	r4, r2, #8
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68b8      	ldr	r0, [r7, #8]
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	1900      	adds	r0, r0, r4
 8006f6e:	4169      	adcs	r1, r5
 8006f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f7f9 facb 	bl	8000518 <__aeabi_uldivmod>
 8006f82:	0002      	movs	r2, r0
 8006f84:	000b      	movs	r3, r1
 8006f86:	0013      	movs	r3, r2
 8006f88:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f8c:	23c0      	movs	r3, #192	@ 0xc0
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d309      	bcc.n	8006fa8 <UART_SetConfig+0x2e4>
 8006f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	035b      	lsls	r3, r3, #13
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d204      	bcs.n	8006fa8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	e0e9      	b.n	800717c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006fa8:	231a      	movs	r3, #26
 8006faa:	2220      	movs	r2, #32
 8006fac:	189b      	adds	r3, r3, r2
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e0e2      	b.n	800717c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	2380      	movs	r3, #128	@ 0x80
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d000      	beq.n	8006fc4 <UART_SetConfig+0x300>
 8006fc2:	e083      	b.n	80070cc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006fc4:	231b      	movs	r3, #27
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	189b      	adds	r3, r3, r2
 8006fca:	19db      	adds	r3, r3, r7
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d015      	beq.n	8006ffe <UART_SetConfig+0x33a>
 8006fd2:	dc2b      	bgt.n	800702c <UART_SetConfig+0x368>
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d00d      	beq.n	8006ff4 <UART_SetConfig+0x330>
 8006fd8:	dc28      	bgt.n	800702c <UART_SetConfig+0x368>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <UART_SetConfig+0x320>
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d005      	beq.n	8006fee <UART_SetConfig+0x32a>
 8006fe2:	e023      	b.n	800702c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7ff fbe4 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fec:	e027      	b.n	800703e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fee:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <UART_SetConfig+0x360>)
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff2:	e024      	b.n	800703e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff4:	f7ff fb50 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffc:	e01f      	b.n	800703e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffe:	2380      	movs	r3, #128	@ 0x80
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007004:	e01b      	b.n	800703e <UART_SetConfig+0x37a>
 8007006:	46c0      	nop			@ (mov r8, r8)
 8007008:	cfff69f3 	.word	0xcfff69f3
 800700c:	ffffcfff 	.word	0xffffcfff
 8007010:	40008000 	.word	0x40008000
 8007014:	11fff4ff 	.word	0x11fff4ff
 8007018:	40013800 	.word	0x40013800
 800701c:	40021000 	.word	0x40021000
 8007020:	40004400 	.word	0x40004400
 8007024:	00f42400 	.word	0x00f42400
 8007028:	0800ae28 	.word	0x0800ae28
      default:
        pclk = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007030:	231a      	movs	r3, #26
 8007032:	2220      	movs	r2, #32
 8007034:	189b      	adds	r3, r3, r2
 8007036:	19db      	adds	r3, r3, r7
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
        break;
 800703c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800703e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	d100      	bne.n	8007046 <UART_SetConfig+0x382>
 8007044:	e09a      	b.n	800717c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800704a:	4b58      	ldr	r3, [pc, #352]	@ (80071ac <UART_SetConfig+0x4e8>)
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	5ad3      	ldrh	r3, [r2, r3]
 8007050:	0019      	movs	r1, r3
 8007052:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007054:	f7f9 f872 	bl	800013c <__udivsi3>
 8007058:	0003      	movs	r3, r0
 800705a:	005a      	lsls	r2, r3, #1
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	18d2      	adds	r2, r2, r3
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	0019      	movs	r1, r3
 800706a:	0010      	movs	r0, r2
 800706c:	f7f9 f866 	bl	800013c <__udivsi3>
 8007070:	0003      	movs	r3, r0
 8007072:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d921      	bls.n	80070be <UART_SetConfig+0x3fa>
 800707a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707c:	2380      	movs	r3, #128	@ 0x80
 800707e:	025b      	lsls	r3, r3, #9
 8007080:	429a      	cmp	r2, r3
 8007082:	d21c      	bcs.n	80070be <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	b29a      	uxth	r2, r3
 8007088:	200e      	movs	r0, #14
 800708a:	2420      	movs	r4, #32
 800708c:	1903      	adds	r3, r0, r4
 800708e:	19db      	adds	r3, r3, r7
 8007090:	210f      	movs	r1, #15
 8007092:	438a      	bics	r2, r1
 8007094:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	b29b      	uxth	r3, r3
 800709c:	2207      	movs	r2, #7
 800709e:	4013      	ands	r3, r2
 80070a0:	b299      	uxth	r1, r3
 80070a2:	1903      	adds	r3, r0, r4
 80070a4:	19db      	adds	r3, r3, r7
 80070a6:	1902      	adds	r2, r0, r4
 80070a8:	19d2      	adds	r2, r2, r7
 80070aa:	8812      	ldrh	r2, [r2, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	1902      	adds	r2, r0, r4
 80070b6:	19d2      	adds	r2, r2, r7
 80070b8:	8812      	ldrh	r2, [r2, #0]
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	e05e      	b.n	800717c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80070be:	231a      	movs	r3, #26
 80070c0:	2220      	movs	r2, #32
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	19db      	adds	r3, r3, r7
 80070c6:	2201      	movs	r2, #1
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e057      	b.n	800717c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070cc:	231b      	movs	r3, #27
 80070ce:	2220      	movs	r2, #32
 80070d0:	189b      	adds	r3, r3, r2
 80070d2:	19db      	adds	r3, r3, r7
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d015      	beq.n	8007106 <UART_SetConfig+0x442>
 80070da:	dc18      	bgt.n	800710e <UART_SetConfig+0x44a>
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d00d      	beq.n	80070fc <UART_SetConfig+0x438>
 80070e0:	dc15      	bgt.n	800710e <UART_SetConfig+0x44a>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <UART_SetConfig+0x428>
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d005      	beq.n	80070f6 <UART_SetConfig+0x432>
 80070ea:	e010      	b.n	800710e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ec:	f7ff fb60 	bl	80067b0 <HAL_RCC_GetPCLK1Freq>
 80070f0:	0003      	movs	r3, r0
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f4:	e014      	b.n	8007120 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f6:	4b2e      	ldr	r3, [pc, #184]	@ (80071b0 <UART_SetConfig+0x4ec>)
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070fa:	e011      	b.n	8007120 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fc:	f7ff facc 	bl	8006698 <HAL_RCC_GetSysClockFreq>
 8007100:	0003      	movs	r3, r0
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007104:	e00c      	b.n	8007120 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007106:	2380      	movs	r3, #128	@ 0x80
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800710c:	e008      	b.n	8007120 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007112:	231a      	movs	r3, #26
 8007114:	2220      	movs	r2, #32
 8007116:	189b      	adds	r3, r3, r2
 8007118:	19db      	adds	r3, r3, r7
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
        break;
 800711e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02a      	beq.n	800717c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800712a:	4b20      	ldr	r3, [pc, #128]	@ (80071ac <UART_SetConfig+0x4e8>)
 800712c:	0052      	lsls	r2, r2, #1
 800712e:	5ad3      	ldrh	r3, [r2, r3]
 8007130:	0019      	movs	r1, r3
 8007132:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007134:	f7f9 f802 	bl	800013c <__udivsi3>
 8007138:	0003      	movs	r3, r0
 800713a:	001a      	movs	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	18d2      	adds	r2, r2, r3
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	0019      	movs	r1, r3
 800714a:	0010      	movs	r0, r2
 800714c:	f7f8 fff6 	bl	800013c <__udivsi3>
 8007150:	0003      	movs	r3, r0
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d90a      	bls.n	8007170 <UART_SetConfig+0x4ac>
 800715a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715c:	2380      	movs	r3, #128	@ 0x80
 800715e:	025b      	lsls	r3, r3, #9
 8007160:	429a      	cmp	r2, r3
 8007162:	d205      	bcs.n	8007170 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007166:	b29a      	uxth	r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e005      	b.n	800717c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007170:	231a      	movs	r3, #26
 8007172:	2220      	movs	r2, #32
 8007174:	189b      	adds	r3, r3, r2
 8007176:	19db      	adds	r3, r3, r7
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	226a      	movs	r2, #106	@ 0x6a
 8007180:	2101      	movs	r1, #1
 8007182:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007186:	2268      	movs	r2, #104	@ 0x68
 8007188:	2101      	movs	r1, #1
 800718a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	2200      	movs	r2, #0
 8007190:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	2200      	movs	r2, #0
 8007196:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007198:	231a      	movs	r3, #26
 800719a:	2220      	movs	r2, #32
 800719c:	189b      	adds	r3, r3, r2
 800719e:	19db      	adds	r3, r3, r7
 80071a0:	781b      	ldrb	r3, [r3, #0]
}
 80071a2:	0018      	movs	r0, r3
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b010      	add	sp, #64	@ 0x40
 80071a8:	bdb0      	pop	{r4, r5, r7, pc}
 80071aa:	46c0      	nop			@ (mov r8, r8)
 80071ac:	0800ae28 	.word	0x0800ae28
 80071b0:	00f42400 	.word	0x00f42400

080071b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2208      	movs	r2, #8
 80071c2:	4013      	ands	r3, r2
 80071c4:	d00b      	beq.n	80071de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4a4a      	ldr	r2, [pc, #296]	@ (80072f8 <UART_AdvFeatureConfig+0x144>)
 80071ce:	4013      	ands	r3, r2
 80071d0:	0019      	movs	r1, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	2201      	movs	r2, #1
 80071e4:	4013      	ands	r3, r2
 80071e6:	d00b      	beq.n	8007200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	4a43      	ldr	r2, [pc, #268]	@ (80072fc <UART_AdvFeatureConfig+0x148>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	0019      	movs	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007204:	2202      	movs	r2, #2
 8007206:	4013      	ands	r3, r2
 8007208:	d00b      	beq.n	8007222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	4a3b      	ldr	r2, [pc, #236]	@ (8007300 <UART_AdvFeatureConfig+0x14c>)
 8007212:	4013      	ands	r3, r2
 8007214:	0019      	movs	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	2204      	movs	r2, #4
 8007228:	4013      	ands	r3, r2
 800722a:	d00b      	beq.n	8007244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	4a34      	ldr	r2, [pc, #208]	@ (8007304 <UART_AdvFeatureConfig+0x150>)
 8007234:	4013      	ands	r3, r2
 8007236:	0019      	movs	r1, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007248:	2210      	movs	r2, #16
 800724a:	4013      	ands	r3, r2
 800724c:	d00b      	beq.n	8007266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a2c      	ldr	r2, [pc, #176]	@ (8007308 <UART_AdvFeatureConfig+0x154>)
 8007256:	4013      	ands	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726a:	2220      	movs	r2, #32
 800726c:	4013      	ands	r3, r2
 800726e:	d00b      	beq.n	8007288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	4a25      	ldr	r2, [pc, #148]	@ (800730c <UART_AdvFeatureConfig+0x158>)
 8007278:	4013      	ands	r3, r2
 800727a:	0019      	movs	r1, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	2240      	movs	r2, #64	@ 0x40
 800728e:	4013      	ands	r3, r2
 8007290:	d01d      	beq.n	80072ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <UART_AdvFeatureConfig+0x15c>)
 800729a:	4013      	ands	r3, r2
 800729c:	0019      	movs	r1, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ae:	2380      	movs	r3, #128	@ 0x80
 80072b0:	035b      	lsls	r3, r3, #13
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d10b      	bne.n	80072ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <UART_AdvFeatureConfig+0x160>)
 80072be:	4013      	ands	r3, r2
 80072c0:	0019      	movs	r1, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d2:	2280      	movs	r2, #128	@ 0x80
 80072d4:	4013      	ands	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	4a0e      	ldr	r2, [pc, #56]	@ (8007318 <UART_AdvFeatureConfig+0x164>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]
  }
}
 80072f0:	46c0      	nop			@ (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b002      	add	sp, #8
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	ffff7fff 	.word	0xffff7fff
 80072fc:	fffdffff 	.word	0xfffdffff
 8007300:	fffeffff 	.word	0xfffeffff
 8007304:	fffbffff 	.word	0xfffbffff
 8007308:	ffffefff 	.word	0xffffefff
 800730c:	ffffdfff 	.word	0xffffdfff
 8007310:	ffefffff 	.word	0xffefffff
 8007314:	ff9fffff 	.word	0xff9fffff
 8007318:	fff7ffff 	.word	0xfff7ffff

0800731c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b092      	sub	sp, #72	@ 0x48
 8007320:	af02      	add	r7, sp, #8
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2290      	movs	r2, #144	@ 0x90
 8007328:	2100      	movs	r1, #0
 800732a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800732c:	f7fd fa8a 	bl	8004844 <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2208      	movs	r2, #8
 800733c:	4013      	ands	r3, r2
 800733e:	2b08      	cmp	r3, #8
 8007340:	d12d      	bne.n	800739e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007344:	2280      	movs	r2, #128	@ 0x80
 8007346:	0391      	lsls	r1, r2, #14
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4a47      	ldr	r2, [pc, #284]	@ (8007468 <UART_CheckIdleState+0x14c>)
 800734c:	9200      	str	r2, [sp, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	f000 f88e 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 8007354:	1e03      	subs	r3, r0, #0
 8007356:	d022      	beq.n	800739e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007358:	f3ef 8310 	mrs	r3, PRIMASK
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007362:	2301      	movs	r3, #1
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			@ (mov r8, r8)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2180      	movs	r1, #128	@ 0x80
 800737a:	438a      	bics	r2, r1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	f383 8810 	msr	PRIMASK, r3
}
 8007388:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2288      	movs	r2, #136	@ 0x88
 800738e:	2120      	movs	r1, #32
 8007390:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2284      	movs	r2, #132	@ 0x84
 8007396:	2100      	movs	r1, #0
 8007398:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e060      	b.n	8007460 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2204      	movs	r2, #4
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d146      	bne.n	800743a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ae:	2280      	movs	r2, #128	@ 0x80
 80073b0:	03d1      	lsls	r1, r2, #15
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007468 <UART_CheckIdleState+0x14c>)
 80073b6:	9200      	str	r2, [sp, #0]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f000 f859 	bl	8007470 <UART_WaitOnFlagUntilTimeout>
 80073be:	1e03      	subs	r3, r0, #0
 80073c0:	d03b      	beq.n	800743a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c2:	f3ef 8310 	mrs	r3, PRIMASK
 80073c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	2301      	movs	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4922      	ldr	r1, [pc, #136]	@ (800746c <UART_CheckIdleState+0x150>)
 80073e4:	400a      	ands	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f383 8810 	msr	PRIMASK, r3
}
 80073f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f4:	f3ef 8310 	mrs	r3, PRIMASK
 80073f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80073fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f383 8810 	msr	PRIMASK, r3
}
 8007408:	46c0      	nop			@ (mov r8, r8)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2101      	movs	r1, #1
 8007416:	438a      	bics	r2, r1
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f383 8810 	msr	PRIMASK, r3
}
 8007424:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	228c      	movs	r2, #140	@ 0x8c
 800742a:	2120      	movs	r1, #32
 800742c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2284      	movs	r2, #132	@ 0x84
 8007432:	2100      	movs	r1, #0
 8007434:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e012      	b.n	8007460 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2288      	movs	r2, #136	@ 0x88
 800743e:	2120      	movs	r1, #32
 8007440:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	228c      	movs	r2, #140	@ 0x8c
 8007446:	2120      	movs	r1, #32
 8007448:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2284      	movs	r2, #132	@ 0x84
 800745a:	2100      	movs	r1, #0
 800745c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b010      	add	sp, #64	@ 0x40
 8007466:	bd80      	pop	{r7, pc}
 8007468:	01ffffff 	.word	0x01ffffff
 800746c:	fffffedf 	.word	0xfffffedf

08007470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	1dfb      	adds	r3, r7, #7
 800747e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007480:	e051      	b.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	3301      	adds	r3, #1
 8007486:	d04e      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007488:	f7fd f9dc 	bl	8004844 <HAL_GetTick>
 800748c:	0002      	movs	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d302      	bcc.n	800749e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e051      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2204      	movs	r2, #4
 80074aa:	4013      	ands	r3, r2
 80074ac:	d03b      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b80      	cmp	r3, #128	@ 0x80
 80074b2:	d038      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b40      	cmp	r3, #64	@ 0x40
 80074b8:	d035      	beq.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	2208      	movs	r2, #8
 80074c2:	4013      	ands	r3, r2
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d111      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2208      	movs	r2, #8
 80074ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	0018      	movs	r0, r3
 80074d4:	f000 f83c 	bl	8007550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2290      	movs	r2, #144	@ 0x90
 80074dc:	2108      	movs	r1, #8
 80074de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2284      	movs	r2, #132	@ 0x84
 80074e4:	2100      	movs	r1, #0
 80074e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e02c      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69da      	ldr	r2, [r3, #28]
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	401a      	ands	r2, r3
 80074f8:	2380      	movs	r3, #128	@ 0x80
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d112      	bne.n	8007526 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2280      	movs	r2, #128	@ 0x80
 8007506:	0112      	lsls	r2, r2, #4
 8007508:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f81f 	bl	8007550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2290      	movs	r2, #144	@ 0x90
 8007516:	2120      	movs	r1, #32
 8007518:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2284      	movs	r2, #132	@ 0x84
 800751e:	2100      	movs	r1, #0
 8007520:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e00f      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	4013      	ands	r3, r2
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	425a      	negs	r2, r3
 8007536:	4153      	adcs	r3, r2
 8007538:	b2db      	uxtb	r3, r3
 800753a:	001a      	movs	r2, r3
 800753c:	1dfb      	adds	r3, r7, #7
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d09e      	beq.n	8007482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	0018      	movs	r0, r3
 8007548:	46bd      	mov	sp, r7
 800754a:	b004      	add	sp, #16
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08e      	sub	sp, #56	@ 0x38
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	617b      	str	r3, [r7, #20]
  return(result);
 800755e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
 8007562:	2301      	movs	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4926      	ldr	r1, [pc, #152]	@ (8007614 <UART_EndRxTransfer+0xc4>)
 800757a:	400a      	ands	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f383 8810 	msr	PRIMASK, r3
}
 8007588:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	623b      	str	r3, [r7, #32]
  return(result);
 8007590:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007592:	633b      	str	r3, [r7, #48]	@ 0x30
 8007594:	2301      	movs	r3, #1
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	f383 8810 	msr	PRIMASK, r3
}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	491b      	ldr	r1, [pc, #108]	@ (8007618 <UART_EndRxTransfer+0xc8>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	f383 8810 	msr	PRIMASK, r3
}
 80075ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d118      	bne.n	80075f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c4:	f3ef 8310 	mrs	r3, PRIMASK
 80075c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80075ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ce:	2301      	movs	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2110      	movs	r1, #16
 80075e6:	438a      	bics	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f383 8810 	msr	PRIMASK, r3
}
 80075f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	228c      	movs	r2, #140	@ 0x8c
 80075fa:	2120      	movs	r1, #32
 80075fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800760a:	46c0      	nop			@ (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b00e      	add	sp, #56	@ 0x38
 8007610:	bd80      	pop	{r7, pc}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	fffffedf 	.word	0xfffffedf
 8007618:	effffffe 	.word	0xeffffffe

0800761c <__cvt>:
 800761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761e:	001f      	movs	r7, r3
 8007620:	2300      	movs	r3, #0
 8007622:	0016      	movs	r6, r2
 8007624:	b08b      	sub	sp, #44	@ 0x2c
 8007626:	429f      	cmp	r7, r3
 8007628:	da04      	bge.n	8007634 <__cvt+0x18>
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	0609      	lsls	r1, r1, #24
 800762e:	187b      	adds	r3, r7, r1
 8007630:	001f      	movs	r7, r3
 8007632:	232d      	movs	r3, #45	@ 0x2d
 8007634:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007636:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007638:	7013      	strb	r3, [r2, #0]
 800763a:	2320      	movs	r3, #32
 800763c:	2203      	movs	r2, #3
 800763e:	439d      	bics	r5, r3
 8007640:	2d46      	cmp	r5, #70	@ 0x46
 8007642:	d007      	beq.n	8007654 <__cvt+0x38>
 8007644:	002b      	movs	r3, r5
 8007646:	3b45      	subs	r3, #69	@ 0x45
 8007648:	4259      	negs	r1, r3
 800764a:	414b      	adcs	r3, r1
 800764c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800764e:	3a01      	subs	r2, #1
 8007650:	18cb      	adds	r3, r1, r3
 8007652:	9310      	str	r3, [sp, #64]	@ 0x40
 8007654:	ab09      	add	r3, sp, #36	@ 0x24
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	ab08      	add	r3, sp, #32
 800765a:	9303      	str	r3, [sp, #12]
 800765c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007664:	0032      	movs	r2, r6
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	003b      	movs	r3, r7
 800766a:	f000 fec7 	bl	80083fc <_dtoa_r>
 800766e:	0004      	movs	r4, r0
 8007670:	2d47      	cmp	r5, #71	@ 0x47
 8007672:	d11b      	bne.n	80076ac <__cvt+0x90>
 8007674:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007676:	07db      	lsls	r3, r3, #31
 8007678:	d511      	bpl.n	800769e <__cvt+0x82>
 800767a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800767c:	18c3      	adds	r3, r0, r3
 800767e:	9307      	str	r3, [sp, #28]
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	0030      	movs	r0, r6
 8007686:	0039      	movs	r1, r7
 8007688:	f7f8 fede 	bl	8000448 <__aeabi_dcmpeq>
 800768c:	2800      	cmp	r0, #0
 800768e:	d001      	beq.n	8007694 <__cvt+0x78>
 8007690:	9b07      	ldr	r3, [sp, #28]
 8007692:	9309      	str	r3, [sp, #36]	@ 0x24
 8007694:	2230      	movs	r2, #48	@ 0x30
 8007696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007698:	9907      	ldr	r1, [sp, #28]
 800769a:	428b      	cmp	r3, r1
 800769c:	d320      	bcc.n	80076e0 <__cvt+0xc4>
 800769e:	0020      	movs	r0, r4
 80076a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80076a4:	1b1b      	subs	r3, r3, r4
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	b00b      	add	sp, #44	@ 0x2c
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076ae:	18c3      	adds	r3, r0, r3
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	2d46      	cmp	r5, #70	@ 0x46
 80076b4:	d1e4      	bne.n	8007680 <__cvt+0x64>
 80076b6:	7803      	ldrb	r3, [r0, #0]
 80076b8:	2b30      	cmp	r3, #48	@ 0x30
 80076ba:	d10c      	bne.n	80076d6 <__cvt+0xba>
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	0030      	movs	r0, r6
 80076c2:	0039      	movs	r1, r7
 80076c4:	f7f8 fec0 	bl	8000448 <__aeabi_dcmpeq>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d104      	bne.n	80076d6 <__cvt+0xba>
 80076cc:	2301      	movs	r3, #1
 80076ce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	18d3      	adds	r3, r2, r3
 80076de:	e7ce      	b.n	800767e <__cvt+0x62>
 80076e0:	1c59      	adds	r1, r3, #1
 80076e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e7d6      	b.n	8007696 <__cvt+0x7a>

080076e8 <__exponent>:
 80076e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ea:	232b      	movs	r3, #43	@ 0x2b
 80076ec:	0005      	movs	r5, r0
 80076ee:	000c      	movs	r4, r1
 80076f0:	b085      	sub	sp, #20
 80076f2:	7002      	strb	r2, [r0, #0]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	da01      	bge.n	80076fc <__exponent+0x14>
 80076f8:	424c      	negs	r4, r1
 80076fa:	3302      	adds	r3, #2
 80076fc:	706b      	strb	r3, [r5, #1]
 80076fe:	2c09      	cmp	r4, #9
 8007700:	dd2c      	ble.n	800775c <__exponent+0x74>
 8007702:	ab02      	add	r3, sp, #8
 8007704:	1dde      	adds	r6, r3, #7
 8007706:	0020      	movs	r0, r4
 8007708:	210a      	movs	r1, #10
 800770a:	f7f8 fe87 	bl	800041c <__aeabi_idivmod>
 800770e:	0037      	movs	r7, r6
 8007710:	3130      	adds	r1, #48	@ 0x30
 8007712:	3e01      	subs	r6, #1
 8007714:	0020      	movs	r0, r4
 8007716:	7031      	strb	r1, [r6, #0]
 8007718:	210a      	movs	r1, #10
 800771a:	9401      	str	r4, [sp, #4]
 800771c:	f7f8 fd98 	bl	8000250 <__divsi3>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	0004      	movs	r4, r0
 8007724:	2b63      	cmp	r3, #99	@ 0x63
 8007726:	dcee      	bgt.n	8007706 <__exponent+0x1e>
 8007728:	1eba      	subs	r2, r7, #2
 800772a:	1ca8      	adds	r0, r5, #2
 800772c:	0001      	movs	r1, r0
 800772e:	0013      	movs	r3, r2
 8007730:	3430      	adds	r4, #48	@ 0x30
 8007732:	7014      	strb	r4, [r2, #0]
 8007734:	ac02      	add	r4, sp, #8
 8007736:	3407      	adds	r4, #7
 8007738:	429c      	cmp	r4, r3
 800773a:	d80a      	bhi.n	8007752 <__exponent+0x6a>
 800773c:	2300      	movs	r3, #0
 800773e:	42a2      	cmp	r2, r4
 8007740:	d803      	bhi.n	800774a <__exponent+0x62>
 8007742:	3309      	adds	r3, #9
 8007744:	aa02      	add	r2, sp, #8
 8007746:	189b      	adds	r3, r3, r2
 8007748:	1bdb      	subs	r3, r3, r7
 800774a:	18c0      	adds	r0, r0, r3
 800774c:	1b40      	subs	r0, r0, r5
 800774e:	b005      	add	sp, #20
 8007750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007752:	781c      	ldrb	r4, [r3, #0]
 8007754:	3301      	adds	r3, #1
 8007756:	700c      	strb	r4, [r1, #0]
 8007758:	3101      	adds	r1, #1
 800775a:	e7eb      	b.n	8007734 <__exponent+0x4c>
 800775c:	2330      	movs	r3, #48	@ 0x30
 800775e:	18e4      	adds	r4, r4, r3
 8007760:	70ab      	strb	r3, [r5, #2]
 8007762:	1d28      	adds	r0, r5, #4
 8007764:	70ec      	strb	r4, [r5, #3]
 8007766:	e7f1      	b.n	800774c <__exponent+0x64>

08007768 <_printf_float>:
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b097      	sub	sp, #92	@ 0x5c
 800776c:	000d      	movs	r5, r1
 800776e:	920a      	str	r2, [sp, #40]	@ 0x28
 8007770:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007774:	9009      	str	r0, [sp, #36]	@ 0x24
 8007776:	f000 fd1f 	bl	80081b8 <_localeconv_r>
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	0018      	movs	r0, r3
 800777e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007780:	f7f8 fcc0 	bl	8000104 <strlen>
 8007784:	2300      	movs	r3, #0
 8007786:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007788:	9314      	str	r3, [sp, #80]	@ 0x50
 800778a:	7e2b      	ldrb	r3, [r5, #24]
 800778c:	2207      	movs	r2, #7
 800778e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	930e      	str	r3, [sp, #56]	@ 0x38
 8007794:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	05c9      	lsls	r1, r1, #23
 800779a:	d545      	bpl.n	8007828 <_printf_float+0xc0>
 800779c:	189b      	adds	r3, r3, r2
 800779e:	4393      	bics	r3, r2
 80077a0:	001a      	movs	r2, r3
 80077a2:	3208      	adds	r2, #8
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	681e      	ldr	r6, [r3, #0]
 80077aa:	685f      	ldr	r7, [r3, #4]
 80077ac:	007b      	lsls	r3, r7, #1
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80077b2:	9610      	str	r6, [sp, #64]	@ 0x40
 80077b4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80077b6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80077b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80077ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80077bc:	4ba7      	ldr	r3, [pc, #668]	@ (8007a5c <_printf_float+0x2f4>)
 80077be:	4252      	negs	r2, r2
 80077c0:	f7fb faac 	bl	8002d1c <__aeabi_dcmpun>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d131      	bne.n	800782c <_printf_float+0xc4>
 80077c8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80077ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80077cc:	2201      	movs	r2, #1
 80077ce:	4ba3      	ldr	r3, [pc, #652]	@ (8007a5c <_printf_float+0x2f4>)
 80077d0:	4252      	negs	r2, r2
 80077d2:	f7f8 fe49 	bl	8000468 <__aeabi_dcmple>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d128      	bne.n	800782c <_printf_float+0xc4>
 80077da:	2200      	movs	r2, #0
 80077dc:	2300      	movs	r3, #0
 80077de:	0030      	movs	r0, r6
 80077e0:	0039      	movs	r1, r7
 80077e2:	f7f8 fe37 	bl	8000454 <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d003      	beq.n	80077f2 <_printf_float+0x8a>
 80077ea:	002b      	movs	r3, r5
 80077ec:	222d      	movs	r2, #45	@ 0x2d
 80077ee:	3343      	adds	r3, #67	@ 0x43
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077f4:	4f9a      	ldr	r7, [pc, #616]	@ (8007a60 <_printf_float+0x2f8>)
 80077f6:	2b47      	cmp	r3, #71	@ 0x47
 80077f8:	d900      	bls.n	80077fc <_printf_float+0x94>
 80077fa:	4f9a      	ldr	r7, [pc, #616]	@ (8007a64 <_printf_float+0x2fc>)
 80077fc:	2303      	movs	r3, #3
 80077fe:	2400      	movs	r4, #0
 8007800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007802:	612b      	str	r3, [r5, #16]
 8007804:	3301      	adds	r3, #1
 8007806:	439a      	bics	r2, r3
 8007808:	602a      	str	r2, [r5, #0]
 800780a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800780c:	0029      	movs	r1, r5
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007814:	aa15      	add	r2, sp, #84	@ 0x54
 8007816:	f000 f9e5 	bl	8007be4 <_printf_common>
 800781a:	3001      	adds	r0, #1
 800781c:	d000      	beq.n	8007820 <_printf_float+0xb8>
 800781e:	e09f      	b.n	8007960 <_printf_float+0x1f8>
 8007820:	2001      	movs	r0, #1
 8007822:	4240      	negs	r0, r0
 8007824:	b017      	add	sp, #92	@ 0x5c
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007828:	3307      	adds	r3, #7
 800782a:	e7b8      	b.n	800779e <_printf_float+0x36>
 800782c:	0032      	movs	r2, r6
 800782e:	003b      	movs	r3, r7
 8007830:	0030      	movs	r0, r6
 8007832:	0039      	movs	r1, r7
 8007834:	f7fb fa72 	bl	8002d1c <__aeabi_dcmpun>
 8007838:	2800      	cmp	r0, #0
 800783a:	d00b      	beq.n	8007854 <_printf_float+0xec>
 800783c:	2f00      	cmp	r7, #0
 800783e:	da03      	bge.n	8007848 <_printf_float+0xe0>
 8007840:	002b      	movs	r3, r5
 8007842:	222d      	movs	r2, #45	@ 0x2d
 8007844:	3343      	adds	r3, #67	@ 0x43
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800784a:	4f87      	ldr	r7, [pc, #540]	@ (8007a68 <_printf_float+0x300>)
 800784c:	2b47      	cmp	r3, #71	@ 0x47
 800784e:	d9d5      	bls.n	80077fc <_printf_float+0x94>
 8007850:	4f86      	ldr	r7, [pc, #536]	@ (8007a6c <_printf_float+0x304>)
 8007852:	e7d3      	b.n	80077fc <_printf_float+0x94>
 8007854:	2220      	movs	r2, #32
 8007856:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007858:	686b      	ldr	r3, [r5, #4]
 800785a:	4394      	bics	r4, r2
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	d146      	bne.n	80078ee <_printf_float+0x186>
 8007860:	3307      	adds	r3, #7
 8007862:	606b      	str	r3, [r5, #4]
 8007864:	2380      	movs	r3, #128	@ 0x80
 8007866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	4313      	orrs	r3, r2
 800786c:	2200      	movs	r2, #0
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	9206      	str	r2, [sp, #24]
 8007872:	aa14      	add	r2, sp, #80	@ 0x50
 8007874:	9205      	str	r2, [sp, #20]
 8007876:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007878:	a90a      	add	r1, sp, #40	@ 0x28
 800787a:	9204      	str	r2, [sp, #16]
 800787c:	aa13      	add	r2, sp, #76	@ 0x4c
 800787e:	9203      	str	r2, [sp, #12]
 8007880:	2223      	movs	r2, #35	@ 0x23
 8007882:	1852      	adds	r2, r2, r1
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	686b      	ldr	r3, [r5, #4]
 800788a:	0032      	movs	r2, r6
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007890:	003b      	movs	r3, r7
 8007892:	f7ff fec3 	bl	800761c <__cvt>
 8007896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007898:	0007      	movs	r7, r0
 800789a:	2c47      	cmp	r4, #71	@ 0x47
 800789c:	d12d      	bne.n	80078fa <_printf_float+0x192>
 800789e:	1cd3      	adds	r3, r2, #3
 80078a0:	db02      	blt.n	80078a8 <_printf_float+0x140>
 80078a2:	686b      	ldr	r3, [r5, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	dd48      	ble.n	800793a <_printf_float+0x1d2>
 80078a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80078ac:	3b02      	subs	r3, #2
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80078b2:	0028      	movs	r0, r5
 80078b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078b6:	3901      	subs	r1, #1
 80078b8:	3050      	adds	r0, #80	@ 0x50
 80078ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078bc:	f7ff ff14 	bl	80076e8 <__exponent>
 80078c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078c2:	0004      	movs	r4, r0
 80078c4:	1813      	adds	r3, r2, r0
 80078c6:	612b      	str	r3, [r5, #16]
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	dc02      	bgt.n	80078d2 <_printf_float+0x16a>
 80078cc:	682a      	ldr	r2, [r5, #0]
 80078ce:	07d2      	lsls	r2, r2, #31
 80078d0:	d501      	bpl.n	80078d6 <_printf_float+0x16e>
 80078d2:	3301      	adds	r3, #1
 80078d4:	612b      	str	r3, [r5, #16]
 80078d6:	2323      	movs	r3, #35	@ 0x23
 80078d8:	aa0a      	add	r2, sp, #40	@ 0x28
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d100      	bne.n	80078e4 <_printf_float+0x17c>
 80078e2:	e792      	b.n	800780a <_printf_float+0xa2>
 80078e4:	002b      	movs	r3, r5
 80078e6:	222d      	movs	r2, #45	@ 0x2d
 80078e8:	3343      	adds	r3, #67	@ 0x43
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e78d      	b.n	800780a <_printf_float+0xa2>
 80078ee:	2c47      	cmp	r4, #71	@ 0x47
 80078f0:	d1b8      	bne.n	8007864 <_printf_float+0xfc>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1b6      	bne.n	8007864 <_printf_float+0xfc>
 80078f6:	3301      	adds	r3, #1
 80078f8:	e7b3      	b.n	8007862 <_printf_float+0xfa>
 80078fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078fc:	0011      	movs	r1, r2
 80078fe:	2b65      	cmp	r3, #101	@ 0x65
 8007900:	d9d7      	bls.n	80078b2 <_printf_float+0x14a>
 8007902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007904:	2b66      	cmp	r3, #102	@ 0x66
 8007906:	d11a      	bne.n	800793e <_printf_float+0x1d6>
 8007908:	686b      	ldr	r3, [r5, #4]
 800790a:	2a00      	cmp	r2, #0
 800790c:	dd09      	ble.n	8007922 <_printf_float+0x1ba>
 800790e:	612a      	str	r2, [r5, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <_printf_float+0x1b2>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	07c9      	lsls	r1, r1, #31
 8007918:	d50b      	bpl.n	8007932 <_printf_float+0x1ca>
 800791a:	3301      	adds	r3, #1
 800791c:	189b      	adds	r3, r3, r2
 800791e:	612b      	str	r3, [r5, #16]
 8007920:	e007      	b.n	8007932 <_printf_float+0x1ca>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <_printf_float+0x1c6>
 8007926:	2201      	movs	r2, #1
 8007928:	6829      	ldr	r1, [r5, #0]
 800792a:	4211      	tst	r1, r2
 800792c:	d000      	beq.n	8007930 <_printf_float+0x1c8>
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	612a      	str	r2, [r5, #16]
 8007932:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007934:	2400      	movs	r4, #0
 8007936:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007938:	e7cd      	b.n	80078d6 <_printf_float+0x16e>
 800793a:	2367      	movs	r3, #103	@ 0x67
 800793c:	930c      	str	r3, [sp, #48]	@ 0x30
 800793e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007940:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007942:	4299      	cmp	r1, r3
 8007944:	db06      	blt.n	8007954 <_printf_float+0x1ec>
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	6129      	str	r1, [r5, #16]
 800794a:	07db      	lsls	r3, r3, #31
 800794c:	d5f1      	bpl.n	8007932 <_printf_float+0x1ca>
 800794e:	3101      	adds	r1, #1
 8007950:	6129      	str	r1, [r5, #16]
 8007952:	e7ee      	b.n	8007932 <_printf_float+0x1ca>
 8007954:	2201      	movs	r2, #1
 8007956:	2900      	cmp	r1, #0
 8007958:	dce0      	bgt.n	800791c <_printf_float+0x1b4>
 800795a:	1892      	adds	r2, r2, r2
 800795c:	1a52      	subs	r2, r2, r1
 800795e:	e7dd      	b.n	800791c <_printf_float+0x1b4>
 8007960:	682a      	ldr	r2, [r5, #0]
 8007962:	0553      	lsls	r3, r2, #21
 8007964:	d408      	bmi.n	8007978 <_printf_float+0x210>
 8007966:	692b      	ldr	r3, [r5, #16]
 8007968:	003a      	movs	r2, r7
 800796a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800796c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800796e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007970:	47a0      	blx	r4
 8007972:	3001      	adds	r0, #1
 8007974:	d129      	bne.n	80079ca <_printf_float+0x262>
 8007976:	e753      	b.n	8007820 <_printf_float+0xb8>
 8007978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800797a:	2b65      	cmp	r3, #101	@ 0x65
 800797c:	d800      	bhi.n	8007980 <_printf_float+0x218>
 800797e:	e0da      	b.n	8007b36 <_printf_float+0x3ce>
 8007980:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007982:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	f7f8 fd5e 	bl	8000448 <__aeabi_dcmpeq>
 800798c:	2800      	cmp	r0, #0
 800798e:	d033      	beq.n	80079f8 <_printf_float+0x290>
 8007990:	2301      	movs	r3, #1
 8007992:	4a37      	ldr	r2, [pc, #220]	@ (8007a70 <_printf_float+0x308>)
 8007994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007998:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800799a:	47a0      	blx	r4
 800799c:	3001      	adds	r0, #1
 800799e:	d100      	bne.n	80079a2 <_printf_float+0x23a>
 80079a0:	e73e      	b.n	8007820 <_printf_float+0xb8>
 80079a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80079a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	db02      	blt.n	80079b0 <_printf_float+0x248>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	07db      	lsls	r3, r3, #31
 80079ae:	d50c      	bpl.n	80079ca <_printf_float+0x262>
 80079b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80079b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80079b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079ba:	47a0      	blx	r4
 80079bc:	2400      	movs	r4, #0
 80079be:	3001      	adds	r0, #1
 80079c0:	d100      	bne.n	80079c4 <_printf_float+0x25c>
 80079c2:	e72d      	b.n	8007820 <_printf_float+0xb8>
 80079c4:	1e73      	subs	r3, r6, #1
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	dc0a      	bgt.n	80079e0 <_printf_float+0x278>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	079b      	lsls	r3, r3, #30
 80079ce:	d500      	bpl.n	80079d2 <_printf_float+0x26a>
 80079d0:	e105      	b.n	8007bde <_printf_float+0x476>
 80079d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80079d4:	68e8      	ldr	r0, [r5, #12]
 80079d6:	4298      	cmp	r0, r3
 80079d8:	db00      	blt.n	80079dc <_printf_float+0x274>
 80079da:	e723      	b.n	8007824 <_printf_float+0xbc>
 80079dc:	0018      	movs	r0, r3
 80079de:	e721      	b.n	8007824 <_printf_float+0xbc>
 80079e0:	002a      	movs	r2, r5
 80079e2:	2301      	movs	r3, #1
 80079e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80079ea:	321a      	adds	r2, #26
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	d100      	bne.n	80079f4 <_printf_float+0x28c>
 80079f2:	e715      	b.n	8007820 <_printf_float+0xb8>
 80079f4:	3401      	adds	r4, #1
 80079f6:	e7e5      	b.n	80079c4 <_printf_float+0x25c>
 80079f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	dc3a      	bgt.n	8007a74 <_printf_float+0x30c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4a1b      	ldr	r2, [pc, #108]	@ (8007a70 <_printf_float+0x308>)
 8007a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a08:	47a0      	blx	r4
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d100      	bne.n	8007a10 <_printf_float+0x2a8>
 8007a0e:	e707      	b.n	8007820 <_printf_float+0xb8>
 8007a10:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007a12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a14:	4333      	orrs	r3, r6
 8007a16:	d102      	bne.n	8007a1e <_printf_float+0x2b6>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	07db      	lsls	r3, r3, #31
 8007a1c:	d5d5      	bpl.n	80079ca <_printf_float+0x262>
 8007a1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a28:	47a0      	blx	r4
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d100      	bne.n	8007a32 <_printf_float+0x2ca>
 8007a30:	e6f6      	b.n	8007820 <_printf_float+0xb8>
 8007a32:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a38:	425b      	negs	r3, r3
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	dc01      	bgt.n	8007a42 <_printf_float+0x2da>
 8007a3e:	0033      	movs	r3, r6
 8007a40:	e792      	b.n	8007968 <_printf_float+0x200>
 8007a42:	002a      	movs	r2, r5
 8007a44:	2301      	movs	r3, #1
 8007a46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007a4c:	321a      	adds	r2, #26
 8007a4e:	47a0      	blx	r4
 8007a50:	3001      	adds	r0, #1
 8007a52:	d100      	bne.n	8007a56 <_printf_float+0x2ee>
 8007a54:	e6e4      	b.n	8007820 <_printf_float+0xb8>
 8007a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e7ea      	b.n	8007a32 <_printf_float+0x2ca>
 8007a5c:	7fefffff 	.word	0x7fefffff
 8007a60:	0800ae40 	.word	0x0800ae40
 8007a64:	0800ae44 	.word	0x0800ae44
 8007a68:	0800ae48 	.word	0x0800ae48
 8007a6c:	0800ae4c 	.word	0x0800ae4c
 8007a70:	0800ae50 	.word	0x0800ae50
 8007a74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a7a:	429e      	cmp	r6, r3
 8007a7c:	dd00      	ble.n	8007a80 <_printf_float+0x318>
 8007a7e:	001e      	movs	r6, r3
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	dc31      	bgt.n	8007ae8 <_printf_float+0x380>
 8007a84:	43f3      	mvns	r3, r6
 8007a86:	2400      	movs	r4, #0
 8007a88:	17db      	asrs	r3, r3, #31
 8007a8a:	4033      	ands	r3, r6
 8007a8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a8e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a92:	1af3      	subs	r3, r6, r3
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	dc30      	bgt.n	8007afa <_printf_float+0x392>
 8007a98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	dc38      	bgt.n	8007b12 <_printf_float+0x3aa>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	07db      	lsls	r3, r3, #31
 8007aa4:	d435      	bmi.n	8007b12 <_printf_float+0x3aa>
 8007aa6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007aaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007aac:	1b9b      	subs	r3, r3, r6
 8007aae:	1b14      	subs	r4, r2, r4
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	dd00      	ble.n	8007ab6 <_printf_float+0x34e>
 8007ab4:	001c      	movs	r4, r3
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	dc34      	bgt.n	8007b24 <_printf_float+0x3bc>
 8007aba:	43e3      	mvns	r3, r4
 8007abc:	2600      	movs	r6, #0
 8007abe:	17db      	asrs	r3, r3, #31
 8007ac0:	401c      	ands	r4, r3
 8007ac2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ac4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	1b1b      	subs	r3, r3, r4
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	dc00      	bgt.n	8007ad0 <_printf_float+0x368>
 8007ace:	e77c      	b.n	80079ca <_printf_float+0x262>
 8007ad0:	002a      	movs	r2, r5
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ad8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007ada:	321a      	adds	r2, #26
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d100      	bne.n	8007ae4 <_printf_float+0x37c>
 8007ae2:	e69d      	b.n	8007820 <_printf_float+0xb8>
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	e7ec      	b.n	8007ac2 <_printf_float+0x35a>
 8007ae8:	0033      	movs	r3, r6
 8007aea:	003a      	movs	r2, r7
 8007aec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007af0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007af2:	47a0      	blx	r4
 8007af4:	3001      	adds	r0, #1
 8007af6:	d1c5      	bne.n	8007a84 <_printf_float+0x31c>
 8007af8:	e692      	b.n	8007820 <_printf_float+0xb8>
 8007afa:	002a      	movs	r2, r5
 8007afc:	2301      	movs	r3, #1
 8007afe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b02:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b04:	321a      	adds	r2, #26
 8007b06:	47b0      	blx	r6
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d100      	bne.n	8007b0e <_printf_float+0x3a6>
 8007b0c:	e688      	b.n	8007820 <_printf_float+0xb8>
 8007b0e:	3401      	adds	r4, #1
 8007b10:	e7bd      	b.n	8007a8e <_printf_float+0x326>
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007b1c:	47a0      	blx	r4
 8007b1e:	3001      	adds	r0, #1
 8007b20:	d1c1      	bne.n	8007aa6 <_printf_float+0x33e>
 8007b22:	e67d      	b.n	8007820 <_printf_float+0xb8>
 8007b24:	19ba      	adds	r2, r7, r6
 8007b26:	0023      	movs	r3, r4
 8007b28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b2e:	47b0      	blx	r6
 8007b30:	3001      	adds	r0, #1
 8007b32:	d1c2      	bne.n	8007aba <_printf_float+0x352>
 8007b34:	e674      	b.n	8007820 <_printf_float+0xb8>
 8007b36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b38:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	dc02      	bgt.n	8007b44 <_printf_float+0x3dc>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	421a      	tst	r2, r3
 8007b42:	d039      	beq.n	8007bb8 <_printf_float+0x450>
 8007b44:	2301      	movs	r3, #1
 8007b46:	003a      	movs	r2, r7
 8007b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b4e:	47b0      	blx	r6
 8007b50:	3001      	adds	r0, #1
 8007b52:	d100      	bne.n	8007b56 <_printf_float+0x3ee>
 8007b54:	e664      	b.n	8007820 <_printf_float+0xb8>
 8007b56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b60:	47b0      	blx	r6
 8007b62:	3001      	adds	r0, #1
 8007b64:	d100      	bne.n	8007b68 <_printf_float+0x400>
 8007b66:	e65b      	b.n	8007820 <_printf_float+0xb8>
 8007b68:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007b6a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b6e:	2200      	movs	r2, #0
 8007b70:	3b01      	subs	r3, #1
 8007b72:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b74:	2300      	movs	r3, #0
 8007b76:	f7f8 fc67 	bl	8000448 <__aeabi_dcmpeq>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d11a      	bne.n	8007bb4 <_printf_float+0x44c>
 8007b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b80:	1c7a      	adds	r2, r7, #1
 8007b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b88:	47b0      	blx	r6
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d10e      	bne.n	8007bac <_printf_float+0x444>
 8007b8e:	e647      	b.n	8007820 <_printf_float+0xb8>
 8007b90:	002a      	movs	r2, r5
 8007b92:	2301      	movs	r3, #1
 8007b94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b98:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007b9a:	321a      	adds	r2, #26
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d100      	bne.n	8007ba4 <_printf_float+0x43c>
 8007ba2:	e63d      	b.n	8007820 <_printf_float+0xb8>
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ba8:	429e      	cmp	r6, r3
 8007baa:	dbf1      	blt.n	8007b90 <_printf_float+0x428>
 8007bac:	002a      	movs	r2, r5
 8007bae:	0023      	movs	r3, r4
 8007bb0:	3250      	adds	r2, #80	@ 0x50
 8007bb2:	e6da      	b.n	800796a <_printf_float+0x202>
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	e7f6      	b.n	8007ba6 <_printf_float+0x43e>
 8007bb8:	003a      	movs	r2, r7
 8007bba:	e7e2      	b.n	8007b82 <_printf_float+0x41a>
 8007bbc:	002a      	movs	r2, r5
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007bc6:	3219      	adds	r2, #25
 8007bc8:	47b0      	blx	r6
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d100      	bne.n	8007bd0 <_printf_float+0x468>
 8007bce:	e627      	b.n	8007820 <_printf_float+0xb8>
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	68eb      	ldr	r3, [r5, #12]
 8007bd4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	dcef      	bgt.n	8007bbc <_printf_float+0x454>
 8007bdc:	e6f9      	b.n	80079d2 <_printf_float+0x26a>
 8007bde:	2400      	movs	r4, #0
 8007be0:	e7f7      	b.n	8007bd2 <_printf_float+0x46a>
 8007be2:	46c0      	nop			@ (mov r8, r8)

08007be4 <_printf_common>:
 8007be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007be6:	0016      	movs	r6, r2
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	688a      	ldr	r2, [r1, #8]
 8007bec:	690b      	ldr	r3, [r1, #16]
 8007bee:	000c      	movs	r4, r1
 8007bf0:	9000      	str	r0, [sp, #0]
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	da00      	bge.n	8007bf8 <_printf_common+0x14>
 8007bf6:	0013      	movs	r3, r2
 8007bf8:	0022      	movs	r2, r4
 8007bfa:	6033      	str	r3, [r6, #0]
 8007bfc:	3243      	adds	r2, #67	@ 0x43
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	d001      	beq.n	8007c08 <_printf_common+0x24>
 8007c04:	3301      	adds	r3, #1
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	069b      	lsls	r3, r3, #26
 8007c0c:	d502      	bpl.n	8007c14 <_printf_common+0x30>
 8007c0e:	6833      	ldr	r3, [r6, #0]
 8007c10:	3302      	adds	r3, #2
 8007c12:	6033      	str	r3, [r6, #0]
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	2306      	movs	r3, #6
 8007c18:	0015      	movs	r5, r2
 8007c1a:	401d      	ands	r5, r3
 8007c1c:	421a      	tst	r2, r3
 8007c1e:	d027      	beq.n	8007c70 <_printf_common+0x8c>
 8007c20:	0023      	movs	r3, r4
 8007c22:	3343      	adds	r3, #67	@ 0x43
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	1e5a      	subs	r2, r3, #1
 8007c28:	4193      	sbcs	r3, r2
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	0692      	lsls	r2, r2, #26
 8007c2e:	d430      	bmi.n	8007c92 <_printf_common+0xae>
 8007c30:	0022      	movs	r2, r4
 8007c32:	9901      	ldr	r1, [sp, #4]
 8007c34:	9800      	ldr	r0, [sp, #0]
 8007c36:	9d08      	ldr	r5, [sp, #32]
 8007c38:	3243      	adds	r2, #67	@ 0x43
 8007c3a:	47a8      	blx	r5
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d025      	beq.n	8007c8c <_printf_common+0xa8>
 8007c40:	2206      	movs	r2, #6
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	2500      	movs	r5, #0
 8007c46:	4013      	ands	r3, r2
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d105      	bne.n	8007c58 <_printf_common+0x74>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	68e5      	ldr	r5, [r4, #12]
 8007c50:	1aed      	subs	r5, r5, r3
 8007c52:	43eb      	mvns	r3, r5
 8007c54:	17db      	asrs	r3, r3, #31
 8007c56:	401d      	ands	r5, r3
 8007c58:	68a3      	ldr	r3, [r4, #8]
 8007c5a:	6922      	ldr	r2, [r4, #16]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	dd01      	ble.n	8007c64 <_printf_common+0x80>
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	18ed      	adds	r5, r5, r3
 8007c64:	2600      	movs	r6, #0
 8007c66:	42b5      	cmp	r5, r6
 8007c68:	d120      	bne.n	8007cac <_printf_common+0xc8>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	e010      	b.n	8007c90 <_printf_common+0xac>
 8007c6e:	3501      	adds	r5, #1
 8007c70:	68e3      	ldr	r3, [r4, #12]
 8007c72:	6832      	ldr	r2, [r6, #0]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	ddd2      	ble.n	8007c20 <_printf_common+0x3c>
 8007c7a:	0022      	movs	r2, r4
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	9901      	ldr	r1, [sp, #4]
 8007c80:	9800      	ldr	r0, [sp, #0]
 8007c82:	9f08      	ldr	r7, [sp, #32]
 8007c84:	3219      	adds	r2, #25
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1f0      	bne.n	8007c6e <_printf_common+0x8a>
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	4240      	negs	r0, r0
 8007c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c92:	2030      	movs	r0, #48	@ 0x30
 8007c94:	18e1      	adds	r1, r4, r3
 8007c96:	3143      	adds	r1, #67	@ 0x43
 8007c98:	7008      	strb	r0, [r1, #0]
 8007c9a:	0021      	movs	r1, r4
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	3145      	adds	r1, #69	@ 0x45
 8007ca0:	7809      	ldrb	r1, [r1, #0]
 8007ca2:	18a2      	adds	r2, r4, r2
 8007ca4:	3243      	adds	r2, #67	@ 0x43
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	7011      	strb	r1, [r2, #0]
 8007caa:	e7c1      	b.n	8007c30 <_printf_common+0x4c>
 8007cac:	0022      	movs	r2, r4
 8007cae:	2301      	movs	r3, #1
 8007cb0:	9901      	ldr	r1, [sp, #4]
 8007cb2:	9800      	ldr	r0, [sp, #0]
 8007cb4:	9f08      	ldr	r7, [sp, #32]
 8007cb6:	321a      	adds	r2, #26
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d0e6      	beq.n	8007c8c <_printf_common+0xa8>
 8007cbe:	3601      	adds	r6, #1
 8007cc0:	e7d1      	b.n	8007c66 <_printf_common+0x82>
	...

08007cc4 <_printf_i>:
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	b08b      	sub	sp, #44	@ 0x2c
 8007cc8:	9206      	str	r2, [sp, #24]
 8007cca:	000a      	movs	r2, r1
 8007ccc:	3243      	adds	r2, #67	@ 0x43
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	9005      	str	r0, [sp, #20]
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	7e0a      	ldrb	r2, [r1, #24]
 8007cd6:	000c      	movs	r4, r1
 8007cd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cda:	2a78      	cmp	r2, #120	@ 0x78
 8007cdc:	d809      	bhi.n	8007cf2 <_printf_i+0x2e>
 8007cde:	2a62      	cmp	r2, #98	@ 0x62
 8007ce0:	d80b      	bhi.n	8007cfa <_printf_i+0x36>
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d100      	bne.n	8007ce8 <_printf_i+0x24>
 8007ce6:	e0bc      	b.n	8007e62 <_printf_i+0x19e>
 8007ce8:	497b      	ldr	r1, [pc, #492]	@ (8007ed8 <_printf_i+0x214>)
 8007cea:	9104      	str	r1, [sp, #16]
 8007cec:	2a58      	cmp	r2, #88	@ 0x58
 8007cee:	d100      	bne.n	8007cf2 <_printf_i+0x2e>
 8007cf0:	e090      	b.n	8007e14 <_printf_i+0x150>
 8007cf2:	0025      	movs	r5, r4
 8007cf4:	3542      	adds	r5, #66	@ 0x42
 8007cf6:	702a      	strb	r2, [r5, #0]
 8007cf8:	e022      	b.n	8007d40 <_printf_i+0x7c>
 8007cfa:	0010      	movs	r0, r2
 8007cfc:	3863      	subs	r0, #99	@ 0x63
 8007cfe:	2815      	cmp	r0, #21
 8007d00:	d8f7      	bhi.n	8007cf2 <_printf_i+0x2e>
 8007d02:	f7f8 fa11 	bl	8000128 <__gnu_thumb1_case_shi>
 8007d06:	0016      	.short	0x0016
 8007d08:	fff6001f 	.word	0xfff6001f
 8007d0c:	fff6fff6 	.word	0xfff6fff6
 8007d10:	001ffff6 	.word	0x001ffff6
 8007d14:	fff6fff6 	.word	0xfff6fff6
 8007d18:	fff6fff6 	.word	0xfff6fff6
 8007d1c:	003600a1 	.word	0x003600a1
 8007d20:	fff60080 	.word	0xfff60080
 8007d24:	00b2fff6 	.word	0x00b2fff6
 8007d28:	0036fff6 	.word	0x0036fff6
 8007d2c:	fff6fff6 	.word	0xfff6fff6
 8007d30:	0084      	.short	0x0084
 8007d32:	0025      	movs	r5, r4
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	3542      	adds	r5, #66	@ 0x42
 8007d38:	1d11      	adds	r1, r2, #4
 8007d3a:	6019      	str	r1, [r3, #0]
 8007d3c:	6813      	ldr	r3, [r2, #0]
 8007d3e:	702b      	strb	r3, [r5, #0]
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0a0      	b.n	8007e86 <_printf_i+0x1c2>
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	6809      	ldr	r1, [r1, #0]
 8007d48:	1d02      	adds	r2, r0, #4
 8007d4a:	060d      	lsls	r5, r1, #24
 8007d4c:	d50b      	bpl.n	8007d66 <_printf_i+0xa2>
 8007d4e:	6806      	ldr	r6, [r0, #0]
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	2e00      	cmp	r6, #0
 8007d54:	da03      	bge.n	8007d5e <_printf_i+0x9a>
 8007d56:	232d      	movs	r3, #45	@ 0x2d
 8007d58:	9a03      	ldr	r2, [sp, #12]
 8007d5a:	4276      	negs	r6, r6
 8007d5c:	7013      	strb	r3, [r2, #0]
 8007d5e:	4b5e      	ldr	r3, [pc, #376]	@ (8007ed8 <_printf_i+0x214>)
 8007d60:	270a      	movs	r7, #10
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	e018      	b.n	8007d98 <_printf_i+0xd4>
 8007d66:	6806      	ldr	r6, [r0, #0]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	0649      	lsls	r1, r1, #25
 8007d6c:	d5f1      	bpl.n	8007d52 <_printf_i+0x8e>
 8007d6e:	b236      	sxth	r6, r6
 8007d70:	e7ef      	b.n	8007d52 <_printf_i+0x8e>
 8007d72:	6808      	ldr	r0, [r1, #0]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	c940      	ldmia	r1!, {r6}
 8007d78:	0605      	lsls	r5, r0, #24
 8007d7a:	d402      	bmi.n	8007d82 <_printf_i+0xbe>
 8007d7c:	0640      	lsls	r0, r0, #25
 8007d7e:	d500      	bpl.n	8007d82 <_printf_i+0xbe>
 8007d80:	b2b6      	uxth	r6, r6
 8007d82:	6019      	str	r1, [r3, #0]
 8007d84:	4b54      	ldr	r3, [pc, #336]	@ (8007ed8 <_printf_i+0x214>)
 8007d86:	270a      	movs	r7, #10
 8007d88:	9304      	str	r3, [sp, #16]
 8007d8a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007d8c:	d100      	bne.n	8007d90 <_printf_i+0xcc>
 8007d8e:	3f02      	subs	r7, #2
 8007d90:	0023      	movs	r3, r4
 8007d92:	2200      	movs	r2, #0
 8007d94:	3343      	adds	r3, #67	@ 0x43
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	60a3      	str	r3, [r4, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	db03      	blt.n	8007da8 <_printf_i+0xe4>
 8007da0:	2104      	movs	r1, #4
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	438a      	bics	r2, r1
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	d102      	bne.n	8007db2 <_printf_i+0xee>
 8007dac:	9d03      	ldr	r5, [sp, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00c      	beq.n	8007dcc <_printf_i+0x108>
 8007db2:	9d03      	ldr	r5, [sp, #12]
 8007db4:	0030      	movs	r0, r6
 8007db6:	0039      	movs	r1, r7
 8007db8:	f7f8 fa46 	bl	8000248 <__aeabi_uidivmod>
 8007dbc:	9b04      	ldr	r3, [sp, #16]
 8007dbe:	3d01      	subs	r5, #1
 8007dc0:	5c5b      	ldrb	r3, [r3, r1]
 8007dc2:	702b      	strb	r3, [r5, #0]
 8007dc4:	0033      	movs	r3, r6
 8007dc6:	0006      	movs	r6, r0
 8007dc8:	429f      	cmp	r7, r3
 8007dca:	d9f3      	bls.n	8007db4 <_printf_i+0xf0>
 8007dcc:	2f08      	cmp	r7, #8
 8007dce:	d109      	bne.n	8007de4 <_printf_i+0x120>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07db      	lsls	r3, r3, #31
 8007dd4:	d506      	bpl.n	8007de4 <_printf_i+0x120>
 8007dd6:	6862      	ldr	r2, [r4, #4]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	dc02      	bgt.n	8007de4 <_printf_i+0x120>
 8007dde:	2330      	movs	r3, #48	@ 0x30
 8007de0:	3d01      	subs	r5, #1
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1b5b      	subs	r3, r3, r5
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	9b07      	ldr	r3, [sp, #28]
 8007dec:	0021      	movs	r1, r4
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	9805      	ldr	r0, [sp, #20]
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	aa09      	add	r2, sp, #36	@ 0x24
 8007df6:	f7ff fef5 	bl	8007be4 <_printf_common>
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d148      	bne.n	8007e90 <_printf_i+0x1cc>
 8007dfe:	2001      	movs	r0, #1
 8007e00:	4240      	negs	r0, r0
 8007e02:	b00b      	add	sp, #44	@ 0x2c
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	2220      	movs	r2, #32
 8007e08:	6809      	ldr	r1, [r1, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	6022      	str	r2, [r4, #0]
 8007e0e:	2278      	movs	r2, #120	@ 0x78
 8007e10:	4932      	ldr	r1, [pc, #200]	@ (8007edc <_printf_i+0x218>)
 8007e12:	9104      	str	r1, [sp, #16]
 8007e14:	0021      	movs	r1, r4
 8007e16:	3145      	adds	r1, #69	@ 0x45
 8007e18:	700a      	strb	r2, [r1, #0]
 8007e1a:	6819      	ldr	r1, [r3, #0]
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	c940      	ldmia	r1!, {r6}
 8007e20:	0610      	lsls	r0, r2, #24
 8007e22:	d402      	bmi.n	8007e2a <_printf_i+0x166>
 8007e24:	0650      	lsls	r0, r2, #25
 8007e26:	d500      	bpl.n	8007e2a <_printf_i+0x166>
 8007e28:	b2b6      	uxth	r6, r6
 8007e2a:	6019      	str	r1, [r3, #0]
 8007e2c:	07d3      	lsls	r3, r2, #31
 8007e2e:	d502      	bpl.n	8007e36 <_printf_i+0x172>
 8007e30:	2320      	movs	r3, #32
 8007e32:	4313      	orrs	r3, r2
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	2e00      	cmp	r6, #0
 8007e38:	d001      	beq.n	8007e3e <_printf_i+0x17a>
 8007e3a:	2710      	movs	r7, #16
 8007e3c:	e7a8      	b.n	8007d90 <_printf_i+0xcc>
 8007e3e:	2220      	movs	r2, #32
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	4393      	bics	r3, r2
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	e7f8      	b.n	8007e3a <_printf_i+0x176>
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	680d      	ldr	r5, [r1, #0]
 8007e4c:	1d10      	adds	r0, r2, #4
 8007e4e:	6949      	ldr	r1, [r1, #20]
 8007e50:	6018      	str	r0, [r3, #0]
 8007e52:	6813      	ldr	r3, [r2, #0]
 8007e54:	062e      	lsls	r6, r5, #24
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0x198>
 8007e58:	6019      	str	r1, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0x19e>
 8007e5c:	066d      	lsls	r5, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0x194>
 8007e60:	8019      	strh	r1, [r3, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9d03      	ldr	r5, [sp, #12]
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	e7bf      	b.n	8007dea <_printf_i+0x126>
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	1d11      	adds	r1, r2, #4
 8007e6e:	6019      	str	r1, [r3, #0]
 8007e70:	6815      	ldr	r5, [r2, #0]
 8007e72:	2100      	movs	r1, #0
 8007e74:	0028      	movs	r0, r5
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	f000 fa1d 	bl	80082b6 <memchr>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d001      	beq.n	8007e84 <_printf_i+0x1c0>
 8007e80:	1b40      	subs	r0, r0, r5
 8007e82:	6060      	str	r0, [r4, #4]
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9a03      	ldr	r2, [sp, #12]
 8007e8c:	7013      	strb	r3, [r2, #0]
 8007e8e:	e7ac      	b.n	8007dea <_printf_i+0x126>
 8007e90:	002a      	movs	r2, r5
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	9906      	ldr	r1, [sp, #24]
 8007e96:	9805      	ldr	r0, [sp, #20]
 8007e98:	9d07      	ldr	r5, [sp, #28]
 8007e9a:	47a8      	blx	r5
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d0ae      	beq.n	8007dfe <_printf_i+0x13a>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	079b      	lsls	r3, r3, #30
 8007ea4:	d415      	bmi.n	8007ed2 <_printf_i+0x20e>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea8:	68e0      	ldr	r0, [r4, #12]
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	daa9      	bge.n	8007e02 <_printf_i+0x13e>
 8007eae:	0018      	movs	r0, r3
 8007eb0:	e7a7      	b.n	8007e02 <_printf_i+0x13e>
 8007eb2:	0022      	movs	r2, r4
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	9906      	ldr	r1, [sp, #24]
 8007eb8:	9805      	ldr	r0, [sp, #20]
 8007eba:	9e07      	ldr	r6, [sp, #28]
 8007ebc:	3219      	adds	r2, #25
 8007ebe:	47b0      	blx	r6
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d09c      	beq.n	8007dfe <_printf_i+0x13a>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dcf0      	bgt.n	8007eb2 <_printf_i+0x1ee>
 8007ed0:	e7e9      	b.n	8007ea6 <_printf_i+0x1e2>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	e7f7      	b.n	8007ec6 <_printf_i+0x202>
 8007ed6:	46c0      	nop			@ (mov r8, r8)
 8007ed8:	0800ae52 	.word	0x0800ae52
 8007edc:	0800ae63 	.word	0x0800ae63

08007ee0 <std>:
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	0004      	movs	r4, r0
 8007ee6:	6003      	str	r3, [r0, #0]
 8007ee8:	6043      	str	r3, [r0, #4]
 8007eea:	6083      	str	r3, [r0, #8]
 8007eec:	8181      	strh	r1, [r0, #12]
 8007eee:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ef0:	81c2      	strh	r2, [r0, #14]
 8007ef2:	6103      	str	r3, [r0, #16]
 8007ef4:	6143      	str	r3, [r0, #20]
 8007ef6:	6183      	str	r3, [r0, #24]
 8007ef8:	0019      	movs	r1, r3
 8007efa:	2208      	movs	r2, #8
 8007efc:	305c      	adds	r0, #92	@ 0x5c
 8007efe:	f000 f953 	bl	80081a8 <memset>
 8007f02:	4b0b      	ldr	r3, [pc, #44]	@ (8007f30 <std+0x50>)
 8007f04:	6224      	str	r4, [r4, #32]
 8007f06:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f08:	4b0a      	ldr	r3, [pc, #40]	@ (8007f34 <std+0x54>)
 8007f0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <std+0x58>)
 8007f0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f10:	4b0a      	ldr	r3, [pc, #40]	@ (8007f3c <std+0x5c>)
 8007f12:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f14:	4b0a      	ldr	r3, [pc, #40]	@ (8007f40 <std+0x60>)
 8007f16:	429c      	cmp	r4, r3
 8007f18:	d005      	beq.n	8007f26 <std+0x46>
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f44 <std+0x64>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d002      	beq.n	8007f26 <std+0x46>
 8007f20:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <std+0x68>)
 8007f22:	429c      	cmp	r4, r3
 8007f24:	d103      	bne.n	8007f2e <std+0x4e>
 8007f26:	0020      	movs	r0, r4
 8007f28:	3058      	adds	r0, #88	@ 0x58
 8007f2a:	f000 f9c1 	bl	80082b0 <__retarget_lock_init_recursive>
 8007f2e:	bd10      	pop	{r4, pc}
 8007f30:	08008111 	.word	0x08008111
 8007f34:	08008139 	.word	0x08008139
 8007f38:	08008171 	.word	0x08008171
 8007f3c:	0800819d 	.word	0x0800819d
 8007f40:	20000770 	.word	0x20000770
 8007f44:	200007d8 	.word	0x200007d8
 8007f48:	20000840 	.word	0x20000840

08007f4c <stdio_exit_handler>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4a03      	ldr	r2, [pc, #12]	@ (8007f5c <stdio_exit_handler+0x10>)
 8007f50:	4903      	ldr	r1, [pc, #12]	@ (8007f60 <stdio_exit_handler+0x14>)
 8007f52:	4804      	ldr	r0, [pc, #16]	@ (8007f64 <stdio_exit_handler+0x18>)
 8007f54:	f000 f86c 	bl	8008030 <_fwalk_sglue>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	2000000c 	.word	0x2000000c
 8007f60:	08009d01 	.word	0x08009d01
 8007f64:	2000001c 	.word	0x2000001c

08007f68 <cleanup_stdio>:
 8007f68:	6841      	ldr	r1, [r0, #4]
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f98 <cleanup_stdio+0x30>)
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	0004      	movs	r4, r0
 8007f70:	4299      	cmp	r1, r3
 8007f72:	d001      	beq.n	8007f78 <cleanup_stdio+0x10>
 8007f74:	f001 fec4 	bl	8009d00 <_fflush_r>
 8007f78:	68a1      	ldr	r1, [r4, #8]
 8007f7a:	4b08      	ldr	r3, [pc, #32]	@ (8007f9c <cleanup_stdio+0x34>)
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	d002      	beq.n	8007f86 <cleanup_stdio+0x1e>
 8007f80:	0020      	movs	r0, r4
 8007f82:	f001 febd 	bl	8009d00 <_fflush_r>
 8007f86:	68e1      	ldr	r1, [r4, #12]
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <cleanup_stdio+0x38>)
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	d002      	beq.n	8007f94 <cleanup_stdio+0x2c>
 8007f8e:	0020      	movs	r0, r4
 8007f90:	f001 feb6 	bl	8009d00 <_fflush_r>
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	20000770 	.word	0x20000770
 8007f9c:	200007d8 	.word	0x200007d8
 8007fa0:	20000840 	.word	0x20000840

08007fa4 <global_stdio_init.part.0>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <global_stdio_init.part.0+0x28>)
 8007fa8:	4a09      	ldr	r2, [pc, #36]	@ (8007fd0 <global_stdio_init.part.0+0x2c>)
 8007faa:	2104      	movs	r1, #4
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	4809      	ldr	r0, [pc, #36]	@ (8007fd4 <global_stdio_init.part.0+0x30>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f7ff ff95 	bl	8007ee0 <std>
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	2109      	movs	r1, #9
 8007fba:	4807      	ldr	r0, [pc, #28]	@ (8007fd8 <global_stdio_init.part.0+0x34>)
 8007fbc:	f7ff ff90 	bl	8007ee0 <std>
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	2112      	movs	r1, #18
 8007fc4:	4805      	ldr	r0, [pc, #20]	@ (8007fdc <global_stdio_init.part.0+0x38>)
 8007fc6:	f7ff ff8b 	bl	8007ee0 <std>
 8007fca:	bd10      	pop	{r4, pc}
 8007fcc:	200008a8 	.word	0x200008a8
 8007fd0:	08007f4d 	.word	0x08007f4d
 8007fd4:	20000770 	.word	0x20000770
 8007fd8:	200007d8 	.word	0x200007d8
 8007fdc:	20000840 	.word	0x20000840

08007fe0 <__sfp_lock_acquire>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4802      	ldr	r0, [pc, #8]	@ (8007fec <__sfp_lock_acquire+0xc>)
 8007fe4:	f000 f965 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	46c0      	nop			@ (mov r8, r8)
 8007fec:	200008b1 	.word	0x200008b1

08007ff0 <__sfp_lock_release>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	4802      	ldr	r0, [pc, #8]	@ (8007ffc <__sfp_lock_release+0xc>)
 8007ff4:	f000 f95e 	bl	80082b4 <__retarget_lock_release_recursive>
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	200008b1 	.word	0x200008b1

08008000 <__sinit>:
 8008000:	b510      	push	{r4, lr}
 8008002:	0004      	movs	r4, r0
 8008004:	f7ff ffec 	bl	8007fe0 <__sfp_lock_acquire>
 8008008:	6a23      	ldr	r3, [r4, #32]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <__sinit+0x14>
 800800e:	f7ff ffef 	bl	8007ff0 <__sfp_lock_release>
 8008012:	bd10      	pop	{r4, pc}
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <__sinit+0x28>)
 8008016:	6223      	str	r3, [r4, #32]
 8008018:	4b04      	ldr	r3, [pc, #16]	@ (800802c <__sinit+0x2c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f6      	bne.n	800800e <__sinit+0xe>
 8008020:	f7ff ffc0 	bl	8007fa4 <global_stdio_init.part.0>
 8008024:	e7f3      	b.n	800800e <__sinit+0xe>
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	08007f69 	.word	0x08007f69
 800802c:	200008a8 	.word	0x200008a8

08008030 <_fwalk_sglue>:
 8008030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008032:	0014      	movs	r4, r2
 8008034:	2600      	movs	r6, #0
 8008036:	9000      	str	r0, [sp, #0]
 8008038:	9101      	str	r1, [sp, #4]
 800803a:	68a5      	ldr	r5, [r4, #8]
 800803c:	6867      	ldr	r7, [r4, #4]
 800803e:	3f01      	subs	r7, #1
 8008040:	d504      	bpl.n	800804c <_fwalk_sglue+0x1c>
 8008042:	6824      	ldr	r4, [r4, #0]
 8008044:	2c00      	cmp	r4, #0
 8008046:	d1f8      	bne.n	800803a <_fwalk_sglue+0xa>
 8008048:	0030      	movs	r0, r6
 800804a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800804c:	89ab      	ldrh	r3, [r5, #12]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d908      	bls.n	8008064 <_fwalk_sglue+0x34>
 8008052:	220e      	movs	r2, #14
 8008054:	5eab      	ldrsh	r3, [r5, r2]
 8008056:	3301      	adds	r3, #1
 8008058:	d004      	beq.n	8008064 <_fwalk_sglue+0x34>
 800805a:	0029      	movs	r1, r5
 800805c:	9800      	ldr	r0, [sp, #0]
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	4798      	blx	r3
 8008062:	4306      	orrs	r6, r0
 8008064:	3568      	adds	r5, #104	@ 0x68
 8008066:	e7ea      	b.n	800803e <_fwalk_sglue+0xe>

08008068 <sniprintf>:
 8008068:	b40c      	push	{r2, r3}
 800806a:	b530      	push	{r4, r5, lr}
 800806c:	4b17      	ldr	r3, [pc, #92]	@ (80080cc <sniprintf+0x64>)
 800806e:	000c      	movs	r4, r1
 8008070:	681d      	ldr	r5, [r3, #0]
 8008072:	b09d      	sub	sp, #116	@ 0x74
 8008074:	2900      	cmp	r1, #0
 8008076:	da08      	bge.n	800808a <sniprintf+0x22>
 8008078:	238b      	movs	r3, #139	@ 0x8b
 800807a:	2001      	movs	r0, #1
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	4240      	negs	r0, r0
 8008080:	b01d      	add	sp, #116	@ 0x74
 8008082:	bc30      	pop	{r4, r5}
 8008084:	bc08      	pop	{r3}
 8008086:	b002      	add	sp, #8
 8008088:	4718      	bx	r3
 800808a:	2382      	movs	r3, #130	@ 0x82
 800808c:	466a      	mov	r2, sp
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	8293      	strh	r3, [r2, #20]
 8008092:	2300      	movs	r3, #0
 8008094:	9002      	str	r0, [sp, #8]
 8008096:	9006      	str	r0, [sp, #24]
 8008098:	4299      	cmp	r1, r3
 800809a:	d000      	beq.n	800809e <sniprintf+0x36>
 800809c:	1e4b      	subs	r3, r1, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	9307      	str	r3, [sp, #28]
 80080a2:	2301      	movs	r3, #1
 80080a4:	466a      	mov	r2, sp
 80080a6:	425b      	negs	r3, r3
 80080a8:	82d3      	strh	r3, [r2, #22]
 80080aa:	0028      	movs	r0, r5
 80080ac:	ab21      	add	r3, sp, #132	@ 0x84
 80080ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080b0:	a902      	add	r1, sp, #8
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	f001 fca0 	bl	80099f8 <_svfiprintf_r>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	da01      	bge.n	80080c0 <sniprintf+0x58>
 80080bc:	238b      	movs	r3, #139	@ 0x8b
 80080be:	602b      	str	r3, [r5, #0]
 80080c0:	2c00      	cmp	r4, #0
 80080c2:	d0dd      	beq.n	8008080 <sniprintf+0x18>
 80080c4:	2200      	movs	r2, #0
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e7d9      	b.n	8008080 <sniprintf+0x18>
 80080cc:	20000018 	.word	0x20000018

080080d0 <siprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	b500      	push	{lr}
 80080d4:	490b      	ldr	r1, [pc, #44]	@ (8008104 <siprintf+0x34>)
 80080d6:	b09c      	sub	sp, #112	@ 0x70
 80080d8:	ab1d      	add	r3, sp, #116	@ 0x74
 80080da:	9002      	str	r0, [sp, #8]
 80080dc:	9006      	str	r0, [sp, #24]
 80080de:	9107      	str	r1, [sp, #28]
 80080e0:	9104      	str	r1, [sp, #16]
 80080e2:	4809      	ldr	r0, [pc, #36]	@ (8008108 <siprintf+0x38>)
 80080e4:	4909      	ldr	r1, [pc, #36]	@ (800810c <siprintf+0x3c>)
 80080e6:	cb04      	ldmia	r3!, {r2}
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	a902      	add	r1, sp, #8
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	f001 fc82 	bl	80099f8 <_svfiprintf_r>
 80080f4:	2200      	movs	r2, #0
 80080f6:	9b02      	ldr	r3, [sp, #8]
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	b01c      	add	sp, #112	@ 0x70
 80080fc:	bc08      	pop	{r3}
 80080fe:	b003      	add	sp, #12
 8008100:	4718      	bx	r3
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	7fffffff 	.word	0x7fffffff
 8008108:	20000018 	.word	0x20000018
 800810c:	ffff0208 	.word	0xffff0208

08008110 <__sread>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	000c      	movs	r4, r1
 8008114:	250e      	movs	r5, #14
 8008116:	5f49      	ldrsh	r1, [r1, r5]
 8008118:	f000 f878 	bl	800820c <_read_r>
 800811c:	2800      	cmp	r0, #0
 800811e:	db03      	blt.n	8008128 <__sread+0x18>
 8008120:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008122:	181b      	adds	r3, r3, r0
 8008124:	6563      	str	r3, [r4, #84]	@ 0x54
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	4a02      	ldr	r2, [pc, #8]	@ (8008134 <__sread+0x24>)
 800812c:	4013      	ands	r3, r2
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	e7f9      	b.n	8008126 <__sread+0x16>
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	ffffefff 	.word	0xffffefff

08008138 <__swrite>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	001f      	movs	r7, r3
 800813c:	898b      	ldrh	r3, [r1, #12]
 800813e:	0005      	movs	r5, r0
 8008140:	000c      	movs	r4, r1
 8008142:	0016      	movs	r6, r2
 8008144:	05db      	lsls	r3, r3, #23
 8008146:	d505      	bpl.n	8008154 <__swrite+0x1c>
 8008148:	230e      	movs	r3, #14
 800814a:	5ec9      	ldrsh	r1, [r1, r3]
 800814c:	2200      	movs	r2, #0
 800814e:	2302      	movs	r3, #2
 8008150:	f000 f848 	bl	80081e4 <_lseek_r>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	4a05      	ldr	r2, [pc, #20]	@ (800816c <__swrite+0x34>)
 8008158:	0028      	movs	r0, r5
 800815a:	4013      	ands	r3, r2
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	0032      	movs	r2, r6
 8008160:	230e      	movs	r3, #14
 8008162:	5ee1      	ldrsh	r1, [r4, r3]
 8008164:	003b      	movs	r3, r7
 8008166:	f000 f865 	bl	8008234 <_write_r>
 800816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816c:	ffffefff 	.word	0xffffefff

08008170 <__sseek>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	000c      	movs	r4, r1
 8008174:	250e      	movs	r5, #14
 8008176:	5f49      	ldrsh	r1, [r1, r5]
 8008178:	f000 f834 	bl	80081e4 <_lseek_r>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	1c42      	adds	r2, r0, #1
 8008180:	d103      	bne.n	800818a <__sseek+0x1a>
 8008182:	4a05      	ldr	r2, [pc, #20]	@ (8008198 <__sseek+0x28>)
 8008184:	4013      	ands	r3, r2
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	2280      	movs	r2, #128	@ 0x80
 800818c:	0152      	lsls	r2, r2, #5
 800818e:	4313      	orrs	r3, r2
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	6560      	str	r0, [r4, #84]	@ 0x54
 8008194:	e7f8      	b.n	8008188 <__sseek+0x18>
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	ffffefff 	.word	0xffffefff

0800819c <__sclose>:
 800819c:	b510      	push	{r4, lr}
 800819e:	230e      	movs	r3, #14
 80081a0:	5ec9      	ldrsh	r1, [r1, r3]
 80081a2:	f000 f80d 	bl	80081c0 <_close_r>
 80081a6:	bd10      	pop	{r4, pc}

080081a8 <memset>:
 80081a8:	0003      	movs	r3, r0
 80081aa:	1882      	adds	r2, r0, r2
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d100      	bne.n	80081b2 <memset+0xa>
 80081b0:	4770      	bx	lr
 80081b2:	7019      	strb	r1, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	e7f9      	b.n	80081ac <memset+0x4>

080081b8 <_localeconv_r>:
 80081b8:	4800      	ldr	r0, [pc, #0]	@ (80081bc <_localeconv_r+0x4>)
 80081ba:	4770      	bx	lr
 80081bc:	20000158 	.word	0x20000158

080081c0 <_close_r>:
 80081c0:	2300      	movs	r3, #0
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	4d06      	ldr	r5, [pc, #24]	@ (80081e0 <_close_r+0x20>)
 80081c6:	0004      	movs	r4, r0
 80081c8:	0008      	movs	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7fb faaf 	bl	800372e <_close>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d103      	bne.n	80081dc <_close_r+0x1c>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d000      	beq.n	80081dc <_close_r+0x1c>
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	46c0      	nop			@ (mov r8, r8)
 80081e0:	200008ac 	.word	0x200008ac

080081e4 <_lseek_r>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	0004      	movs	r4, r0
 80081e8:	0008      	movs	r0, r1
 80081ea:	0011      	movs	r1, r2
 80081ec:	001a      	movs	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	4d05      	ldr	r5, [pc, #20]	@ (8008208 <_lseek_r+0x24>)
 80081f2:	602b      	str	r3, [r5, #0]
 80081f4:	f7fb fabc 	bl	8003770 <_lseek>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d103      	bne.n	8008204 <_lseek_r+0x20>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d000      	beq.n	8008204 <_lseek_r+0x20>
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	46c0      	nop			@ (mov r8, r8)
 8008208:	200008ac 	.word	0x200008ac

0800820c <_read_r>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	0004      	movs	r4, r0
 8008210:	0008      	movs	r0, r1
 8008212:	0011      	movs	r1, r2
 8008214:	001a      	movs	r2, r3
 8008216:	2300      	movs	r3, #0
 8008218:	4d05      	ldr	r5, [pc, #20]	@ (8008230 <_read_r+0x24>)
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	f7fb fa4e 	bl	80036bc <_read>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d103      	bne.n	800822c <_read_r+0x20>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d000      	beq.n	800822c <_read_r+0x20>
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	200008ac 	.word	0x200008ac

08008234 <_write_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	0004      	movs	r4, r0
 8008238:	0008      	movs	r0, r1
 800823a:	0011      	movs	r1, r2
 800823c:	001a      	movs	r2, r3
 800823e:	2300      	movs	r3, #0
 8008240:	4d05      	ldr	r5, [pc, #20]	@ (8008258 <_write_r+0x24>)
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	f7fb fa57 	bl	80036f6 <_write>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d103      	bne.n	8008254 <_write_r+0x20>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d000      	beq.n	8008254 <_write_r+0x20>
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	bd70      	pop	{r4, r5, r6, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	200008ac 	.word	0x200008ac

0800825c <__errno>:
 800825c:	4b01      	ldr	r3, [pc, #4]	@ (8008264 <__errno+0x8>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	4770      	bx	lr
 8008262:	46c0      	nop			@ (mov r8, r8)
 8008264:	20000018 	.word	0x20000018

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	2600      	movs	r6, #0
 800826c:	4c0c      	ldr	r4, [pc, #48]	@ (80082a0 <__libc_init_array+0x38>)
 800826e:	4d0d      	ldr	r5, [pc, #52]	@ (80082a4 <__libc_init_array+0x3c>)
 8008270:	1b64      	subs	r4, r4, r5
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	2600      	movs	r6, #0
 800827a:	f002 f907 	bl	800a48c <_init>
 800827e:	4c0a      	ldr	r4, [pc, #40]	@ (80082a8 <__libc_init_array+0x40>)
 8008280:	4d0a      	ldr	r5, [pc, #40]	@ (80082ac <__libc_init_array+0x44>)
 8008282:	1b64      	subs	r4, r4, r5
 8008284:	10a4      	asrs	r4, r4, #2
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	00b3      	lsls	r3, r6, #2
 800828e:	58eb      	ldr	r3, [r5, r3]
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	00b3      	lsls	r3, r6, #2
 8008298:	58eb      	ldr	r3, [r5, r3]
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	0800b1b8 	.word	0x0800b1b8
 80082a4:	0800b1b8 	.word	0x0800b1b8
 80082a8:	0800b1bc 	.word	0x0800b1bc
 80082ac:	0800b1b8 	.word	0x0800b1b8

080082b0 <__retarget_lock_init_recursive>:
 80082b0:	4770      	bx	lr

080082b2 <__retarget_lock_acquire_recursive>:
 80082b2:	4770      	bx	lr

080082b4 <__retarget_lock_release_recursive>:
 80082b4:	4770      	bx	lr

080082b6 <memchr>:
 80082b6:	b2c9      	uxtb	r1, r1
 80082b8:	1882      	adds	r2, r0, r2
 80082ba:	4290      	cmp	r0, r2
 80082bc:	d101      	bne.n	80082c2 <memchr+0xc>
 80082be:	2000      	movs	r0, #0
 80082c0:	4770      	bx	lr
 80082c2:	7803      	ldrb	r3, [r0, #0]
 80082c4:	428b      	cmp	r3, r1
 80082c6:	d0fb      	beq.n	80082c0 <memchr+0xa>
 80082c8:	3001      	adds	r0, #1
 80082ca:	e7f6      	b.n	80082ba <memchr+0x4>

080082cc <memcpy>:
 80082cc:	2300      	movs	r3, #0
 80082ce:	b510      	push	{r4, lr}
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d100      	bne.n	80082d6 <memcpy+0xa>
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	5ccc      	ldrb	r4, [r1, r3]
 80082d8:	54c4      	strb	r4, [r0, r3]
 80082da:	3301      	adds	r3, #1
 80082dc:	e7f8      	b.n	80082d0 <memcpy+0x4>

080082de <quorem>:
 80082de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e0:	6902      	ldr	r2, [r0, #16]
 80082e2:	690f      	ldr	r7, [r1, #16]
 80082e4:	b087      	sub	sp, #28
 80082e6:	0006      	movs	r6, r0
 80082e8:	000b      	movs	r3, r1
 80082ea:	2000      	movs	r0, #0
 80082ec:	9102      	str	r1, [sp, #8]
 80082ee:	42ba      	cmp	r2, r7
 80082f0:	db6d      	blt.n	80083ce <quorem+0xf0>
 80082f2:	3f01      	subs	r7, #1
 80082f4:	00bc      	lsls	r4, r7, #2
 80082f6:	3314      	adds	r3, #20
 80082f8:	9305      	str	r3, [sp, #20]
 80082fa:	191b      	adds	r3, r3, r4
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	0033      	movs	r3, r6
 8008300:	3314      	adds	r3, #20
 8008302:	191c      	adds	r4, r3, r4
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	9804      	ldr	r0, [sp, #16]
 800830e:	681d      	ldr	r5, [r3, #0]
 8008310:	3501      	adds	r5, #1
 8008312:	0029      	movs	r1, r5
 8008314:	f7f7 ff12 	bl	800013c <__udivsi3>
 8008318:	9b04      	ldr	r3, [sp, #16]
 800831a:	9000      	str	r0, [sp, #0]
 800831c:	42ab      	cmp	r3, r5
 800831e:	d32b      	bcc.n	8008378 <quorem+0x9a>
 8008320:	9b05      	ldr	r3, [sp, #20]
 8008322:	9d01      	ldr	r5, [sp, #4]
 8008324:	469c      	mov	ip, r3
 8008326:	2300      	movs	r3, #0
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	4662      	mov	r2, ip
 800832e:	ca08      	ldmia	r2!, {r3}
 8008330:	6828      	ldr	r0, [r5, #0]
 8008332:	4694      	mov	ip, r2
 8008334:	9a00      	ldr	r2, [sp, #0]
 8008336:	b299      	uxth	r1, r3
 8008338:	4351      	muls	r1, r2
 800833a:	9a05      	ldr	r2, [sp, #20]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	1889      	adds	r1, r1, r2
 8008340:	9a00      	ldr	r2, [sp, #0]
 8008342:	4353      	muls	r3, r2
 8008344:	0c0a      	lsrs	r2, r1, #16
 8008346:	189b      	adds	r3, r3, r2
 8008348:	0c1a      	lsrs	r2, r3, #16
 800834a:	b289      	uxth	r1, r1
 800834c:	9205      	str	r2, [sp, #20]
 800834e:	b282      	uxth	r2, r0
 8008350:	1a52      	subs	r2, r2, r1
 8008352:	9904      	ldr	r1, [sp, #16]
 8008354:	0c00      	lsrs	r0, r0, #16
 8008356:	1852      	adds	r2, r2, r1
 8008358:	b29b      	uxth	r3, r3
 800835a:	1411      	asrs	r1, r2, #16
 800835c:	1ac3      	subs	r3, r0, r3
 800835e:	185b      	adds	r3, r3, r1
 8008360:	1419      	asrs	r1, r3, #16
 8008362:	b292      	uxth	r2, r2
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	431a      	orrs	r2, r3
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	9104      	str	r1, [sp, #16]
 800836c:	c504      	stmia	r5!, {r2}
 800836e:	4563      	cmp	r3, ip
 8008370:	d2dc      	bcs.n	800832c <quorem+0x4e>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d030      	beq.n	80083da <quorem+0xfc>
 8008378:	0030      	movs	r0, r6
 800837a:	9902      	ldr	r1, [sp, #8]
 800837c:	f001 f9c6 	bl	800970c <__mcmp>
 8008380:	2800      	cmp	r0, #0
 8008382:	db23      	blt.n	80083cc <quorem+0xee>
 8008384:	0034      	movs	r4, r6
 8008386:	2500      	movs	r5, #0
 8008388:	9902      	ldr	r1, [sp, #8]
 800838a:	3414      	adds	r4, #20
 800838c:	3114      	adds	r1, #20
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	c901      	ldmia	r1!, {r0}
 8008392:	9302      	str	r3, [sp, #8]
 8008394:	466b      	mov	r3, sp
 8008396:	891b      	ldrh	r3, [r3, #8]
 8008398:	b282      	uxth	r2, r0
 800839a:	1a9a      	subs	r2, r3, r2
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	1952      	adds	r2, r2, r5
 80083a0:	0c00      	lsrs	r0, r0, #16
 80083a2:	0c1b      	lsrs	r3, r3, #16
 80083a4:	1a1b      	subs	r3, r3, r0
 80083a6:	1410      	asrs	r0, r2, #16
 80083a8:	181b      	adds	r3, r3, r0
 80083aa:	141d      	asrs	r5, r3, #16
 80083ac:	b292      	uxth	r2, r2
 80083ae:	041b      	lsls	r3, r3, #16
 80083b0:	431a      	orrs	r2, r3
 80083b2:	9b03      	ldr	r3, [sp, #12]
 80083b4:	c404      	stmia	r4!, {r2}
 80083b6:	428b      	cmp	r3, r1
 80083b8:	d2e9      	bcs.n	800838e <quorem+0xb0>
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	00bb      	lsls	r3, r7, #2
 80083be:	18d3      	adds	r3, r2, r3
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d013      	beq.n	80083ee <quorem+0x110>
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	9800      	ldr	r0, [sp, #0]
 80083ce:	b007      	add	sp, #28
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <quorem+0x104>
 80083d8:	3f01      	subs	r7, #1
 80083da:	9b01      	ldr	r3, [sp, #4]
 80083dc:	3c04      	subs	r4, #4
 80083de:	42a3      	cmp	r3, r4
 80083e0:	d3f7      	bcc.n	80083d2 <quorem+0xf4>
 80083e2:	6137      	str	r7, [r6, #16]
 80083e4:	e7c8      	b.n	8008378 <quorem+0x9a>
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	d104      	bne.n	80083f6 <quorem+0x118>
 80083ec:	3f01      	subs	r7, #1
 80083ee:	9a01      	ldr	r2, [sp, #4]
 80083f0:	3b04      	subs	r3, #4
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d3f7      	bcc.n	80083e6 <quorem+0x108>
 80083f6:	6137      	str	r7, [r6, #16]
 80083f8:	e7e5      	b.n	80083c6 <quorem+0xe8>
	...

080083fc <_dtoa_r>:
 80083fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fe:	0014      	movs	r4, r2
 8008400:	001d      	movs	r5, r3
 8008402:	69c6      	ldr	r6, [r0, #28]
 8008404:	b09d      	sub	sp, #116	@ 0x74
 8008406:	940a      	str	r4, [sp, #40]	@ 0x28
 8008408:	950b      	str	r5, [sp, #44]	@ 0x2c
 800840a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800840c:	9003      	str	r0, [sp, #12]
 800840e:	2e00      	cmp	r6, #0
 8008410:	d10f      	bne.n	8008432 <_dtoa_r+0x36>
 8008412:	2010      	movs	r0, #16
 8008414:	f000 fe30 	bl	8009078 <malloc>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1e02      	subs	r2, r0, #0
 800841c:	61d8      	str	r0, [r3, #28]
 800841e:	d104      	bne.n	800842a <_dtoa_r+0x2e>
 8008420:	21ef      	movs	r1, #239	@ 0xef
 8008422:	4bc7      	ldr	r3, [pc, #796]	@ (8008740 <_dtoa_r+0x344>)
 8008424:	48c7      	ldr	r0, [pc, #796]	@ (8008744 <_dtoa_r+0x348>)
 8008426:	f001 fcbb 	bl	8009da0 <__assert_func>
 800842a:	6046      	str	r6, [r0, #4]
 800842c:	6086      	str	r6, [r0, #8]
 800842e:	6006      	str	r6, [r0, #0]
 8008430:	60c6      	str	r6, [r0, #12]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	6819      	ldr	r1, [r3, #0]
 8008438:	2900      	cmp	r1, #0
 800843a:	d00b      	beq.n	8008454 <_dtoa_r+0x58>
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	2301      	movs	r3, #1
 8008440:	4093      	lsls	r3, r2
 8008442:	604a      	str	r2, [r1, #4]
 8008444:	608b      	str	r3, [r1, #8]
 8008446:	9803      	ldr	r0, [sp, #12]
 8008448:	f000 ff16 	bl	8009278 <_Bfree>
 800844c:	2200      	movs	r2, #0
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2d00      	cmp	r5, #0
 8008456:	da1e      	bge.n	8008496 <_dtoa_r+0x9a>
 8008458:	2301      	movs	r3, #1
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	006b      	lsls	r3, r5, #1
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008462:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008464:	4bb8      	ldr	r3, [pc, #736]	@ (8008748 <_dtoa_r+0x34c>)
 8008466:	4ab8      	ldr	r2, [pc, #736]	@ (8008748 <_dtoa_r+0x34c>)
 8008468:	403b      	ands	r3, r7
 800846a:	4293      	cmp	r3, r2
 800846c:	d116      	bne.n	800849c <_dtoa_r+0xa0>
 800846e:	4bb7      	ldr	r3, [pc, #732]	@ (800874c <_dtoa_r+0x350>)
 8008470:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	033b      	lsls	r3, r7, #12
 8008476:	0b1b      	lsrs	r3, r3, #12
 8008478:	4323      	orrs	r3, r4
 800847a:	d101      	bne.n	8008480 <_dtoa_r+0x84>
 800847c:	f000 fd83 	bl	8008f86 <_dtoa_r+0xb8a>
 8008480:	4bb3      	ldr	r3, [pc, #716]	@ (8008750 <_dtoa_r+0x354>)
 8008482:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008484:	9308      	str	r3, [sp, #32]
 8008486:	2a00      	cmp	r2, #0
 8008488:	d002      	beq.n	8008490 <_dtoa_r+0x94>
 800848a:	4bb2      	ldr	r3, [pc, #712]	@ (8008754 <_dtoa_r+0x358>)
 800848c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	9808      	ldr	r0, [sp, #32]
 8008492:	b01d      	add	sp, #116	@ 0x74
 8008494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008496:	2300      	movs	r3, #0
 8008498:	603b      	str	r3, [r7, #0]
 800849a:	e7e2      	b.n	8008462 <_dtoa_r+0x66>
 800849c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800849e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084a0:	9212      	str	r2, [sp, #72]	@ 0x48
 80084a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80084a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084a8:	2200      	movs	r2, #0
 80084aa:	2300      	movs	r3, #0
 80084ac:	f7f7 ffcc 	bl	8000448 <__aeabi_dcmpeq>
 80084b0:	1e06      	subs	r6, r0, #0
 80084b2:	d00b      	beq.n	80084cc <_dtoa_r+0xd0>
 80084b4:	2301      	movs	r3, #1
 80084b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <_dtoa_r+0xca>
 80084c0:	4ba5      	ldr	r3, [pc, #660]	@ (8008758 <_dtoa_r+0x35c>)
 80084c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	4ba5      	ldr	r3, [pc, #660]	@ (800875c <_dtoa_r+0x360>)
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	e7e1      	b.n	8008490 <_dtoa_r+0x94>
 80084cc:	ab1a      	add	r3, sp, #104	@ 0x68
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9803      	ldr	r0, [sp, #12]
 80084d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084da:	f001 f9cd 	bl	8009878 <__d2b>
 80084de:	007a      	lsls	r2, r7, #1
 80084e0:	9005      	str	r0, [sp, #20]
 80084e2:	0d52      	lsrs	r2, r2, #21
 80084e4:	d100      	bne.n	80084e8 <_dtoa_r+0xec>
 80084e6:	e07b      	b.n	80085e0 <_dtoa_r+0x1e4>
 80084e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084ea:	9618      	str	r6, [sp, #96]	@ 0x60
 80084ec:	0319      	lsls	r1, r3, #12
 80084ee:	4b9c      	ldr	r3, [pc, #624]	@ (8008760 <_dtoa_r+0x364>)
 80084f0:	0b09      	lsrs	r1, r1, #12
 80084f2:	430b      	orrs	r3, r1
 80084f4:	499b      	ldr	r1, [pc, #620]	@ (8008764 <_dtoa_r+0x368>)
 80084f6:	1857      	adds	r7, r2, r1
 80084f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80084fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084fc:	0019      	movs	r1, r3
 80084fe:	2200      	movs	r2, #0
 8008500:	4b99      	ldr	r3, [pc, #612]	@ (8008768 <_dtoa_r+0x36c>)
 8008502:	f7fa f86f 	bl	80025e4 <__aeabi_dsub>
 8008506:	4a99      	ldr	r2, [pc, #612]	@ (800876c <_dtoa_r+0x370>)
 8008508:	4b99      	ldr	r3, [pc, #612]	@ (8008770 <_dtoa_r+0x374>)
 800850a:	f7f9 fda3 	bl	8002054 <__aeabi_dmul>
 800850e:	4a99      	ldr	r2, [pc, #612]	@ (8008774 <_dtoa_r+0x378>)
 8008510:	4b99      	ldr	r3, [pc, #612]	@ (8008778 <_dtoa_r+0x37c>)
 8008512:	f7f8 fdf7 	bl	8001104 <__aeabi_dadd>
 8008516:	0004      	movs	r4, r0
 8008518:	0038      	movs	r0, r7
 800851a:	000d      	movs	r5, r1
 800851c:	f7fa fc5c 	bl	8002dd8 <__aeabi_i2d>
 8008520:	4a96      	ldr	r2, [pc, #600]	@ (800877c <_dtoa_r+0x380>)
 8008522:	4b97      	ldr	r3, [pc, #604]	@ (8008780 <_dtoa_r+0x384>)
 8008524:	f7f9 fd96 	bl	8002054 <__aeabi_dmul>
 8008528:	0002      	movs	r2, r0
 800852a:	000b      	movs	r3, r1
 800852c:	0020      	movs	r0, r4
 800852e:	0029      	movs	r1, r5
 8008530:	f7f8 fde8 	bl	8001104 <__aeabi_dadd>
 8008534:	0004      	movs	r4, r0
 8008536:	000d      	movs	r5, r1
 8008538:	f7fa fc12 	bl	8002d60 <__aeabi_d2iz>
 800853c:	2200      	movs	r2, #0
 800853e:	9004      	str	r0, [sp, #16]
 8008540:	2300      	movs	r3, #0
 8008542:	0020      	movs	r0, r4
 8008544:	0029      	movs	r1, r5
 8008546:	f7f7 ff85 	bl	8000454 <__aeabi_dcmplt>
 800854a:	2800      	cmp	r0, #0
 800854c:	d00b      	beq.n	8008566 <_dtoa_r+0x16a>
 800854e:	9804      	ldr	r0, [sp, #16]
 8008550:	f7fa fc42 	bl	8002dd8 <__aeabi_i2d>
 8008554:	002b      	movs	r3, r5
 8008556:	0022      	movs	r2, r4
 8008558:	f7f7 ff76 	bl	8000448 <__aeabi_dcmpeq>
 800855c:	4243      	negs	r3, r0
 800855e:	4158      	adcs	r0, r3
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	1a1b      	subs	r3, r3, r0
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	2301      	movs	r3, #1
 8008568:	9315      	str	r3, [sp, #84]	@ 0x54
 800856a:	9b04      	ldr	r3, [sp, #16]
 800856c:	2b16      	cmp	r3, #22
 800856e:	d810      	bhi.n	8008592 <_dtoa_r+0x196>
 8008570:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008572:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008574:	9a04      	ldr	r2, [sp, #16]
 8008576:	4b83      	ldr	r3, [pc, #524]	@ (8008784 <_dtoa_r+0x388>)
 8008578:	00d2      	lsls	r2, r2, #3
 800857a:	189b      	adds	r3, r3, r2
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f7f7 ff68 	bl	8000454 <__aeabi_dcmplt>
 8008584:	2800      	cmp	r0, #0
 8008586:	d047      	beq.n	8008618 <_dtoa_r+0x21c>
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	9315      	str	r3, [sp, #84]	@ 0x54
 8008592:	2200      	movs	r2, #0
 8008594:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008596:	9206      	str	r2, [sp, #24]
 8008598:	1bdb      	subs	r3, r3, r7
 800859a:	1e5a      	subs	r2, r3, #1
 800859c:	d53e      	bpl.n	800861c <_dtoa_r+0x220>
 800859e:	2201      	movs	r2, #1
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	9306      	str	r3, [sp, #24]
 80085a4:	2300      	movs	r3, #0
 80085a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80085a8:	9b04      	ldr	r3, [sp, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	db38      	blt.n	8008620 <_dtoa_r+0x224>
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b2:	4694      	mov	ip, r2
 80085b4:	4463      	add	r3, ip
 80085b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80085b8:	2300      	movs	r3, #0
 80085ba:	9214      	str	r2, [sp, #80]	@ 0x50
 80085bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085c0:	2401      	movs	r4, #1
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d867      	bhi.n	8008696 <_dtoa_r+0x29a>
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	dd02      	ble.n	80085d0 <_dtoa_r+0x1d4>
 80085ca:	2400      	movs	r4, #0
 80085cc:	3b04      	subs	r3, #4
 80085ce:	9322      	str	r3, [sp, #136]	@ 0x88
 80085d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085d2:	1e98      	subs	r0, r3, #2
 80085d4:	2803      	cmp	r0, #3
 80085d6:	d867      	bhi.n	80086a8 <_dtoa_r+0x2ac>
 80085d8:	f7f7 fd9c 	bl	8000114 <__gnu_thumb1_case_uqi>
 80085dc:	5b383a2b 	.word	0x5b383a2b
 80085e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80085e2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80085e4:	18f6      	adds	r6, r6, r3
 80085e6:	4b68      	ldr	r3, [pc, #416]	@ (8008788 <_dtoa_r+0x38c>)
 80085e8:	18f2      	adds	r2, r6, r3
 80085ea:	2a20      	cmp	r2, #32
 80085ec:	dd0f      	ble.n	800860e <_dtoa_r+0x212>
 80085ee:	2340      	movs	r3, #64	@ 0x40
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	409f      	lsls	r7, r3
 80085f4:	4b65      	ldr	r3, [pc, #404]	@ (800878c <_dtoa_r+0x390>)
 80085f6:	0038      	movs	r0, r7
 80085f8:	18f3      	adds	r3, r6, r3
 80085fa:	40dc      	lsrs	r4, r3
 80085fc:	4320      	orrs	r0, r4
 80085fe:	f7fa fc19 	bl	8002e34 <__aeabi_ui2d>
 8008602:	2201      	movs	r2, #1
 8008604:	4b62      	ldr	r3, [pc, #392]	@ (8008790 <_dtoa_r+0x394>)
 8008606:	1e77      	subs	r7, r6, #1
 8008608:	18cb      	adds	r3, r1, r3
 800860a:	9218      	str	r2, [sp, #96]	@ 0x60
 800860c:	e776      	b.n	80084fc <_dtoa_r+0x100>
 800860e:	2320      	movs	r3, #32
 8008610:	0020      	movs	r0, r4
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	4098      	lsls	r0, r3
 8008616:	e7f2      	b.n	80085fe <_dtoa_r+0x202>
 8008618:	9015      	str	r0, [sp, #84]	@ 0x54
 800861a:	e7ba      	b.n	8008592 <_dtoa_r+0x196>
 800861c:	920d      	str	r2, [sp, #52]	@ 0x34
 800861e:	e7c3      	b.n	80085a8 <_dtoa_r+0x1ac>
 8008620:	9b06      	ldr	r3, [sp, #24]
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	9306      	str	r3, [sp, #24]
 8008628:	4253      	negs	r3, r2
 800862a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800862c:	2300      	movs	r3, #0
 800862e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008630:	e7c5      	b.n	80085be <_dtoa_r+0x1c2>
 8008632:	2300      	movs	r3, #0
 8008634:	9310      	str	r3, [sp, #64]	@ 0x40
 8008636:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008638:	930e      	str	r3, [sp, #56]	@ 0x38
 800863a:	9309      	str	r3, [sp, #36]	@ 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	dc13      	bgt.n	8008668 <_dtoa_r+0x26c>
 8008640:	2301      	movs	r3, #1
 8008642:	001a      	movs	r2, r3
 8008644:	930e      	str	r3, [sp, #56]	@ 0x38
 8008646:	9309      	str	r3, [sp, #36]	@ 0x24
 8008648:	9223      	str	r2, [sp, #140]	@ 0x8c
 800864a:	e00d      	b.n	8008668 <_dtoa_r+0x26c>
 800864c:	2301      	movs	r3, #1
 800864e:	e7f1      	b.n	8008634 <_dtoa_r+0x238>
 8008650:	2300      	movs	r3, #0
 8008652:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008654:	9310      	str	r3, [sp, #64]	@ 0x40
 8008656:	4694      	mov	ip, r2
 8008658:	9b04      	ldr	r3, [sp, #16]
 800865a:	4463      	add	r3, ip
 800865c:	930e      	str	r3, [sp, #56]	@ 0x38
 800865e:	3301      	adds	r3, #1
 8008660:	9309      	str	r3, [sp, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	dc00      	bgt.n	8008668 <_dtoa_r+0x26c>
 8008666:	2301      	movs	r3, #1
 8008668:	9a03      	ldr	r2, [sp, #12]
 800866a:	2100      	movs	r1, #0
 800866c:	69d0      	ldr	r0, [r2, #28]
 800866e:	2204      	movs	r2, #4
 8008670:	0015      	movs	r5, r2
 8008672:	3514      	adds	r5, #20
 8008674:	429d      	cmp	r5, r3
 8008676:	d91b      	bls.n	80086b0 <_dtoa_r+0x2b4>
 8008678:	6041      	str	r1, [r0, #4]
 800867a:	9803      	ldr	r0, [sp, #12]
 800867c:	f000 fdb8 	bl	80091f0 <_Balloc>
 8008680:	9008      	str	r0, [sp, #32]
 8008682:	2800      	cmp	r0, #0
 8008684:	d117      	bne.n	80086b6 <_dtoa_r+0x2ba>
 8008686:	21b0      	movs	r1, #176	@ 0xb0
 8008688:	4b42      	ldr	r3, [pc, #264]	@ (8008794 <_dtoa_r+0x398>)
 800868a:	482e      	ldr	r0, [pc, #184]	@ (8008744 <_dtoa_r+0x348>)
 800868c:	9a08      	ldr	r2, [sp, #32]
 800868e:	31ff      	adds	r1, #255	@ 0xff
 8008690:	e6c9      	b.n	8008426 <_dtoa_r+0x2a>
 8008692:	2301      	movs	r3, #1
 8008694:	e7dd      	b.n	8008652 <_dtoa_r+0x256>
 8008696:	2300      	movs	r3, #0
 8008698:	9410      	str	r4, [sp, #64]	@ 0x40
 800869a:	9322      	str	r3, [sp, #136]	@ 0x88
 800869c:	3b01      	subs	r3, #1
 800869e:	930e      	str	r3, [sp, #56]	@ 0x38
 80086a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086a2:	2200      	movs	r2, #0
 80086a4:	3313      	adds	r3, #19
 80086a6:	e7cf      	b.n	8008648 <_dtoa_r+0x24c>
 80086a8:	2301      	movs	r3, #1
 80086aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80086ac:	3b02      	subs	r3, #2
 80086ae:	e7f6      	b.n	800869e <_dtoa_r+0x2a2>
 80086b0:	3101      	adds	r1, #1
 80086b2:	0052      	lsls	r2, r2, #1
 80086b4:	e7dc      	b.n	8008670 <_dtoa_r+0x274>
 80086b6:	9b03      	ldr	r3, [sp, #12]
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	2b0e      	cmp	r3, #14
 80086c2:	d900      	bls.n	80086c6 <_dtoa_r+0x2ca>
 80086c4:	e0d9      	b.n	800887a <_dtoa_r+0x47e>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	d100      	bne.n	80086cc <_dtoa_r+0x2d0>
 80086ca:	e0d6      	b.n	800887a <_dtoa_r+0x47e>
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd64      	ble.n	800879c <_dtoa_r+0x3a0>
 80086d2:	210f      	movs	r1, #15
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	4b2b      	ldr	r3, [pc, #172]	@ (8008784 <_dtoa_r+0x388>)
 80086d8:	400a      	ands	r2, r1
 80086da:	00d2      	lsls	r2, r2, #3
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	681e      	ldr	r6, [r3, #0]
 80086e0:	685f      	ldr	r7, [r3, #4]
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	2402      	movs	r4, #2
 80086e6:	111d      	asrs	r5, r3, #4
 80086e8:	05db      	lsls	r3, r3, #23
 80086ea:	d50a      	bpl.n	8008702 <_dtoa_r+0x306>
 80086ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008798 <_dtoa_r+0x39c>)
 80086ee:	400d      	ands	r5, r1
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80086f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086f8:	f7f9 f868 	bl	80017cc <__aeabi_ddiv>
 80086fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80086fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008700:	3401      	adds	r4, #1
 8008702:	4b25      	ldr	r3, [pc, #148]	@ (8008798 <_dtoa_r+0x39c>)
 8008704:	930c      	str	r3, [sp, #48]	@ 0x30
 8008706:	2d00      	cmp	r5, #0
 8008708:	d108      	bne.n	800871c <_dtoa_r+0x320>
 800870a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800870c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800870e:	0032      	movs	r2, r6
 8008710:	003b      	movs	r3, r7
 8008712:	f7f9 f85b 	bl	80017cc <__aeabi_ddiv>
 8008716:	900a      	str	r0, [sp, #40]	@ 0x28
 8008718:	910b      	str	r1, [sp, #44]	@ 0x2c
 800871a:	e05a      	b.n	80087d2 <_dtoa_r+0x3d6>
 800871c:	2301      	movs	r3, #1
 800871e:	421d      	tst	r5, r3
 8008720:	d009      	beq.n	8008736 <_dtoa_r+0x33a>
 8008722:	18e4      	adds	r4, r4, r3
 8008724:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008726:	0030      	movs	r0, r6
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	0039      	movs	r1, r7
 800872e:	f7f9 fc91 	bl	8002054 <__aeabi_dmul>
 8008732:	0006      	movs	r6, r0
 8008734:	000f      	movs	r7, r1
 8008736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008738:	106d      	asrs	r5, r5, #1
 800873a:	3308      	adds	r3, #8
 800873c:	e7e2      	b.n	8008704 <_dtoa_r+0x308>
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	0800ae81 	.word	0x0800ae81
 8008744:	0800ae98 	.word	0x0800ae98
 8008748:	7ff00000 	.word	0x7ff00000
 800874c:	0000270f 	.word	0x0000270f
 8008750:	0800ae7d 	.word	0x0800ae7d
 8008754:	0800ae80 	.word	0x0800ae80
 8008758:	0800ae51 	.word	0x0800ae51
 800875c:	0800ae50 	.word	0x0800ae50
 8008760:	3ff00000 	.word	0x3ff00000
 8008764:	fffffc01 	.word	0xfffffc01
 8008768:	3ff80000 	.word	0x3ff80000
 800876c:	636f4361 	.word	0x636f4361
 8008770:	3fd287a7 	.word	0x3fd287a7
 8008774:	8b60c8b3 	.word	0x8b60c8b3
 8008778:	3fc68a28 	.word	0x3fc68a28
 800877c:	509f79fb 	.word	0x509f79fb
 8008780:	3fd34413 	.word	0x3fd34413
 8008784:	0800af90 	.word	0x0800af90
 8008788:	00000432 	.word	0x00000432
 800878c:	00000412 	.word	0x00000412
 8008790:	fe100000 	.word	0xfe100000
 8008794:	0800aef0 	.word	0x0800aef0
 8008798:	0800af68 	.word	0x0800af68
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	2402      	movs	r4, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d016      	beq.n	80087d2 <_dtoa_r+0x3d6>
 80087a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80087a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80087a8:	220f      	movs	r2, #15
 80087aa:	425d      	negs	r5, r3
 80087ac:	402a      	ands	r2, r5
 80087ae:	4bd7      	ldr	r3, [pc, #860]	@ (8008b0c <_dtoa_r+0x710>)
 80087b0:	00d2      	lsls	r2, r2, #3
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f7f9 fc4c 	bl	8002054 <__aeabi_dmul>
 80087bc:	2701      	movs	r7, #1
 80087be:	2300      	movs	r3, #0
 80087c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80087c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087c4:	4ed2      	ldr	r6, [pc, #840]	@ (8008b10 <_dtoa_r+0x714>)
 80087c6:	112d      	asrs	r5, r5, #4
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	d000      	beq.n	80087ce <_dtoa_r+0x3d2>
 80087cc:	e0ba      	b.n	8008944 <_dtoa_r+0x548>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1a1      	bne.n	8008716 <_dtoa_r+0x31a>
 80087d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80087d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d100      	bne.n	80087de <_dtoa_r+0x3e2>
 80087dc:	e0bd      	b.n	800895a <_dtoa_r+0x55e>
 80087de:	2200      	movs	r2, #0
 80087e0:	0030      	movs	r0, r6
 80087e2:	0039      	movs	r1, r7
 80087e4:	4bcb      	ldr	r3, [pc, #812]	@ (8008b14 <_dtoa_r+0x718>)
 80087e6:	f7f7 fe35 	bl	8000454 <__aeabi_dcmplt>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d100      	bne.n	80087f0 <_dtoa_r+0x3f4>
 80087ee:	e0b4      	b.n	800895a <_dtoa_r+0x55e>
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d100      	bne.n	80087f8 <_dtoa_r+0x3fc>
 80087f6:	e0b0      	b.n	800895a <_dtoa_r+0x55e>
 80087f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dd39      	ble.n	8008872 <_dtoa_r+0x476>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	2200      	movs	r2, #0
 8008802:	3b01      	subs	r3, #1
 8008804:	930c      	str	r3, [sp, #48]	@ 0x30
 8008806:	0030      	movs	r0, r6
 8008808:	4bc3      	ldr	r3, [pc, #780]	@ (8008b18 <_dtoa_r+0x71c>)
 800880a:	0039      	movs	r1, r7
 800880c:	f7f9 fc22 	bl	8002054 <__aeabi_dmul>
 8008810:	900a      	str	r0, [sp, #40]	@ 0x28
 8008812:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008816:	3401      	adds	r4, #1
 8008818:	0020      	movs	r0, r4
 800881a:	9311      	str	r3, [sp, #68]	@ 0x44
 800881c:	f7fa fadc 	bl	8002dd8 <__aeabi_i2d>
 8008820:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008824:	f7f9 fc16 	bl	8002054 <__aeabi_dmul>
 8008828:	4bbc      	ldr	r3, [pc, #752]	@ (8008b1c <_dtoa_r+0x720>)
 800882a:	2200      	movs	r2, #0
 800882c:	f7f8 fc6a 	bl	8001104 <__aeabi_dadd>
 8008830:	4bbb      	ldr	r3, [pc, #748]	@ (8008b20 <_dtoa_r+0x724>)
 8008832:	0006      	movs	r6, r0
 8008834:	18cf      	adds	r7, r1, r3
 8008836:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008838:	2b00      	cmp	r3, #0
 800883a:	d000      	beq.n	800883e <_dtoa_r+0x442>
 800883c:	e091      	b.n	8008962 <_dtoa_r+0x566>
 800883e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008842:	2200      	movs	r2, #0
 8008844:	4bb7      	ldr	r3, [pc, #732]	@ (8008b24 <_dtoa_r+0x728>)
 8008846:	f7f9 fecd 	bl	80025e4 <__aeabi_dsub>
 800884a:	0032      	movs	r2, r6
 800884c:	003b      	movs	r3, r7
 800884e:	0004      	movs	r4, r0
 8008850:	000d      	movs	r5, r1
 8008852:	f7f7 fe13 	bl	800047c <__aeabi_dcmpgt>
 8008856:	2800      	cmp	r0, #0
 8008858:	d000      	beq.n	800885c <_dtoa_r+0x460>
 800885a:	e29d      	b.n	8008d98 <_dtoa_r+0x99c>
 800885c:	2180      	movs	r1, #128	@ 0x80
 800885e:	0609      	lsls	r1, r1, #24
 8008860:	187b      	adds	r3, r7, r1
 8008862:	0032      	movs	r2, r6
 8008864:	0020      	movs	r0, r4
 8008866:	0029      	movs	r1, r5
 8008868:	f7f7 fdf4 	bl	8000454 <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	d000      	beq.n	8008872 <_dtoa_r+0x476>
 8008870:	e130      	b.n	8008ad4 <_dtoa_r+0x6d8>
 8008872:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008874:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008876:	930a      	str	r3, [sp, #40]	@ 0x28
 8008878:	940b      	str	r4, [sp, #44]	@ 0x2c
 800887a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800887c:	2b00      	cmp	r3, #0
 800887e:	da00      	bge.n	8008882 <_dtoa_r+0x486>
 8008880:	e177      	b.n	8008b72 <_dtoa_r+0x776>
 8008882:	9a04      	ldr	r2, [sp, #16]
 8008884:	2a0e      	cmp	r2, #14
 8008886:	dd00      	ble.n	800888a <_dtoa_r+0x48e>
 8008888:	e173      	b.n	8008b72 <_dtoa_r+0x776>
 800888a:	4ba0      	ldr	r3, [pc, #640]	@ (8008b0c <_dtoa_r+0x710>)
 800888c:	00d2      	lsls	r2, r2, #3
 800888e:	189b      	adds	r3, r3, r2
 8008890:	685c      	ldr	r4, [r3, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	9306      	str	r3, [sp, #24]
 8008896:	9407      	str	r4, [sp, #28]
 8008898:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800889a:	2b00      	cmp	r3, #0
 800889c:	da03      	bge.n	80088a6 <_dtoa_r+0x4aa>
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dc00      	bgt.n	80088a6 <_dtoa_r+0x4aa>
 80088a4:	e106      	b.n	8008ab4 <_dtoa_r+0x6b8>
 80088a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80088a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80088aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ac:	9d08      	ldr	r5, [sp, #32]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	195b      	adds	r3, r3, r5
 80088b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	0030      	movs	r0, r6
 80088ba:	0039      	movs	r1, r7
 80088bc:	f7f8 ff86 	bl	80017cc <__aeabi_ddiv>
 80088c0:	f7fa fa4e 	bl	8002d60 <__aeabi_d2iz>
 80088c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80088c6:	f7fa fa87 	bl	8002dd8 <__aeabi_i2d>
 80088ca:	9a06      	ldr	r2, [sp, #24]
 80088cc:	9b07      	ldr	r3, [sp, #28]
 80088ce:	f7f9 fbc1 	bl	8002054 <__aeabi_dmul>
 80088d2:	0002      	movs	r2, r0
 80088d4:	000b      	movs	r3, r1
 80088d6:	0030      	movs	r0, r6
 80088d8:	0039      	movs	r1, r7
 80088da:	f7f9 fe83 	bl	80025e4 <__aeabi_dsub>
 80088de:	002b      	movs	r3, r5
 80088e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088e2:	3501      	adds	r5, #1
 80088e4:	3230      	adds	r2, #48	@ 0x30
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088ea:	002c      	movs	r4, r5
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d000      	beq.n	80088f2 <_dtoa_r+0x4f6>
 80088f0:	e131      	b.n	8008b56 <_dtoa_r+0x75a>
 80088f2:	0002      	movs	r2, r0
 80088f4:	000b      	movs	r3, r1
 80088f6:	f7f8 fc05 	bl	8001104 <__aeabi_dadd>
 80088fa:	9a06      	ldr	r2, [sp, #24]
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	0006      	movs	r6, r0
 8008900:	000f      	movs	r7, r1
 8008902:	f7f7 fdbb 	bl	800047c <__aeabi_dcmpgt>
 8008906:	2800      	cmp	r0, #0
 8008908:	d000      	beq.n	800890c <_dtoa_r+0x510>
 800890a:	e10f      	b.n	8008b2c <_dtoa_r+0x730>
 800890c:	9a06      	ldr	r2, [sp, #24]
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	0030      	movs	r0, r6
 8008912:	0039      	movs	r1, r7
 8008914:	f7f7 fd98 	bl	8000448 <__aeabi_dcmpeq>
 8008918:	2800      	cmp	r0, #0
 800891a:	d003      	beq.n	8008924 <_dtoa_r+0x528>
 800891c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891e:	07dd      	lsls	r5, r3, #31
 8008920:	d500      	bpl.n	8008924 <_dtoa_r+0x528>
 8008922:	e103      	b.n	8008b2c <_dtoa_r+0x730>
 8008924:	9905      	ldr	r1, [sp, #20]
 8008926:	9803      	ldr	r0, [sp, #12]
 8008928:	f000 fca6 	bl	8009278 <_Bfree>
 800892c:	2300      	movs	r3, #0
 800892e:	7023      	strb	r3, [r4, #0]
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008934:	3301      	adds	r3, #1
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800893a:	2b00      	cmp	r3, #0
 800893c:	d100      	bne.n	8008940 <_dtoa_r+0x544>
 800893e:	e5a7      	b.n	8008490 <_dtoa_r+0x94>
 8008940:	601c      	str	r4, [r3, #0]
 8008942:	e5a5      	b.n	8008490 <_dtoa_r+0x94>
 8008944:	423d      	tst	r5, r7
 8008946:	d005      	beq.n	8008954 <_dtoa_r+0x558>
 8008948:	6832      	ldr	r2, [r6, #0]
 800894a:	6873      	ldr	r3, [r6, #4]
 800894c:	f7f9 fb82 	bl	8002054 <__aeabi_dmul>
 8008950:	003b      	movs	r3, r7
 8008952:	3401      	adds	r4, #1
 8008954:	106d      	asrs	r5, r5, #1
 8008956:	3608      	adds	r6, #8
 8008958:	e736      	b.n	80087c8 <_dtoa_r+0x3cc>
 800895a:	9b04      	ldr	r3, [sp, #16]
 800895c:	930c      	str	r3, [sp, #48]	@ 0x30
 800895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008960:	e75a      	b.n	8008818 <_dtoa_r+0x41c>
 8008962:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008964:	4b69      	ldr	r3, [pc, #420]	@ (8008b0c <_dtoa_r+0x710>)
 8008966:	3a01      	subs	r2, #1
 8008968:	00d2      	lsls	r2, r2, #3
 800896a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800896c:	189b      	adds	r3, r3, r2
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2900      	cmp	r1, #0
 8008974:	d04c      	beq.n	8008a10 <_dtoa_r+0x614>
 8008976:	2000      	movs	r0, #0
 8008978:	496b      	ldr	r1, [pc, #428]	@ (8008b28 <_dtoa_r+0x72c>)
 800897a:	f7f8 ff27 	bl	80017cc <__aeabi_ddiv>
 800897e:	0032      	movs	r2, r6
 8008980:	003b      	movs	r3, r7
 8008982:	f7f9 fe2f 	bl	80025e4 <__aeabi_dsub>
 8008986:	9a08      	ldr	r2, [sp, #32]
 8008988:	0006      	movs	r6, r0
 800898a:	4694      	mov	ip, r2
 800898c:	000f      	movs	r7, r1
 800898e:	9b08      	ldr	r3, [sp, #32]
 8008990:	9316      	str	r3, [sp, #88]	@ 0x58
 8008992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008994:	4463      	add	r3, ip
 8008996:	9311      	str	r3, [sp, #68]	@ 0x44
 8008998:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800899a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800899c:	f7fa f9e0 	bl	8002d60 <__aeabi_d2iz>
 80089a0:	0005      	movs	r5, r0
 80089a2:	f7fa fa19 	bl	8002dd8 <__aeabi_i2d>
 80089a6:	0002      	movs	r2, r0
 80089a8:	000b      	movs	r3, r1
 80089aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089ae:	f7f9 fe19 	bl	80025e4 <__aeabi_dsub>
 80089b2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089b4:	3530      	adds	r5, #48	@ 0x30
 80089b6:	1c5c      	adds	r4, r3, #1
 80089b8:	701d      	strb	r5, [r3, #0]
 80089ba:	0032      	movs	r2, r6
 80089bc:	003b      	movs	r3, r7
 80089be:	900a      	str	r0, [sp, #40]	@ 0x28
 80089c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089c2:	f7f7 fd47 	bl	8000454 <__aeabi_dcmplt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d16a      	bne.n	8008aa0 <_dtoa_r+0x6a4>
 80089ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ce:	2000      	movs	r0, #0
 80089d0:	4950      	ldr	r1, [pc, #320]	@ (8008b14 <_dtoa_r+0x718>)
 80089d2:	f7f9 fe07 	bl	80025e4 <__aeabi_dsub>
 80089d6:	0032      	movs	r2, r6
 80089d8:	003b      	movs	r3, r7
 80089da:	f7f7 fd3b 	bl	8000454 <__aeabi_dcmplt>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d000      	beq.n	80089e4 <_dtoa_r+0x5e8>
 80089e2:	e0a5      	b.n	8008b30 <_dtoa_r+0x734>
 80089e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	d100      	bne.n	80089ec <_dtoa_r+0x5f0>
 80089ea:	e742      	b.n	8008872 <_dtoa_r+0x476>
 80089ec:	2200      	movs	r2, #0
 80089ee:	0030      	movs	r0, r6
 80089f0:	0039      	movs	r1, r7
 80089f2:	4b49      	ldr	r3, [pc, #292]	@ (8008b18 <_dtoa_r+0x71c>)
 80089f4:	f7f9 fb2e 	bl	8002054 <__aeabi_dmul>
 80089f8:	2200      	movs	r2, #0
 80089fa:	0006      	movs	r6, r0
 80089fc:	000f      	movs	r7, r1
 80089fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a02:	4b45      	ldr	r3, [pc, #276]	@ (8008b18 <_dtoa_r+0x71c>)
 8008a04:	f7f9 fb26 	bl	8002054 <__aeabi_dmul>
 8008a08:	9416      	str	r4, [sp, #88]	@ 0x58
 8008a0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a0e:	e7c3      	b.n	8008998 <_dtoa_r+0x59c>
 8008a10:	0030      	movs	r0, r6
 8008a12:	0039      	movs	r1, r7
 8008a14:	f7f9 fb1e 	bl	8002054 <__aeabi_dmul>
 8008a18:	9d08      	ldr	r5, [sp, #32]
 8008a1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a1c:	002b      	movs	r3, r5
 8008a1e:	4694      	mov	ip, r2
 8008a20:	9016      	str	r0, [sp, #88]	@ 0x58
 8008a22:	9117      	str	r1, [sp, #92]	@ 0x5c
 8008a24:	4463      	add	r3, ip
 8008a26:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a2c:	f7fa f998 	bl	8002d60 <__aeabi_d2iz>
 8008a30:	0004      	movs	r4, r0
 8008a32:	f7fa f9d1 	bl	8002dd8 <__aeabi_i2d>
 8008a36:	000b      	movs	r3, r1
 8008a38:	0002      	movs	r2, r0
 8008a3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a3e:	f7f9 fdd1 	bl	80025e4 <__aeabi_dsub>
 8008a42:	3430      	adds	r4, #48	@ 0x30
 8008a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a46:	702c      	strb	r4, [r5, #0]
 8008a48:	3501      	adds	r5, #1
 8008a4a:	0006      	movs	r6, r0
 8008a4c:	000f      	movs	r7, r1
 8008a4e:	42ab      	cmp	r3, r5
 8008a50:	d129      	bne.n	8008aa6 <_dtoa_r+0x6aa>
 8008a52:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8008a54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8008a56:	9b08      	ldr	r3, [sp, #32]
 8008a58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008a5a:	469c      	mov	ip, r3
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4b32      	ldr	r3, [pc, #200]	@ (8008b28 <_dtoa_r+0x72c>)
 8008a60:	4464      	add	r4, ip
 8008a62:	f7f8 fb4f 	bl	8001104 <__aeabi_dadd>
 8008a66:	0002      	movs	r2, r0
 8008a68:	000b      	movs	r3, r1
 8008a6a:	0030      	movs	r0, r6
 8008a6c:	0039      	movs	r1, r7
 8008a6e:	f7f7 fd05 	bl	800047c <__aeabi_dcmpgt>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d15c      	bne.n	8008b30 <_dtoa_r+0x734>
 8008a76:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	492a      	ldr	r1, [pc, #168]	@ (8008b28 <_dtoa_r+0x72c>)
 8008a7e:	f7f9 fdb1 	bl	80025e4 <__aeabi_dsub>
 8008a82:	0002      	movs	r2, r0
 8008a84:	000b      	movs	r3, r1
 8008a86:	0030      	movs	r0, r6
 8008a88:	0039      	movs	r1, r7
 8008a8a:	f7f7 fce3 	bl	8000454 <__aeabi_dcmplt>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d100      	bne.n	8008a94 <_dtoa_r+0x698>
 8008a92:	e6ee      	b.n	8008872 <_dtoa_r+0x476>
 8008a94:	0023      	movs	r3, r4
 8008a96:	3c01      	subs	r4, #1
 8008a98:	7822      	ldrb	r2, [r4, #0]
 8008a9a:	2a30      	cmp	r2, #48	@ 0x30
 8008a9c:	d0fa      	beq.n	8008a94 <_dtoa_r+0x698>
 8008a9e:	001c      	movs	r4, r3
 8008aa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	e73e      	b.n	8008924 <_dtoa_r+0x528>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b18 <_dtoa_r+0x71c>)
 8008aaa:	f7f9 fad3 	bl	8002054 <__aeabi_dmul>
 8008aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ab0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ab2:	e7b9      	b.n	8008a28 <_dtoa_r+0x62c>
 8008ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10c      	bne.n	8008ad4 <_dtoa_r+0x6d8>
 8008aba:	9806      	ldr	r0, [sp, #24]
 8008abc:	9907      	ldr	r1, [sp, #28]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4b18      	ldr	r3, [pc, #96]	@ (8008b24 <_dtoa_r+0x728>)
 8008ac2:	f7f9 fac7 	bl	8002054 <__aeabi_dmul>
 8008ac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aca:	f7f7 fce1 	bl	8000490 <__aeabi_dcmpge>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d100      	bne.n	8008ad4 <_dtoa_r+0x6d8>
 8008ad2:	e164      	b.n	8008d9e <_dtoa_r+0x9a2>
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	0037      	movs	r7, r6
 8008ad8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ada:	9c08      	ldr	r4, [sp, #32]
 8008adc:	43db      	mvns	r3, r3
 8008ade:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	0031      	movs	r1, r6
 8008ae6:	9803      	ldr	r0, [sp, #12]
 8008ae8:	f000 fbc6 	bl	8009278 <_Bfree>
 8008aec:	2f00      	cmp	r7, #0
 8008aee:	d0d7      	beq.n	8008aa0 <_dtoa_r+0x6a4>
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <_dtoa_r+0x706>
 8008af6:	42bb      	cmp	r3, r7
 8008af8:	d003      	beq.n	8008b02 <_dtoa_r+0x706>
 8008afa:	0019      	movs	r1, r3
 8008afc:	9803      	ldr	r0, [sp, #12]
 8008afe:	f000 fbbb 	bl	8009278 <_Bfree>
 8008b02:	0039      	movs	r1, r7
 8008b04:	9803      	ldr	r0, [sp, #12]
 8008b06:	f000 fbb7 	bl	8009278 <_Bfree>
 8008b0a:	e7c9      	b.n	8008aa0 <_dtoa_r+0x6a4>
 8008b0c:	0800af90 	.word	0x0800af90
 8008b10:	0800af68 	.word	0x0800af68
 8008b14:	3ff00000 	.word	0x3ff00000
 8008b18:	40240000 	.word	0x40240000
 8008b1c:	401c0000 	.word	0x401c0000
 8008b20:	fcc00000 	.word	0xfcc00000
 8008b24:	40140000 	.word	0x40140000
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b30:	0023      	movs	r3, r4
 8008b32:	001c      	movs	r4, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	2a39      	cmp	r2, #57	@ 0x39
 8008b3a:	d108      	bne.n	8008b4e <_dtoa_r+0x752>
 8008b3c:	9a08      	ldr	r2, [sp, #32]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d1f7      	bne.n	8008b32 <_dtoa_r+0x736>
 8008b42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b44:	9908      	ldr	r1, [sp, #32]
 8008b46:	3201      	adds	r2, #1
 8008b48:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b4a:	2230      	movs	r2, #48	@ 0x30
 8008b4c:	700a      	strb	r2, [r1, #0]
 8008b4e:	781a      	ldrb	r2, [r3, #0]
 8008b50:	3201      	adds	r2, #1
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e7a4      	b.n	8008aa0 <_dtoa_r+0x6a4>
 8008b56:	2200      	movs	r2, #0
 8008b58:	4bc6      	ldr	r3, [pc, #792]	@ (8008e74 <_dtoa_r+0xa78>)
 8008b5a:	f7f9 fa7b 	bl	8002054 <__aeabi_dmul>
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2300      	movs	r3, #0
 8008b62:	0006      	movs	r6, r0
 8008b64:	000f      	movs	r7, r1
 8008b66:	f7f7 fc6f 	bl	8000448 <__aeabi_dcmpeq>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d100      	bne.n	8008b70 <_dtoa_r+0x774>
 8008b6e:	e6a1      	b.n	80088b4 <_dtoa_r+0x4b8>
 8008b70:	e6d8      	b.n	8008924 <_dtoa_r+0x528>
 8008b72:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008b74:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008b76:	9c06      	ldr	r4, [sp, #24]
 8008b78:	2f00      	cmp	r7, #0
 8008b7a:	d014      	beq.n	8008ba6 <_dtoa_r+0x7aa>
 8008b7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b7e:	2a01      	cmp	r2, #1
 8008b80:	dd00      	ble.n	8008b84 <_dtoa_r+0x788>
 8008b82:	e0c8      	b.n	8008d16 <_dtoa_r+0x91a>
 8008b84:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	d100      	bne.n	8008b8c <_dtoa_r+0x790>
 8008b8a:	e0be      	b.n	8008d0a <_dtoa_r+0x90e>
 8008b8c:	4aba      	ldr	r2, [pc, #744]	@ (8008e78 <_dtoa_r+0xa7c>)
 8008b8e:	189b      	adds	r3, r3, r2
 8008b90:	9a06      	ldr	r2, [sp, #24]
 8008b92:	2101      	movs	r1, #1
 8008b94:	18d2      	adds	r2, r2, r3
 8008b96:	9206      	str	r2, [sp, #24]
 8008b98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b9a:	9803      	ldr	r0, [sp, #12]
 8008b9c:	18d3      	adds	r3, r2, r3
 8008b9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ba0:	f000 fc22 	bl	80093e8 <__i2b>
 8008ba4:	0007      	movs	r7, r0
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	d00e      	beq.n	8008bc8 <_dtoa_r+0x7cc>
 8008baa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dd0b      	ble.n	8008bc8 <_dtoa_r+0x7cc>
 8008bb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bb2:	0023      	movs	r3, r4
 8008bb4:	4294      	cmp	r4, r2
 8008bb6:	dd00      	ble.n	8008bba <_dtoa_r+0x7be>
 8008bb8:	0013      	movs	r3, r2
 8008bba:	9a06      	ldr	r2, [sp, #24]
 8008bbc:	1ae4      	subs	r4, r4, r3
 8008bbe:	1ad2      	subs	r2, r2, r3
 8008bc0:	9206      	str	r2, [sp, #24]
 8008bc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01f      	beq.n	8008c0e <_dtoa_r+0x812>
 8008bce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d100      	bne.n	8008bd6 <_dtoa_r+0x7da>
 8008bd4:	e0b5      	b.n	8008d42 <_dtoa_r+0x946>
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	d010      	beq.n	8008bfc <_dtoa_r+0x800>
 8008bda:	0039      	movs	r1, r7
 8008bdc:	002a      	movs	r2, r5
 8008bde:	9803      	ldr	r0, [sp, #12]
 8008be0:	f000 fccc 	bl	800957c <__pow5mult>
 8008be4:	9a05      	ldr	r2, [sp, #20]
 8008be6:	0001      	movs	r1, r0
 8008be8:	0007      	movs	r7, r0
 8008bea:	9803      	ldr	r0, [sp, #12]
 8008bec:	f000 fc14 	bl	8009418 <__multiply>
 8008bf0:	0006      	movs	r6, r0
 8008bf2:	9905      	ldr	r1, [sp, #20]
 8008bf4:	9803      	ldr	r0, [sp, #12]
 8008bf6:	f000 fb3f 	bl	8009278 <_Bfree>
 8008bfa:	9605      	str	r6, [sp, #20]
 8008bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bfe:	1b5a      	subs	r2, r3, r5
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	d004      	beq.n	8008c0e <_dtoa_r+0x812>
 8008c04:	9905      	ldr	r1, [sp, #20]
 8008c06:	9803      	ldr	r0, [sp, #12]
 8008c08:	f000 fcb8 	bl	800957c <__pow5mult>
 8008c0c:	9005      	str	r0, [sp, #20]
 8008c0e:	2101      	movs	r1, #1
 8008c10:	9803      	ldr	r0, [sp, #12]
 8008c12:	f000 fbe9 	bl	80093e8 <__i2b>
 8008c16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c18:	0006      	movs	r6, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d100      	bne.n	8008c20 <_dtoa_r+0x824>
 8008c1e:	e1bc      	b.n	8008f9a <_dtoa_r+0xb9e>
 8008c20:	001a      	movs	r2, r3
 8008c22:	0001      	movs	r1, r0
 8008c24:	9803      	ldr	r0, [sp, #12]
 8008c26:	f000 fca9 	bl	800957c <__pow5mult>
 8008c2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c2c:	0006      	movs	r6, r0
 8008c2e:	2500      	movs	r5, #0
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	dc16      	bgt.n	8008c62 <_dtoa_r+0x866>
 8008c34:	2500      	movs	r5, #0
 8008c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	d10e      	bne.n	8008c5a <_dtoa_r+0x85e>
 8008c3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c3e:	031b      	lsls	r3, r3, #12
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	d10a      	bne.n	8008c5a <_dtoa_r+0x85e>
 8008c44:	4b8d      	ldr	r3, [pc, #564]	@ (8008e7c <_dtoa_r+0xa80>)
 8008c46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c48:	4213      	tst	r3, r2
 8008c4a:	d006      	beq.n	8008c5a <_dtoa_r+0x85e>
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	3501      	adds	r5, #1
 8008c50:	3301      	adds	r3, #1
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c56:	3301      	adds	r3, #1
 8008c58:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d008      	beq.n	8008c74 <_dtoa_r+0x878>
 8008c62:	6933      	ldr	r3, [r6, #16]
 8008c64:	3303      	adds	r3, #3
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	18f3      	adds	r3, r6, r3
 8008c6a:	6858      	ldr	r0, [r3, #4]
 8008c6c:	f000 fb6c 	bl	8009348 <__hi0bits>
 8008c70:	2320      	movs	r3, #32
 8008c72:	1a18      	subs	r0, r3, r0
 8008c74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c76:	1818      	adds	r0, r3, r0
 8008c78:	0002      	movs	r2, r0
 8008c7a:	231f      	movs	r3, #31
 8008c7c:	401a      	ands	r2, r3
 8008c7e:	4218      	tst	r0, r3
 8008c80:	d065      	beq.n	8008d4e <_dtoa_r+0x952>
 8008c82:	3301      	adds	r3, #1
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	dd5d      	ble.n	8008d46 <_dtoa_r+0x94a>
 8008c8a:	231c      	movs	r3, #28
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	9a06      	ldr	r2, [sp, #24]
 8008c90:	18e4      	adds	r4, r4, r3
 8008c92:	18d2      	adds	r2, r2, r3
 8008c94:	9206      	str	r2, [sp, #24]
 8008c96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c98:	18d3      	adds	r3, r2, r3
 8008c9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c9c:	9b06      	ldr	r3, [sp, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd05      	ble.n	8008cae <_dtoa_r+0x8b2>
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	9905      	ldr	r1, [sp, #20]
 8008ca6:	9803      	ldr	r0, [sp, #12]
 8008ca8:	f000 fcc4 	bl	8009634 <__lshift>
 8008cac:	9005      	str	r0, [sp, #20]
 8008cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dd05      	ble.n	8008cc0 <_dtoa_r+0x8c4>
 8008cb4:	0031      	movs	r1, r6
 8008cb6:	001a      	movs	r2, r3
 8008cb8:	9803      	ldr	r0, [sp, #12]
 8008cba:	f000 fcbb 	bl	8009634 <__lshift>
 8008cbe:	0006      	movs	r6, r0
 8008cc0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d045      	beq.n	8008d52 <_dtoa_r+0x956>
 8008cc6:	0031      	movs	r1, r6
 8008cc8:	9805      	ldr	r0, [sp, #20]
 8008cca:	f000 fd1f 	bl	800970c <__mcmp>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	da3f      	bge.n	8008d52 <_dtoa_r+0x956>
 8008cd2:	9b04      	ldr	r3, [sp, #16]
 8008cd4:	220a      	movs	r2, #10
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cda:	9905      	ldr	r1, [sp, #20]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9803      	ldr	r0, [sp, #12]
 8008ce0:	f000 faee 	bl	80092c0 <__multadd>
 8008ce4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ce6:	9005      	str	r0, [sp, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d100      	bne.n	8008cee <_dtoa_r+0x8f2>
 8008cec:	e15c      	b.n	8008fa8 <_dtoa_r+0xbac>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	0039      	movs	r1, r7
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	9803      	ldr	r0, [sp, #12]
 8008cf6:	f000 fae3 	bl	80092c0 <__multadd>
 8008cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cfc:	0007      	movs	r7, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dc55      	bgt.n	8008dae <_dtoa_r+0x9b2>
 8008d02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	dc2d      	bgt.n	8008d64 <_dtoa_r+0x968>
 8008d08:	e051      	b.n	8008dae <_dtoa_r+0x9b2>
 8008d0a:	2336      	movs	r3, #54	@ 0x36
 8008d0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d0e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008d10:	9c06      	ldr	r4, [sp, #24]
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	e73c      	b.n	8008b90 <_dtoa_r+0x794>
 8008d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d18:	1e5d      	subs	r5, r3, #1
 8008d1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	db08      	blt.n	8008d32 <_dtoa_r+0x936>
 8008d20:	1b5d      	subs	r5, r3, r5
 8008d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d24:	9c06      	ldr	r4, [sp, #24]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	db00      	blt.n	8008d2c <_dtoa_r+0x930>
 8008d2a:	e731      	b.n	8008b90 <_dtoa_r+0x794>
 8008d2c:	1ae4      	subs	r4, r4, r3
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e72e      	b.n	8008b90 <_dtoa_r+0x794>
 8008d32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d36:	1aeb      	subs	r3, r5, r3
 8008d38:	18d3      	adds	r3, r2, r3
 8008d3a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008d3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8008d3e:	2500      	movs	r5, #0
 8008d40:	e7ef      	b.n	8008d22 <_dtoa_r+0x926>
 8008d42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d44:	e75e      	b.n	8008c04 <_dtoa_r+0x808>
 8008d46:	2b04      	cmp	r3, #4
 8008d48:	d0a8      	beq.n	8008c9c <_dtoa_r+0x8a0>
 8008d4a:	331c      	adds	r3, #28
 8008d4c:	e79f      	b.n	8008c8e <_dtoa_r+0x892>
 8008d4e:	0013      	movs	r3, r2
 8008d50:	e7fb      	b.n	8008d4a <_dtoa_r+0x94e>
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dc23      	bgt.n	8008da6 <_dtoa_r+0x9aa>
 8008d5e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	dd20      	ble.n	8008da6 <_dtoa_r+0x9aa>
 8008d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d000      	beq.n	8008d6c <_dtoa_r+0x970>
 8008d6a:	e6b5      	b.n	8008ad8 <_dtoa_r+0x6dc>
 8008d6c:	0031      	movs	r1, r6
 8008d6e:	2205      	movs	r2, #5
 8008d70:	9803      	ldr	r0, [sp, #12]
 8008d72:	f000 faa5 	bl	80092c0 <__multadd>
 8008d76:	0006      	movs	r6, r0
 8008d78:	0001      	movs	r1, r0
 8008d7a:	9805      	ldr	r0, [sp, #20]
 8008d7c:	f000 fcc6 	bl	800970c <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dc00      	bgt.n	8008d86 <_dtoa_r+0x98a>
 8008d84:	e6a8      	b.n	8008ad8 <_dtoa_r+0x6dc>
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	1c5c      	adds	r4, r3, #1
 8008d8c:	2331      	movs	r3, #49	@ 0x31
 8008d8e:	7013      	strb	r3, [r2, #0]
 8008d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d92:	3301      	adds	r3, #1
 8008d94:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d96:	e6a3      	b.n	8008ae0 <_dtoa_r+0x6e4>
 8008d98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008d9a:	0037      	movs	r7, r6
 8008d9c:	e7f3      	b.n	8008d86 <_dtoa_r+0x98a>
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008da2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008da4:	e7f9      	b.n	8008d9a <_dtoa_r+0x99e>
 8008da6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d100      	bne.n	8008dae <_dtoa_r+0x9b2>
 8008dac:	e100      	b.n	8008fb0 <_dtoa_r+0xbb4>
 8008dae:	2c00      	cmp	r4, #0
 8008db0:	dd05      	ble.n	8008dbe <_dtoa_r+0x9c2>
 8008db2:	0039      	movs	r1, r7
 8008db4:	0022      	movs	r2, r4
 8008db6:	9803      	ldr	r0, [sp, #12]
 8008db8:	f000 fc3c 	bl	8009634 <__lshift>
 8008dbc:	0007      	movs	r7, r0
 8008dbe:	0038      	movs	r0, r7
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	d018      	beq.n	8008df6 <_dtoa_r+0x9fa>
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	9803      	ldr	r0, [sp, #12]
 8008dc8:	f000 fa12 	bl	80091f0 <_Balloc>
 8008dcc:	1e04      	subs	r4, r0, #0
 8008dce:	d105      	bne.n	8008ddc <_dtoa_r+0x9e0>
 8008dd0:	0022      	movs	r2, r4
 8008dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8008e80 <_dtoa_r+0xa84>)
 8008dd4:	482b      	ldr	r0, [pc, #172]	@ (8008e84 <_dtoa_r+0xa88>)
 8008dd6:	492c      	ldr	r1, [pc, #176]	@ (8008e88 <_dtoa_r+0xa8c>)
 8008dd8:	f7ff fb25 	bl	8008426 <_dtoa_r+0x2a>
 8008ddc:	0039      	movs	r1, r7
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	310c      	adds	r1, #12
 8008de2:	3202      	adds	r2, #2
 8008de4:	0092      	lsls	r2, r2, #2
 8008de6:	300c      	adds	r0, #12
 8008de8:	f7ff fa70 	bl	80082cc <memcpy>
 8008dec:	2201      	movs	r2, #1
 8008dee:	0021      	movs	r1, r4
 8008df0:	9803      	ldr	r0, [sp, #12]
 8008df2:	f000 fc1f 	bl	8009634 <__lshift>
 8008df6:	9b08      	ldr	r3, [sp, #32]
 8008df8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dfa:	9306      	str	r3, [sp, #24]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	189b      	adds	r3, r3, r2
 8008e00:	2201      	movs	r2, #1
 8008e02:	9704      	str	r7, [sp, #16]
 8008e04:	0007      	movs	r7, r0
 8008e06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e0e:	0031      	movs	r1, r6
 8008e10:	9805      	ldr	r0, [sp, #20]
 8008e12:	f7ff fa64 	bl	80082de <quorem>
 8008e16:	9904      	ldr	r1, [sp, #16]
 8008e18:	0005      	movs	r5, r0
 8008e1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e1c:	9805      	ldr	r0, [sp, #20]
 8008e1e:	f000 fc75 	bl	800970c <__mcmp>
 8008e22:	003a      	movs	r2, r7
 8008e24:	900d      	str	r0, [sp, #52]	@ 0x34
 8008e26:	0031      	movs	r1, r6
 8008e28:	9803      	ldr	r0, [sp, #12]
 8008e2a:	f000 fc8b 	bl	8009744 <__mdiff>
 8008e2e:	2201      	movs	r2, #1
 8008e30:	68c3      	ldr	r3, [r0, #12]
 8008e32:	0004      	movs	r4, r0
 8008e34:	3530      	adds	r5, #48	@ 0x30
 8008e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <_dtoa_r+0xa4a>
 8008e3c:	0001      	movs	r1, r0
 8008e3e:	9805      	ldr	r0, [sp, #20]
 8008e40:	f000 fc64 	bl	800970c <__mcmp>
 8008e44:	9009      	str	r0, [sp, #36]	@ 0x24
 8008e46:	0021      	movs	r1, r4
 8008e48:	9803      	ldr	r0, [sp, #12]
 8008e4a:	f000 fa15 	bl	8009278 <_Bfree>
 8008e4e:	9b06      	ldr	r3, [sp, #24]
 8008e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e52:	1c5c      	adds	r4, r3, #1
 8008e54:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e56:	4313      	orrs	r3, r2
 8008e58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	d116      	bne.n	8008e8c <_dtoa_r+0xa90>
 8008e5e:	2d39      	cmp	r5, #57	@ 0x39
 8008e60:	d02f      	beq.n	8008ec2 <_dtoa_r+0xac6>
 8008e62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dd01      	ble.n	8008e6c <_dtoa_r+0xa70>
 8008e68:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008e6a:	3531      	adds	r5, #49	@ 0x31
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	701d      	strb	r5, [r3, #0]
 8008e70:	e638      	b.n	8008ae4 <_dtoa_r+0x6e8>
 8008e72:	46c0      	nop			@ (mov r8, r8)
 8008e74:	40240000 	.word	0x40240000
 8008e78:	00000433 	.word	0x00000433
 8008e7c:	7ff00000 	.word	0x7ff00000
 8008e80:	0800aef0 	.word	0x0800aef0
 8008e84:	0800ae98 	.word	0x0800ae98
 8008e88:	000002ef 	.word	0x000002ef
 8008e8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db04      	blt.n	8008e9c <_dtoa_r+0xaa0>
 8008e92:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008e94:	4313      	orrs	r3, r2
 8008e96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d11e      	bne.n	8008eda <_dtoa_r+0xade>
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dde4      	ble.n	8008e6c <_dtoa_r+0xa70>
 8008ea2:	9905      	ldr	r1, [sp, #20]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	9803      	ldr	r0, [sp, #12]
 8008ea8:	f000 fbc4 	bl	8009634 <__lshift>
 8008eac:	0031      	movs	r1, r6
 8008eae:	9005      	str	r0, [sp, #20]
 8008eb0:	f000 fc2c 	bl	800970c <__mcmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	dc02      	bgt.n	8008ebe <_dtoa_r+0xac2>
 8008eb8:	d1d8      	bne.n	8008e6c <_dtoa_r+0xa70>
 8008eba:	07eb      	lsls	r3, r5, #31
 8008ebc:	d5d6      	bpl.n	8008e6c <_dtoa_r+0xa70>
 8008ebe:	2d39      	cmp	r5, #57	@ 0x39
 8008ec0:	d1d2      	bne.n	8008e68 <_dtoa_r+0xa6c>
 8008ec2:	2339      	movs	r3, #57	@ 0x39
 8008ec4:	9a06      	ldr	r2, [sp, #24]
 8008ec6:	7013      	strb	r3, [r2, #0]
 8008ec8:	0023      	movs	r3, r4
 8008eca:	001c      	movs	r4, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	2a39      	cmp	r2, #57	@ 0x39
 8008ed2:	d04f      	beq.n	8008f74 <_dtoa_r+0xb78>
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e604      	b.n	8008ae4 <_dtoa_r+0x6e8>
 8008eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dd03      	ble.n	8008ee8 <_dtoa_r+0xaec>
 8008ee0:	2d39      	cmp	r5, #57	@ 0x39
 8008ee2:	d0ee      	beq.n	8008ec2 <_dtoa_r+0xac6>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	e7c1      	b.n	8008e6c <_dtoa_r+0xa70>
 8008ee8:	9b06      	ldr	r3, [sp, #24]
 8008eea:	9a06      	ldr	r2, [sp, #24]
 8008eec:	701d      	strb	r5, [r3, #0]
 8008eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d02a      	beq.n	8008f4a <_dtoa_r+0xb4e>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	220a      	movs	r2, #10
 8008ef8:	9905      	ldr	r1, [sp, #20]
 8008efa:	9803      	ldr	r0, [sp, #12]
 8008efc:	f000 f9e0 	bl	80092c0 <__multadd>
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	9005      	str	r0, [sp, #20]
 8008f04:	42bb      	cmp	r3, r7
 8008f06:	d109      	bne.n	8008f1c <_dtoa_r+0xb20>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	220a      	movs	r2, #10
 8008f0c:	9904      	ldr	r1, [sp, #16]
 8008f0e:	9803      	ldr	r0, [sp, #12]
 8008f10:	f000 f9d6 	bl	80092c0 <__multadd>
 8008f14:	9004      	str	r0, [sp, #16]
 8008f16:	0007      	movs	r7, r0
 8008f18:	9406      	str	r4, [sp, #24]
 8008f1a:	e778      	b.n	8008e0e <_dtoa_r+0xa12>
 8008f1c:	9904      	ldr	r1, [sp, #16]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	220a      	movs	r2, #10
 8008f22:	9803      	ldr	r0, [sp, #12]
 8008f24:	f000 f9cc 	bl	80092c0 <__multadd>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9004      	str	r0, [sp, #16]
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	0039      	movs	r1, r7
 8008f30:	9803      	ldr	r0, [sp, #12]
 8008f32:	f000 f9c5 	bl	80092c0 <__multadd>
 8008f36:	e7ee      	b.n	8008f16 <_dtoa_r+0xb1a>
 8008f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f3a:	2401      	movs	r4, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dd00      	ble.n	8008f42 <_dtoa_r+0xb46>
 8008f40:	001c      	movs	r4, r3
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	191c      	adds	r4, r3, r4
 8008f46:	2300      	movs	r3, #0
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	9905      	ldr	r1, [sp, #20]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	9803      	ldr	r0, [sp, #12]
 8008f50:	f000 fb70 	bl	8009634 <__lshift>
 8008f54:	0031      	movs	r1, r6
 8008f56:	9005      	str	r0, [sp, #20]
 8008f58:	f000 fbd8 	bl	800970c <__mcmp>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	dcb3      	bgt.n	8008ec8 <_dtoa_r+0xacc>
 8008f60:	d101      	bne.n	8008f66 <_dtoa_r+0xb6a>
 8008f62:	07ed      	lsls	r5, r5, #31
 8008f64:	d4b0      	bmi.n	8008ec8 <_dtoa_r+0xacc>
 8008f66:	0023      	movs	r3, r4
 8008f68:	001c      	movs	r4, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	2a30      	cmp	r2, #48	@ 0x30
 8008f70:	d0fa      	beq.n	8008f68 <_dtoa_r+0xb6c>
 8008f72:	e5b7      	b.n	8008ae4 <_dtoa_r+0x6e8>
 8008f74:	9a08      	ldr	r2, [sp, #32]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d1a7      	bne.n	8008eca <_dtoa_r+0xace>
 8008f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f80:	2331      	movs	r3, #49	@ 0x31
 8008f82:	7013      	strb	r3, [r2, #0]
 8008f84:	e5ae      	b.n	8008ae4 <_dtoa_r+0x6e8>
 8008f86:	4b15      	ldr	r3, [pc, #84]	@ (8008fdc <_dtoa_r+0xbe0>)
 8008f88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	4b14      	ldr	r3, [pc, #80]	@ (8008fe0 <_dtoa_r+0xbe4>)
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	d001      	beq.n	8008f96 <_dtoa_r+0xb9a>
 8008f92:	f7ff fa7b 	bl	800848c <_dtoa_r+0x90>
 8008f96:	f7ff fa7b 	bl	8008490 <_dtoa_r+0x94>
 8008f9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	dc00      	bgt.n	8008fa2 <_dtoa_r+0xba6>
 8008fa0:	e648      	b.n	8008c34 <_dtoa_r+0x838>
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008fa6:	e665      	b.n	8008c74 <_dtoa_r+0x878>
 8008fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dc00      	bgt.n	8008fb0 <_dtoa_r+0xbb4>
 8008fae:	e6d6      	b.n	8008d5e <_dtoa_r+0x962>
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	0031      	movs	r1, r6
 8008fb4:	9805      	ldr	r0, [sp, #20]
 8008fb6:	f7ff f992 	bl	80082de <quorem>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	3030      	adds	r0, #48	@ 0x30
 8008fbe:	5518      	strb	r0, [r3, r4]
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fc2:	3401      	adds	r4, #1
 8008fc4:	0005      	movs	r5, r0
 8008fc6:	429c      	cmp	r4, r3
 8008fc8:	dab6      	bge.n	8008f38 <_dtoa_r+0xb3c>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	9905      	ldr	r1, [sp, #20]
 8008fd0:	9803      	ldr	r0, [sp, #12]
 8008fd2:	f000 f975 	bl	80092c0 <__multadd>
 8008fd6:	9005      	str	r0, [sp, #20]
 8008fd8:	e7eb      	b.n	8008fb2 <_dtoa_r+0xbb6>
 8008fda:	46c0      	nop			@ (mov r8, r8)
 8008fdc:	0800ae74 	.word	0x0800ae74
 8008fe0:	0800ae7c 	.word	0x0800ae7c

08008fe4 <_free_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	0005      	movs	r5, r0
 8008fe8:	1e0c      	subs	r4, r1, #0
 8008fea:	d010      	beq.n	800900e <_free_r+0x2a>
 8008fec:	3c04      	subs	r4, #4
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da00      	bge.n	8008ff6 <_free_r+0x12>
 8008ff4:	18e4      	adds	r4, r4, r3
 8008ff6:	0028      	movs	r0, r5
 8008ff8:	f000 f8ea 	bl	80091d0 <__malloc_lock>
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8009074 <_free_r+0x90>)
 8008ffe:	6813      	ldr	r3, [r2, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <_free_r+0x2c>
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	6014      	str	r4, [r2, #0]
 8009008:	0028      	movs	r0, r5
 800900a:	f000 f8e9 	bl	80091e0 <__malloc_unlock>
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	42a3      	cmp	r3, r4
 8009012:	d908      	bls.n	8009026 <_free_r+0x42>
 8009014:	6820      	ldr	r0, [r4, #0]
 8009016:	1821      	adds	r1, r4, r0
 8009018:	428b      	cmp	r3, r1
 800901a:	d1f3      	bne.n	8009004 <_free_r+0x20>
 800901c:	6819      	ldr	r1, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	1809      	adds	r1, r1, r0
 8009022:	6021      	str	r1, [r4, #0]
 8009024:	e7ee      	b.n	8009004 <_free_r+0x20>
 8009026:	001a      	movs	r2, r3
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <_free_r+0x4e>
 800902e:	42a3      	cmp	r3, r4
 8009030:	d9f9      	bls.n	8009026 <_free_r+0x42>
 8009032:	6811      	ldr	r1, [r2, #0]
 8009034:	1850      	adds	r0, r2, r1
 8009036:	42a0      	cmp	r0, r4
 8009038:	d10b      	bne.n	8009052 <_free_r+0x6e>
 800903a:	6820      	ldr	r0, [r4, #0]
 800903c:	1809      	adds	r1, r1, r0
 800903e:	1850      	adds	r0, r2, r1
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	4283      	cmp	r3, r0
 8009044:	d1e0      	bne.n	8009008 <_free_r+0x24>
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	1841      	adds	r1, r0, r1
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	6053      	str	r3, [r2, #4]
 8009050:	e7da      	b.n	8009008 <_free_r+0x24>
 8009052:	42a0      	cmp	r0, r4
 8009054:	d902      	bls.n	800905c <_free_r+0x78>
 8009056:	230c      	movs	r3, #12
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	e7d5      	b.n	8009008 <_free_r+0x24>
 800905c:	6820      	ldr	r0, [r4, #0]
 800905e:	1821      	adds	r1, r4, r0
 8009060:	428b      	cmp	r3, r1
 8009062:	d103      	bne.n	800906c <_free_r+0x88>
 8009064:	6819      	ldr	r1, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	1809      	adds	r1, r1, r0
 800906a:	6021      	str	r1, [r4, #0]
 800906c:	6063      	str	r3, [r4, #4]
 800906e:	6054      	str	r4, [r2, #4]
 8009070:	e7ca      	b.n	8009008 <_free_r+0x24>
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	200008b8 	.word	0x200008b8

08009078 <malloc>:
 8009078:	b510      	push	{r4, lr}
 800907a:	4b03      	ldr	r3, [pc, #12]	@ (8009088 <malloc+0x10>)
 800907c:	0001      	movs	r1, r0
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	f000 f826 	bl	80090d0 <_malloc_r>
 8009084:	bd10      	pop	{r4, pc}
 8009086:	46c0      	nop			@ (mov r8, r8)
 8009088:	20000018 	.word	0x20000018

0800908c <sbrk_aligned>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4e0f      	ldr	r6, [pc, #60]	@ (80090cc <sbrk_aligned+0x40>)
 8009090:	000d      	movs	r5, r1
 8009092:	6831      	ldr	r1, [r6, #0]
 8009094:	0004      	movs	r4, r0
 8009096:	2900      	cmp	r1, #0
 8009098:	d102      	bne.n	80090a0 <sbrk_aligned+0x14>
 800909a:	f000 fe6f 	bl	8009d7c <_sbrk_r>
 800909e:	6030      	str	r0, [r6, #0]
 80090a0:	0029      	movs	r1, r5
 80090a2:	0020      	movs	r0, r4
 80090a4:	f000 fe6a 	bl	8009d7c <_sbrk_r>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d103      	bne.n	80090b4 <sbrk_aligned+0x28>
 80090ac:	2501      	movs	r5, #1
 80090ae:	426d      	negs	r5, r5
 80090b0:	0028      	movs	r0, r5
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	2303      	movs	r3, #3
 80090b6:	1cc5      	adds	r5, r0, #3
 80090b8:	439d      	bics	r5, r3
 80090ba:	42a8      	cmp	r0, r5
 80090bc:	d0f8      	beq.n	80090b0 <sbrk_aligned+0x24>
 80090be:	1a29      	subs	r1, r5, r0
 80090c0:	0020      	movs	r0, r4
 80090c2:	f000 fe5b 	bl	8009d7c <_sbrk_r>
 80090c6:	3001      	adds	r0, #1
 80090c8:	d1f2      	bne.n	80090b0 <sbrk_aligned+0x24>
 80090ca:	e7ef      	b.n	80090ac <sbrk_aligned+0x20>
 80090cc:	200008b4 	.word	0x200008b4

080090d0 <_malloc_r>:
 80090d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d2:	2203      	movs	r2, #3
 80090d4:	1ccb      	adds	r3, r1, #3
 80090d6:	4393      	bics	r3, r2
 80090d8:	3308      	adds	r3, #8
 80090da:	0005      	movs	r5, r0
 80090dc:	001f      	movs	r7, r3
 80090de:	2b0c      	cmp	r3, #12
 80090e0:	d234      	bcs.n	800914c <_malloc_r+0x7c>
 80090e2:	270c      	movs	r7, #12
 80090e4:	42b9      	cmp	r1, r7
 80090e6:	d833      	bhi.n	8009150 <_malloc_r+0x80>
 80090e8:	0028      	movs	r0, r5
 80090ea:	f000 f871 	bl	80091d0 <__malloc_lock>
 80090ee:	4e37      	ldr	r6, [pc, #220]	@ (80091cc <_malloc_r+0xfc>)
 80090f0:	6833      	ldr	r3, [r6, #0]
 80090f2:	001c      	movs	r4, r3
 80090f4:	2c00      	cmp	r4, #0
 80090f6:	d12f      	bne.n	8009158 <_malloc_r+0x88>
 80090f8:	0039      	movs	r1, r7
 80090fa:	0028      	movs	r0, r5
 80090fc:	f7ff ffc6 	bl	800908c <sbrk_aligned>
 8009100:	0004      	movs	r4, r0
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d15f      	bne.n	80091c6 <_malloc_r+0xf6>
 8009106:	6834      	ldr	r4, [r6, #0]
 8009108:	9400      	str	r4, [sp, #0]
 800910a:	9b00      	ldr	r3, [sp, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d14a      	bne.n	80091a6 <_malloc_r+0xd6>
 8009110:	2c00      	cmp	r4, #0
 8009112:	d052      	beq.n	80091ba <_malloc_r+0xea>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	0028      	movs	r0, r5
 8009118:	18e3      	adds	r3, r4, r3
 800911a:	9900      	ldr	r1, [sp, #0]
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	f000 fe2d 	bl	8009d7c <_sbrk_r>
 8009122:	9b01      	ldr	r3, [sp, #4]
 8009124:	4283      	cmp	r3, r0
 8009126:	d148      	bne.n	80091ba <_malloc_r+0xea>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	0028      	movs	r0, r5
 800912c:	1aff      	subs	r7, r7, r3
 800912e:	0039      	movs	r1, r7
 8009130:	f7ff ffac 	bl	800908c <sbrk_aligned>
 8009134:	3001      	adds	r0, #1
 8009136:	d040      	beq.n	80091ba <_malloc_r+0xea>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	19db      	adds	r3, r3, r7
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	6833      	ldr	r3, [r6, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	2a00      	cmp	r2, #0
 8009144:	d133      	bne.n	80091ae <_malloc_r+0xde>
 8009146:	9b00      	ldr	r3, [sp, #0]
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	e019      	b.n	8009180 <_malloc_r+0xb0>
 800914c:	2b00      	cmp	r3, #0
 800914e:	dac9      	bge.n	80090e4 <_malloc_r+0x14>
 8009150:	230c      	movs	r3, #12
 8009152:	602b      	str	r3, [r5, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009158:	6821      	ldr	r1, [r4, #0]
 800915a:	1bc9      	subs	r1, r1, r7
 800915c:	d420      	bmi.n	80091a0 <_malloc_r+0xd0>
 800915e:	290b      	cmp	r1, #11
 8009160:	d90a      	bls.n	8009178 <_malloc_r+0xa8>
 8009162:	19e2      	adds	r2, r4, r7
 8009164:	6027      	str	r7, [r4, #0]
 8009166:	42a3      	cmp	r3, r4
 8009168:	d104      	bne.n	8009174 <_malloc_r+0xa4>
 800916a:	6032      	str	r2, [r6, #0]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	6011      	str	r1, [r2, #0]
 8009170:	6053      	str	r3, [r2, #4]
 8009172:	e005      	b.n	8009180 <_malloc_r+0xb0>
 8009174:	605a      	str	r2, [r3, #4]
 8009176:	e7f9      	b.n	800916c <_malloc_r+0x9c>
 8009178:	6862      	ldr	r2, [r4, #4]
 800917a:	42a3      	cmp	r3, r4
 800917c:	d10e      	bne.n	800919c <_malloc_r+0xcc>
 800917e:	6032      	str	r2, [r6, #0]
 8009180:	0028      	movs	r0, r5
 8009182:	f000 f82d 	bl	80091e0 <__malloc_unlock>
 8009186:	0020      	movs	r0, r4
 8009188:	2207      	movs	r2, #7
 800918a:	300b      	adds	r0, #11
 800918c:	1d23      	adds	r3, r4, #4
 800918e:	4390      	bics	r0, r2
 8009190:	1ac2      	subs	r2, r0, r3
 8009192:	4298      	cmp	r0, r3
 8009194:	d0df      	beq.n	8009156 <_malloc_r+0x86>
 8009196:	1a1b      	subs	r3, r3, r0
 8009198:	50a3      	str	r3, [r4, r2]
 800919a:	e7dc      	b.n	8009156 <_malloc_r+0x86>
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	e7ef      	b.n	8009180 <_malloc_r+0xb0>
 80091a0:	0023      	movs	r3, r4
 80091a2:	6864      	ldr	r4, [r4, #4]
 80091a4:	e7a6      	b.n	80090f4 <_malloc_r+0x24>
 80091a6:	9c00      	ldr	r4, [sp, #0]
 80091a8:	6863      	ldr	r3, [r4, #4]
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	e7ad      	b.n	800910a <_malloc_r+0x3a>
 80091ae:	001a      	movs	r2, r3
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	d1fb      	bne.n	80091ae <_malloc_r+0xde>
 80091b6:	2300      	movs	r3, #0
 80091b8:	e7da      	b.n	8009170 <_malloc_r+0xa0>
 80091ba:	230c      	movs	r3, #12
 80091bc:	0028      	movs	r0, r5
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f000 f80e 	bl	80091e0 <__malloc_unlock>
 80091c4:	e7c6      	b.n	8009154 <_malloc_r+0x84>
 80091c6:	6007      	str	r7, [r0, #0]
 80091c8:	e7da      	b.n	8009180 <_malloc_r+0xb0>
 80091ca:	46c0      	nop			@ (mov r8, r8)
 80091cc:	200008b8 	.word	0x200008b8

080091d0 <__malloc_lock>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4802      	ldr	r0, [pc, #8]	@ (80091dc <__malloc_lock+0xc>)
 80091d4:	f7ff f86d 	bl	80082b2 <__retarget_lock_acquire_recursive>
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	200008b0 	.word	0x200008b0

080091e0 <__malloc_unlock>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4802      	ldr	r0, [pc, #8]	@ (80091ec <__malloc_unlock+0xc>)
 80091e4:	f7ff f866 	bl	80082b4 <__retarget_lock_release_recursive>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	46c0      	nop			@ (mov r8, r8)
 80091ec:	200008b0 	.word	0x200008b0

080091f0 <_Balloc>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	69c5      	ldr	r5, [r0, #28]
 80091f4:	0006      	movs	r6, r0
 80091f6:	000c      	movs	r4, r1
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	d10e      	bne.n	800921a <_Balloc+0x2a>
 80091fc:	2010      	movs	r0, #16
 80091fe:	f7ff ff3b 	bl	8009078 <malloc>
 8009202:	1e02      	subs	r2, r0, #0
 8009204:	61f0      	str	r0, [r6, #28]
 8009206:	d104      	bne.n	8009212 <_Balloc+0x22>
 8009208:	216b      	movs	r1, #107	@ 0x6b
 800920a:	4b19      	ldr	r3, [pc, #100]	@ (8009270 <_Balloc+0x80>)
 800920c:	4819      	ldr	r0, [pc, #100]	@ (8009274 <_Balloc+0x84>)
 800920e:	f000 fdc7 	bl	8009da0 <__assert_func>
 8009212:	6045      	str	r5, [r0, #4]
 8009214:	6085      	str	r5, [r0, #8]
 8009216:	6005      	str	r5, [r0, #0]
 8009218:	60c5      	str	r5, [r0, #12]
 800921a:	69f5      	ldr	r5, [r6, #28]
 800921c:	68eb      	ldr	r3, [r5, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <_Balloc+0x5a>
 8009222:	69f3      	ldr	r3, [r6, #28]
 8009224:	00a2      	lsls	r2, r4, #2
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	189b      	adds	r3, r3, r2
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	2800      	cmp	r0, #0
 800922e:	d118      	bne.n	8009262 <_Balloc+0x72>
 8009230:	2101      	movs	r1, #1
 8009232:	000d      	movs	r5, r1
 8009234:	40a5      	lsls	r5, r4
 8009236:	1d6a      	adds	r2, r5, #5
 8009238:	0030      	movs	r0, r6
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	f000 fdce 	bl	8009ddc <_calloc_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	d00c      	beq.n	800925e <_Balloc+0x6e>
 8009244:	6044      	str	r4, [r0, #4]
 8009246:	6085      	str	r5, [r0, #8]
 8009248:	e00d      	b.n	8009266 <_Balloc+0x76>
 800924a:	2221      	movs	r2, #33	@ 0x21
 800924c:	2104      	movs	r1, #4
 800924e:	0030      	movs	r0, r6
 8009250:	f000 fdc4 	bl	8009ddc <_calloc_r>
 8009254:	69f3      	ldr	r3, [r6, #28]
 8009256:	60e8      	str	r0, [r5, #12]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e1      	bne.n	8009222 <_Balloc+0x32>
 800925e:	2000      	movs	r0, #0
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	6802      	ldr	r2, [r0, #0]
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	6103      	str	r3, [r0, #16]
 800926a:	60c3      	str	r3, [r0, #12]
 800926c:	e7f8      	b.n	8009260 <_Balloc+0x70>
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	0800ae81 	.word	0x0800ae81
 8009274:	0800af01 	.word	0x0800af01

08009278 <_Bfree>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	69c6      	ldr	r6, [r0, #28]
 800927c:	0005      	movs	r5, r0
 800927e:	000c      	movs	r4, r1
 8009280:	2e00      	cmp	r6, #0
 8009282:	d10e      	bne.n	80092a2 <_Bfree+0x2a>
 8009284:	2010      	movs	r0, #16
 8009286:	f7ff fef7 	bl	8009078 <malloc>
 800928a:	1e02      	subs	r2, r0, #0
 800928c:	61e8      	str	r0, [r5, #28]
 800928e:	d104      	bne.n	800929a <_Bfree+0x22>
 8009290:	218f      	movs	r1, #143	@ 0x8f
 8009292:	4b09      	ldr	r3, [pc, #36]	@ (80092b8 <_Bfree+0x40>)
 8009294:	4809      	ldr	r0, [pc, #36]	@ (80092bc <_Bfree+0x44>)
 8009296:	f000 fd83 	bl	8009da0 <__assert_func>
 800929a:	6046      	str	r6, [r0, #4]
 800929c:	6086      	str	r6, [r0, #8]
 800929e:	6006      	str	r6, [r0, #0]
 80092a0:	60c6      	str	r6, [r0, #12]
 80092a2:	2c00      	cmp	r4, #0
 80092a4:	d007      	beq.n	80092b6 <_Bfree+0x3e>
 80092a6:	69eb      	ldr	r3, [r5, #28]
 80092a8:	6862      	ldr	r2, [r4, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	189b      	adds	r3, r3, r2
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	6022      	str	r2, [r4, #0]
 80092b4:	601c      	str	r4, [r3, #0]
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	0800ae81 	.word	0x0800ae81
 80092bc:	0800af01 	.word	0x0800af01

080092c0 <__multadd>:
 80092c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092c2:	000f      	movs	r7, r1
 80092c4:	9001      	str	r0, [sp, #4]
 80092c6:	000c      	movs	r4, r1
 80092c8:	001e      	movs	r6, r3
 80092ca:	2000      	movs	r0, #0
 80092cc:	690d      	ldr	r5, [r1, #16]
 80092ce:	3714      	adds	r7, #20
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3001      	adds	r0, #1
 80092d4:	b299      	uxth	r1, r3
 80092d6:	4351      	muls	r1, r2
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	4353      	muls	r3, r2
 80092dc:	1989      	adds	r1, r1, r6
 80092de:	0c0e      	lsrs	r6, r1, #16
 80092e0:	199b      	adds	r3, r3, r6
 80092e2:	0c1e      	lsrs	r6, r3, #16
 80092e4:	b289      	uxth	r1, r1
 80092e6:	041b      	lsls	r3, r3, #16
 80092e8:	185b      	adds	r3, r3, r1
 80092ea:	c708      	stmia	r7!, {r3}
 80092ec:	4285      	cmp	r5, r0
 80092ee:	dcef      	bgt.n	80092d0 <__multadd+0x10>
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	d022      	beq.n	800933a <__multadd+0x7a>
 80092f4:	68a3      	ldr	r3, [r4, #8]
 80092f6:	42ab      	cmp	r3, r5
 80092f8:	dc19      	bgt.n	800932e <__multadd+0x6e>
 80092fa:	6861      	ldr	r1, [r4, #4]
 80092fc:	9801      	ldr	r0, [sp, #4]
 80092fe:	3101      	adds	r1, #1
 8009300:	f7ff ff76 	bl	80091f0 <_Balloc>
 8009304:	1e07      	subs	r7, r0, #0
 8009306:	d105      	bne.n	8009314 <__multadd+0x54>
 8009308:	003a      	movs	r2, r7
 800930a:	21ba      	movs	r1, #186	@ 0xba
 800930c:	4b0c      	ldr	r3, [pc, #48]	@ (8009340 <__multadd+0x80>)
 800930e:	480d      	ldr	r0, [pc, #52]	@ (8009344 <__multadd+0x84>)
 8009310:	f000 fd46 	bl	8009da0 <__assert_func>
 8009314:	0021      	movs	r1, r4
 8009316:	6922      	ldr	r2, [r4, #16]
 8009318:	310c      	adds	r1, #12
 800931a:	3202      	adds	r2, #2
 800931c:	0092      	lsls	r2, r2, #2
 800931e:	300c      	adds	r0, #12
 8009320:	f7fe ffd4 	bl	80082cc <memcpy>
 8009324:	0021      	movs	r1, r4
 8009326:	9801      	ldr	r0, [sp, #4]
 8009328:	f7ff ffa6 	bl	8009278 <_Bfree>
 800932c:	003c      	movs	r4, r7
 800932e:	1d2b      	adds	r3, r5, #4
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	18e3      	adds	r3, r4, r3
 8009334:	3501      	adds	r5, #1
 8009336:	605e      	str	r6, [r3, #4]
 8009338:	6125      	str	r5, [r4, #16]
 800933a:	0020      	movs	r0, r4
 800933c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800933e:	46c0      	nop			@ (mov r8, r8)
 8009340:	0800aef0 	.word	0x0800aef0
 8009344:	0800af01 	.word	0x0800af01

08009348 <__hi0bits>:
 8009348:	2280      	movs	r2, #128	@ 0x80
 800934a:	0003      	movs	r3, r0
 800934c:	0252      	lsls	r2, r2, #9
 800934e:	2000      	movs	r0, #0
 8009350:	4293      	cmp	r3, r2
 8009352:	d201      	bcs.n	8009358 <__hi0bits+0x10>
 8009354:	041b      	lsls	r3, r3, #16
 8009356:	3010      	adds	r0, #16
 8009358:	2280      	movs	r2, #128	@ 0x80
 800935a:	0452      	lsls	r2, r2, #17
 800935c:	4293      	cmp	r3, r2
 800935e:	d201      	bcs.n	8009364 <__hi0bits+0x1c>
 8009360:	3008      	adds	r0, #8
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	2280      	movs	r2, #128	@ 0x80
 8009366:	0552      	lsls	r2, r2, #21
 8009368:	4293      	cmp	r3, r2
 800936a:	d201      	bcs.n	8009370 <__hi0bits+0x28>
 800936c:	3004      	adds	r0, #4
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	2280      	movs	r2, #128	@ 0x80
 8009372:	05d2      	lsls	r2, r2, #23
 8009374:	4293      	cmp	r3, r2
 8009376:	d201      	bcs.n	800937c <__hi0bits+0x34>
 8009378:	3002      	adds	r0, #2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	db03      	blt.n	8009388 <__hi0bits+0x40>
 8009380:	3001      	adds	r0, #1
 8009382:	4213      	tst	r3, r2
 8009384:	d100      	bne.n	8009388 <__hi0bits+0x40>
 8009386:	2020      	movs	r0, #32
 8009388:	4770      	bx	lr

0800938a <__lo0bits>:
 800938a:	6803      	ldr	r3, [r0, #0]
 800938c:	0001      	movs	r1, r0
 800938e:	2207      	movs	r2, #7
 8009390:	0018      	movs	r0, r3
 8009392:	4010      	ands	r0, r2
 8009394:	4213      	tst	r3, r2
 8009396:	d00d      	beq.n	80093b4 <__lo0bits+0x2a>
 8009398:	3a06      	subs	r2, #6
 800939a:	2000      	movs	r0, #0
 800939c:	4213      	tst	r3, r2
 800939e:	d105      	bne.n	80093ac <__lo0bits+0x22>
 80093a0:	3002      	adds	r0, #2
 80093a2:	4203      	tst	r3, r0
 80093a4:	d003      	beq.n	80093ae <__lo0bits+0x24>
 80093a6:	40d3      	lsrs	r3, r2
 80093a8:	0010      	movs	r0, r2
 80093aa:	600b      	str	r3, [r1, #0]
 80093ac:	4770      	bx	lr
 80093ae:	089b      	lsrs	r3, r3, #2
 80093b0:	600b      	str	r3, [r1, #0]
 80093b2:	e7fb      	b.n	80093ac <__lo0bits+0x22>
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	d101      	bne.n	80093be <__lo0bits+0x34>
 80093ba:	2010      	movs	r0, #16
 80093bc:	0c1b      	lsrs	r3, r3, #16
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	d101      	bne.n	80093c8 <__lo0bits+0x3e>
 80093c4:	3008      	adds	r0, #8
 80093c6:	0a1b      	lsrs	r3, r3, #8
 80093c8:	071a      	lsls	r2, r3, #28
 80093ca:	d101      	bne.n	80093d0 <__lo0bits+0x46>
 80093cc:	3004      	adds	r0, #4
 80093ce:	091b      	lsrs	r3, r3, #4
 80093d0:	079a      	lsls	r2, r3, #30
 80093d2:	d101      	bne.n	80093d8 <__lo0bits+0x4e>
 80093d4:	3002      	adds	r0, #2
 80093d6:	089b      	lsrs	r3, r3, #2
 80093d8:	07da      	lsls	r2, r3, #31
 80093da:	d4e9      	bmi.n	80093b0 <__lo0bits+0x26>
 80093dc:	3001      	adds	r0, #1
 80093de:	085b      	lsrs	r3, r3, #1
 80093e0:	d1e6      	bne.n	80093b0 <__lo0bits+0x26>
 80093e2:	2020      	movs	r0, #32
 80093e4:	e7e2      	b.n	80093ac <__lo0bits+0x22>
	...

080093e8 <__i2b>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	000c      	movs	r4, r1
 80093ec:	2101      	movs	r1, #1
 80093ee:	f7ff feff 	bl	80091f0 <_Balloc>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d107      	bne.n	8009406 <__i2b+0x1e>
 80093f6:	2146      	movs	r1, #70	@ 0x46
 80093f8:	4c05      	ldr	r4, [pc, #20]	@ (8009410 <__i2b+0x28>)
 80093fa:	0002      	movs	r2, r0
 80093fc:	4b05      	ldr	r3, [pc, #20]	@ (8009414 <__i2b+0x2c>)
 80093fe:	0020      	movs	r0, r4
 8009400:	31ff      	adds	r1, #255	@ 0xff
 8009402:	f000 fccd 	bl	8009da0 <__assert_func>
 8009406:	2301      	movs	r3, #1
 8009408:	6144      	str	r4, [r0, #20]
 800940a:	6103      	str	r3, [r0, #16]
 800940c:	bd10      	pop	{r4, pc}
 800940e:	46c0      	nop			@ (mov r8, r8)
 8009410:	0800af01 	.word	0x0800af01
 8009414:	0800aef0 	.word	0x0800aef0

08009418 <__multiply>:
 8009418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941a:	0014      	movs	r4, r2
 800941c:	690a      	ldr	r2, [r1, #16]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	000d      	movs	r5, r1
 8009422:	b08b      	sub	sp, #44	@ 0x2c
 8009424:	429a      	cmp	r2, r3
 8009426:	db02      	blt.n	800942e <__multiply+0x16>
 8009428:	0023      	movs	r3, r4
 800942a:	000c      	movs	r4, r1
 800942c:	001d      	movs	r5, r3
 800942e:	6927      	ldr	r7, [r4, #16]
 8009430:	692e      	ldr	r6, [r5, #16]
 8009432:	6861      	ldr	r1, [r4, #4]
 8009434:	19bb      	adds	r3, r7, r6
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	68a3      	ldr	r3, [r4, #8]
 800943a:	19ba      	adds	r2, r7, r6
 800943c:	4293      	cmp	r3, r2
 800943e:	da00      	bge.n	8009442 <__multiply+0x2a>
 8009440:	3101      	adds	r1, #1
 8009442:	f7ff fed5 	bl	80091f0 <_Balloc>
 8009446:	9002      	str	r0, [sp, #8]
 8009448:	2800      	cmp	r0, #0
 800944a:	d106      	bne.n	800945a <__multiply+0x42>
 800944c:	21b1      	movs	r1, #177	@ 0xb1
 800944e:	4b49      	ldr	r3, [pc, #292]	@ (8009574 <__multiply+0x15c>)
 8009450:	4849      	ldr	r0, [pc, #292]	@ (8009578 <__multiply+0x160>)
 8009452:	9a02      	ldr	r2, [sp, #8]
 8009454:	0049      	lsls	r1, r1, #1
 8009456:	f000 fca3 	bl	8009da0 <__assert_func>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	2200      	movs	r2, #0
 800945e:	3314      	adds	r3, #20
 8009460:	469c      	mov	ip, r3
 8009462:	19bb      	adds	r3, r7, r6
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4463      	add	r3, ip
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	4663      	mov	r3, ip
 800946c:	9904      	ldr	r1, [sp, #16]
 800946e:	428b      	cmp	r3, r1
 8009470:	d32a      	bcc.n	80094c8 <__multiply+0xb0>
 8009472:	0023      	movs	r3, r4
 8009474:	00bf      	lsls	r7, r7, #2
 8009476:	3314      	adds	r3, #20
 8009478:	3514      	adds	r5, #20
 800947a:	9308      	str	r3, [sp, #32]
 800947c:	00b6      	lsls	r6, r6, #2
 800947e:	19db      	adds	r3, r3, r7
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	19ab      	adds	r3, r5, r6
 8009484:	9309      	str	r3, [sp, #36]	@ 0x24
 8009486:	2304      	movs	r3, #4
 8009488:	9306      	str	r3, [sp, #24]
 800948a:	0023      	movs	r3, r4
 800948c:	9a05      	ldr	r2, [sp, #20]
 800948e:	3315      	adds	r3, #21
 8009490:	9501      	str	r5, [sp, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d305      	bcc.n	80094a2 <__multiply+0x8a>
 8009496:	1b13      	subs	r3, r2, r4
 8009498:	3b15      	subs	r3, #21
 800949a:	089b      	lsrs	r3, r3, #2
 800949c:	3301      	adds	r3, #1
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	9306      	str	r3, [sp, #24]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d310      	bcc.n	80094cc <__multiply+0xb4>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dd05      	ble.n	80094bc <__multiply+0xa4>
 80094b0:	9b04      	ldr	r3, [sp, #16]
 80094b2:	3b04      	subs	r3, #4
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d056      	beq.n	800956a <__multiply+0x152>
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	9a03      	ldr	r2, [sp, #12]
 80094c0:	0018      	movs	r0, r3
 80094c2:	611a      	str	r2, [r3, #16]
 80094c4:	b00b      	add	sp, #44	@ 0x2c
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	c304      	stmia	r3!, {r2}
 80094ca:	e7cf      	b.n	800946c <__multiply+0x54>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	b280      	uxth	r0, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d01e      	beq.n	8009514 <__multiply+0xfc>
 80094d6:	4667      	mov	r7, ip
 80094d8:	2500      	movs	r5, #0
 80094da:	9e08      	ldr	r6, [sp, #32]
 80094dc:	ce02      	ldmia	r6!, {r1}
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	b28b      	uxth	r3, r1
 80094e4:	4343      	muls	r3, r0
 80094e6:	001a      	movs	r2, r3
 80094e8:	466b      	mov	r3, sp
 80094ea:	0c09      	lsrs	r1, r1, #16
 80094ec:	8b9b      	ldrh	r3, [r3, #28]
 80094ee:	4341      	muls	r1, r0
 80094f0:	18d3      	adds	r3, r2, r3
 80094f2:	9a07      	ldr	r2, [sp, #28]
 80094f4:	195b      	adds	r3, r3, r5
 80094f6:	0c12      	lsrs	r2, r2, #16
 80094f8:	1889      	adds	r1, r1, r2
 80094fa:	0c1a      	lsrs	r2, r3, #16
 80094fc:	188a      	adds	r2, r1, r2
 80094fe:	b29b      	uxth	r3, r3
 8009500:	0c15      	lsrs	r5, r2, #16
 8009502:	0412      	lsls	r2, r2, #16
 8009504:	431a      	orrs	r2, r3
 8009506:	9b05      	ldr	r3, [sp, #20]
 8009508:	c704      	stmia	r7!, {r2}
 800950a:	42b3      	cmp	r3, r6
 800950c:	d8e6      	bhi.n	80094dc <__multiply+0xc4>
 800950e:	4663      	mov	r3, ip
 8009510:	9a06      	ldr	r2, [sp, #24]
 8009512:	509d      	str	r5, [r3, r2]
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	0c00      	lsrs	r0, r0, #16
 800951a:	d020      	beq.n	800955e <__multiply+0x146>
 800951c:	4663      	mov	r3, ip
 800951e:	0025      	movs	r5, r4
 8009520:	4661      	mov	r1, ip
 8009522:	2700      	movs	r7, #0
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3514      	adds	r5, #20
 8009528:	682a      	ldr	r2, [r5, #0]
 800952a:	680e      	ldr	r6, [r1, #0]
 800952c:	b292      	uxth	r2, r2
 800952e:	4342      	muls	r2, r0
 8009530:	0c36      	lsrs	r6, r6, #16
 8009532:	1992      	adds	r2, r2, r6
 8009534:	19d2      	adds	r2, r2, r7
 8009536:	0416      	lsls	r6, r2, #16
 8009538:	b29b      	uxth	r3, r3
 800953a:	431e      	orrs	r6, r3
 800953c:	600e      	str	r6, [r1, #0]
 800953e:	cd40      	ldmia	r5!, {r6}
 8009540:	684b      	ldr	r3, [r1, #4]
 8009542:	0c36      	lsrs	r6, r6, #16
 8009544:	4346      	muls	r6, r0
 8009546:	b29b      	uxth	r3, r3
 8009548:	0c12      	lsrs	r2, r2, #16
 800954a:	18f3      	adds	r3, r6, r3
 800954c:	189b      	adds	r3, r3, r2
 800954e:	9a05      	ldr	r2, [sp, #20]
 8009550:	0c1f      	lsrs	r7, r3, #16
 8009552:	3104      	adds	r1, #4
 8009554:	42aa      	cmp	r2, r5
 8009556:	d8e7      	bhi.n	8009528 <__multiply+0x110>
 8009558:	4662      	mov	r2, ip
 800955a:	9906      	ldr	r1, [sp, #24]
 800955c:	5053      	str	r3, [r2, r1]
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	3304      	adds	r3, #4
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	2304      	movs	r3, #4
 8009566:	449c      	add	ip, r3
 8009568:	e79b      	b.n	80094a2 <__multiply+0x8a>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	3b01      	subs	r3, #1
 800956e:	9303      	str	r3, [sp, #12]
 8009570:	e79b      	b.n	80094aa <__multiply+0x92>
 8009572:	46c0      	nop			@ (mov r8, r8)
 8009574:	0800aef0 	.word	0x0800aef0
 8009578:	0800af01 	.word	0x0800af01

0800957c <__pow5mult>:
 800957c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800957e:	2303      	movs	r3, #3
 8009580:	0015      	movs	r5, r2
 8009582:	0007      	movs	r7, r0
 8009584:	000e      	movs	r6, r1
 8009586:	401a      	ands	r2, r3
 8009588:	421d      	tst	r5, r3
 800958a:	d008      	beq.n	800959e <__pow5mult+0x22>
 800958c:	4925      	ldr	r1, [pc, #148]	@ (8009624 <__pow5mult+0xa8>)
 800958e:	3a01      	subs	r2, #1
 8009590:	0092      	lsls	r2, r2, #2
 8009592:	5852      	ldr	r2, [r2, r1]
 8009594:	2300      	movs	r3, #0
 8009596:	0031      	movs	r1, r6
 8009598:	f7ff fe92 	bl	80092c0 <__multadd>
 800959c:	0006      	movs	r6, r0
 800959e:	10ad      	asrs	r5, r5, #2
 80095a0:	d03d      	beq.n	800961e <__pow5mult+0xa2>
 80095a2:	69fc      	ldr	r4, [r7, #28]
 80095a4:	2c00      	cmp	r4, #0
 80095a6:	d10f      	bne.n	80095c8 <__pow5mult+0x4c>
 80095a8:	2010      	movs	r0, #16
 80095aa:	f7ff fd65 	bl	8009078 <malloc>
 80095ae:	1e02      	subs	r2, r0, #0
 80095b0:	61f8      	str	r0, [r7, #28]
 80095b2:	d105      	bne.n	80095c0 <__pow5mult+0x44>
 80095b4:	21b4      	movs	r1, #180	@ 0xb4
 80095b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009628 <__pow5mult+0xac>)
 80095b8:	481c      	ldr	r0, [pc, #112]	@ (800962c <__pow5mult+0xb0>)
 80095ba:	31ff      	adds	r1, #255	@ 0xff
 80095bc:	f000 fbf0 	bl	8009da0 <__assert_func>
 80095c0:	6044      	str	r4, [r0, #4]
 80095c2:	6084      	str	r4, [r0, #8]
 80095c4:	6004      	str	r4, [r0, #0]
 80095c6:	60c4      	str	r4, [r0, #12]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	689c      	ldr	r4, [r3, #8]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	2c00      	cmp	r4, #0
 80095d0:	d108      	bne.n	80095e4 <__pow5mult+0x68>
 80095d2:	0038      	movs	r0, r7
 80095d4:	4916      	ldr	r1, [pc, #88]	@ (8009630 <__pow5mult+0xb4>)
 80095d6:	f7ff ff07 	bl	80093e8 <__i2b>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	0004      	movs	r4, r0
 80095de:	6098      	str	r0, [r3, #8]
 80095e0:	2300      	movs	r3, #0
 80095e2:	6003      	str	r3, [r0, #0]
 80095e4:	2301      	movs	r3, #1
 80095e6:	421d      	tst	r5, r3
 80095e8:	d00a      	beq.n	8009600 <__pow5mult+0x84>
 80095ea:	0031      	movs	r1, r6
 80095ec:	0022      	movs	r2, r4
 80095ee:	0038      	movs	r0, r7
 80095f0:	f7ff ff12 	bl	8009418 <__multiply>
 80095f4:	0031      	movs	r1, r6
 80095f6:	9001      	str	r0, [sp, #4]
 80095f8:	0038      	movs	r0, r7
 80095fa:	f7ff fe3d 	bl	8009278 <_Bfree>
 80095fe:	9e01      	ldr	r6, [sp, #4]
 8009600:	106d      	asrs	r5, r5, #1
 8009602:	d00c      	beq.n	800961e <__pow5mult+0xa2>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	2800      	cmp	r0, #0
 8009608:	d107      	bne.n	800961a <__pow5mult+0x9e>
 800960a:	0022      	movs	r2, r4
 800960c:	0021      	movs	r1, r4
 800960e:	0038      	movs	r0, r7
 8009610:	f7ff ff02 	bl	8009418 <__multiply>
 8009614:	2300      	movs	r3, #0
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	0004      	movs	r4, r0
 800961c:	e7e2      	b.n	80095e4 <__pow5mult+0x68>
 800961e:	0030      	movs	r0, r6
 8009620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	0800af5c 	.word	0x0800af5c
 8009628:	0800ae81 	.word	0x0800ae81
 800962c:	0800af01 	.word	0x0800af01
 8009630:	00000271 	.word	0x00000271

08009634 <__lshift>:
 8009634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009636:	000c      	movs	r4, r1
 8009638:	0016      	movs	r6, r2
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	1157      	asrs	r7, r2, #5
 800963e:	b085      	sub	sp, #20
 8009640:	18fb      	adds	r3, r7, r3
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	3301      	adds	r3, #1
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	6849      	ldr	r1, [r1, #4]
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	9002      	str	r0, [sp, #8]
 800964e:	9a00      	ldr	r2, [sp, #0]
 8009650:	4293      	cmp	r3, r2
 8009652:	db10      	blt.n	8009676 <__lshift+0x42>
 8009654:	9802      	ldr	r0, [sp, #8]
 8009656:	f7ff fdcb 	bl	80091f0 <_Balloc>
 800965a:	2300      	movs	r3, #0
 800965c:	0001      	movs	r1, r0
 800965e:	0005      	movs	r5, r0
 8009660:	001a      	movs	r2, r3
 8009662:	3114      	adds	r1, #20
 8009664:	4298      	cmp	r0, r3
 8009666:	d10c      	bne.n	8009682 <__lshift+0x4e>
 8009668:	21ef      	movs	r1, #239	@ 0xef
 800966a:	002a      	movs	r2, r5
 800966c:	4b25      	ldr	r3, [pc, #148]	@ (8009704 <__lshift+0xd0>)
 800966e:	4826      	ldr	r0, [pc, #152]	@ (8009708 <__lshift+0xd4>)
 8009670:	0049      	lsls	r1, r1, #1
 8009672:	f000 fb95 	bl	8009da0 <__assert_func>
 8009676:	3101      	adds	r1, #1
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	e7e8      	b.n	800964e <__lshift+0x1a>
 800967c:	0098      	lsls	r0, r3, #2
 800967e:	500a      	str	r2, [r1, r0]
 8009680:	3301      	adds	r3, #1
 8009682:	42bb      	cmp	r3, r7
 8009684:	dbfa      	blt.n	800967c <__lshift+0x48>
 8009686:	43fb      	mvns	r3, r7
 8009688:	17db      	asrs	r3, r3, #31
 800968a:	401f      	ands	r7, r3
 800968c:	00bf      	lsls	r7, r7, #2
 800968e:	0023      	movs	r3, r4
 8009690:	201f      	movs	r0, #31
 8009692:	19c9      	adds	r1, r1, r7
 8009694:	0037      	movs	r7, r6
 8009696:	6922      	ldr	r2, [r4, #16]
 8009698:	3314      	adds	r3, #20
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	189a      	adds	r2, r3, r2
 800969e:	4007      	ands	r7, r0
 80096a0:	4206      	tst	r6, r0
 80096a2:	d029      	beq.n	80096f8 <__lshift+0xc4>
 80096a4:	3001      	adds	r0, #1
 80096a6:	1bc0      	subs	r0, r0, r7
 80096a8:	9003      	str	r0, [sp, #12]
 80096aa:	468c      	mov	ip, r1
 80096ac:	2000      	movs	r0, #0
 80096ae:	681e      	ldr	r6, [r3, #0]
 80096b0:	40be      	lsls	r6, r7
 80096b2:	4306      	orrs	r6, r0
 80096b4:	4660      	mov	r0, ip
 80096b6:	c040      	stmia	r0!, {r6}
 80096b8:	4684      	mov	ip, r0
 80096ba:	9e03      	ldr	r6, [sp, #12]
 80096bc:	cb01      	ldmia	r3!, {r0}
 80096be:	40f0      	lsrs	r0, r6
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d8f4      	bhi.n	80096ae <__lshift+0x7a>
 80096c4:	0026      	movs	r6, r4
 80096c6:	3615      	adds	r6, #21
 80096c8:	2304      	movs	r3, #4
 80096ca:	42b2      	cmp	r2, r6
 80096cc:	d304      	bcc.n	80096d8 <__lshift+0xa4>
 80096ce:	1b13      	subs	r3, r2, r4
 80096d0:	3b15      	subs	r3, #21
 80096d2:	089b      	lsrs	r3, r3, #2
 80096d4:	3301      	adds	r3, #1
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	50c8      	str	r0, [r1, r3]
 80096da:	2800      	cmp	r0, #0
 80096dc:	d002      	beq.n	80096e4 <__lshift+0xb0>
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	3302      	adds	r3, #2
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	9b00      	ldr	r3, [sp, #0]
 80096e6:	9802      	ldr	r0, [sp, #8]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	0021      	movs	r1, r4
 80096ec:	612b      	str	r3, [r5, #16]
 80096ee:	f7ff fdc3 	bl	8009278 <_Bfree>
 80096f2:	0028      	movs	r0, r5
 80096f4:	b005      	add	sp, #20
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f8:	cb01      	ldmia	r3!, {r0}
 80096fa:	c101      	stmia	r1!, {r0}
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d8fb      	bhi.n	80096f8 <__lshift+0xc4>
 8009700:	e7f0      	b.n	80096e4 <__lshift+0xb0>
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	0800aef0 	.word	0x0800aef0
 8009708:	0800af01 	.word	0x0800af01

0800970c <__mcmp>:
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	690b      	ldr	r3, [r1, #16]
 8009710:	6904      	ldr	r4, [r0, #16]
 8009712:	0002      	movs	r2, r0
 8009714:	1ae0      	subs	r0, r4, r3
 8009716:	429c      	cmp	r4, r3
 8009718:	d10f      	bne.n	800973a <__mcmp+0x2e>
 800971a:	3214      	adds	r2, #20
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	3114      	adds	r1, #20
 8009720:	0014      	movs	r4, r2
 8009722:	18c9      	adds	r1, r1, r3
 8009724:	18d2      	adds	r2, r2, r3
 8009726:	3a04      	subs	r2, #4
 8009728:	3904      	subs	r1, #4
 800972a:	6815      	ldr	r5, [r2, #0]
 800972c:	680b      	ldr	r3, [r1, #0]
 800972e:	429d      	cmp	r5, r3
 8009730:	d004      	beq.n	800973c <__mcmp+0x30>
 8009732:	2001      	movs	r0, #1
 8009734:	429d      	cmp	r5, r3
 8009736:	d200      	bcs.n	800973a <__mcmp+0x2e>
 8009738:	3802      	subs	r0, #2
 800973a:	bd30      	pop	{r4, r5, pc}
 800973c:	4294      	cmp	r4, r2
 800973e:	d3f2      	bcc.n	8009726 <__mcmp+0x1a>
 8009740:	e7fb      	b.n	800973a <__mcmp+0x2e>
	...

08009744 <__mdiff>:
 8009744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009746:	000c      	movs	r4, r1
 8009748:	b087      	sub	sp, #28
 800974a:	9000      	str	r0, [sp, #0]
 800974c:	0011      	movs	r1, r2
 800974e:	0020      	movs	r0, r4
 8009750:	0017      	movs	r7, r2
 8009752:	f7ff ffdb 	bl	800970c <__mcmp>
 8009756:	1e05      	subs	r5, r0, #0
 8009758:	d110      	bne.n	800977c <__mdiff+0x38>
 800975a:	0001      	movs	r1, r0
 800975c:	9800      	ldr	r0, [sp, #0]
 800975e:	f7ff fd47 	bl	80091f0 <_Balloc>
 8009762:	1e02      	subs	r2, r0, #0
 8009764:	d104      	bne.n	8009770 <__mdiff+0x2c>
 8009766:	4b40      	ldr	r3, [pc, #256]	@ (8009868 <__mdiff+0x124>)
 8009768:	4840      	ldr	r0, [pc, #256]	@ (800986c <__mdiff+0x128>)
 800976a:	4941      	ldr	r1, [pc, #260]	@ (8009870 <__mdiff+0x12c>)
 800976c:	f000 fb18 	bl	8009da0 <__assert_func>
 8009770:	2301      	movs	r3, #1
 8009772:	6145      	str	r5, [r0, #20]
 8009774:	6103      	str	r3, [r0, #16]
 8009776:	0010      	movs	r0, r2
 8009778:	b007      	add	sp, #28
 800977a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977c:	2600      	movs	r6, #0
 800977e:	42b0      	cmp	r0, r6
 8009780:	da03      	bge.n	800978a <__mdiff+0x46>
 8009782:	0023      	movs	r3, r4
 8009784:	003c      	movs	r4, r7
 8009786:	001f      	movs	r7, r3
 8009788:	3601      	adds	r6, #1
 800978a:	6861      	ldr	r1, [r4, #4]
 800978c:	9800      	ldr	r0, [sp, #0]
 800978e:	f7ff fd2f 	bl	80091f0 <_Balloc>
 8009792:	1e02      	subs	r2, r0, #0
 8009794:	d103      	bne.n	800979e <__mdiff+0x5a>
 8009796:	4b34      	ldr	r3, [pc, #208]	@ (8009868 <__mdiff+0x124>)
 8009798:	4834      	ldr	r0, [pc, #208]	@ (800986c <__mdiff+0x128>)
 800979a:	4936      	ldr	r1, [pc, #216]	@ (8009874 <__mdiff+0x130>)
 800979c:	e7e6      	b.n	800976c <__mdiff+0x28>
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	3414      	adds	r4, #20
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	18e3      	adds	r3, r4, r3
 80097a8:	0021      	movs	r1, r4
 80097aa:	9401      	str	r4, [sp, #4]
 80097ac:	003c      	movs	r4, r7
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3414      	adds	r4, #20
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	18e3      	adds	r3, r4, r3
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	0003      	movs	r3, r0
 80097bc:	60c6      	str	r6, [r0, #12]
 80097be:	468c      	mov	ip, r1
 80097c0:	2000      	movs	r0, #0
 80097c2:	3314      	adds	r3, #20
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	9305      	str	r3, [sp, #20]
 80097c8:	4663      	mov	r3, ip
 80097ca:	cb20      	ldmia	r3!, {r5}
 80097cc:	b2a9      	uxth	r1, r5
 80097ce:	000e      	movs	r6, r1
 80097d0:	469c      	mov	ip, r3
 80097d2:	cc08      	ldmia	r4!, {r3}
 80097d4:	0c2d      	lsrs	r5, r5, #16
 80097d6:	b299      	uxth	r1, r3
 80097d8:	1a71      	subs	r1, r6, r1
 80097da:	1809      	adds	r1, r1, r0
 80097dc:	0c1b      	lsrs	r3, r3, #16
 80097de:	1408      	asrs	r0, r1, #16
 80097e0:	1aeb      	subs	r3, r5, r3
 80097e2:	181b      	adds	r3, r3, r0
 80097e4:	1418      	asrs	r0, r3, #16
 80097e6:	b289      	uxth	r1, r1
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	4319      	orrs	r1, r3
 80097ec:	9b05      	ldr	r3, [sp, #20]
 80097ee:	c302      	stmia	r3!, {r1}
 80097f0:	9305      	str	r3, [sp, #20]
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	d8e7      	bhi.n	80097c8 <__mdiff+0x84>
 80097f8:	0039      	movs	r1, r7
 80097fa:	9c03      	ldr	r4, [sp, #12]
 80097fc:	3115      	adds	r1, #21
 80097fe:	2304      	movs	r3, #4
 8009800:	428c      	cmp	r4, r1
 8009802:	d304      	bcc.n	800980e <__mdiff+0xca>
 8009804:	1be3      	subs	r3, r4, r7
 8009806:	3b15      	subs	r3, #21
 8009808:	089b      	lsrs	r3, r3, #2
 800980a:	3301      	adds	r3, #1
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	9901      	ldr	r1, [sp, #4]
 8009810:	18cd      	adds	r5, r1, r3
 8009812:	9904      	ldr	r1, [sp, #16]
 8009814:	002e      	movs	r6, r5
 8009816:	18cb      	adds	r3, r1, r3
 8009818:	001f      	movs	r7, r3
 800981a:	9902      	ldr	r1, [sp, #8]
 800981c:	428e      	cmp	r6, r1
 800981e:	d311      	bcc.n	8009844 <__mdiff+0x100>
 8009820:	9c02      	ldr	r4, [sp, #8]
 8009822:	1ee9      	subs	r1, r5, #3
 8009824:	2000      	movs	r0, #0
 8009826:	428c      	cmp	r4, r1
 8009828:	d304      	bcc.n	8009834 <__mdiff+0xf0>
 800982a:	0021      	movs	r1, r4
 800982c:	3103      	adds	r1, #3
 800982e:	1b49      	subs	r1, r1, r5
 8009830:	0889      	lsrs	r1, r1, #2
 8009832:	0088      	lsls	r0, r1, #2
 8009834:	181b      	adds	r3, r3, r0
 8009836:	3b04      	subs	r3, #4
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	2900      	cmp	r1, #0
 800983c:	d010      	beq.n	8009860 <__mdiff+0x11c>
 800983e:	9b00      	ldr	r3, [sp, #0]
 8009840:	6113      	str	r3, [r2, #16]
 8009842:	e798      	b.n	8009776 <__mdiff+0x32>
 8009844:	4684      	mov	ip, r0
 8009846:	ce02      	ldmia	r6!, {r1}
 8009848:	b288      	uxth	r0, r1
 800984a:	4460      	add	r0, ip
 800984c:	1400      	asrs	r0, r0, #16
 800984e:	0c0c      	lsrs	r4, r1, #16
 8009850:	1904      	adds	r4, r0, r4
 8009852:	4461      	add	r1, ip
 8009854:	1420      	asrs	r0, r4, #16
 8009856:	b289      	uxth	r1, r1
 8009858:	0424      	lsls	r4, r4, #16
 800985a:	4321      	orrs	r1, r4
 800985c:	c702      	stmia	r7!, {r1}
 800985e:	e7dc      	b.n	800981a <__mdiff+0xd6>
 8009860:	9900      	ldr	r1, [sp, #0]
 8009862:	3901      	subs	r1, #1
 8009864:	9100      	str	r1, [sp, #0]
 8009866:	e7e6      	b.n	8009836 <__mdiff+0xf2>
 8009868:	0800aef0 	.word	0x0800aef0
 800986c:	0800af01 	.word	0x0800af01
 8009870:	00000237 	.word	0x00000237
 8009874:	00000245 	.word	0x00000245

08009878 <__d2b>:
 8009878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987a:	2101      	movs	r1, #1
 800987c:	0016      	movs	r6, r2
 800987e:	001f      	movs	r7, r3
 8009880:	f7ff fcb6 	bl	80091f0 <_Balloc>
 8009884:	1e04      	subs	r4, r0, #0
 8009886:	d105      	bne.n	8009894 <__d2b+0x1c>
 8009888:	0022      	movs	r2, r4
 800988a:	4b25      	ldr	r3, [pc, #148]	@ (8009920 <__d2b+0xa8>)
 800988c:	4825      	ldr	r0, [pc, #148]	@ (8009924 <__d2b+0xac>)
 800988e:	4926      	ldr	r1, [pc, #152]	@ (8009928 <__d2b+0xb0>)
 8009890:	f000 fa86 	bl	8009da0 <__assert_func>
 8009894:	033b      	lsls	r3, r7, #12
 8009896:	007d      	lsls	r5, r7, #1
 8009898:	0b1b      	lsrs	r3, r3, #12
 800989a:	0d6d      	lsrs	r5, r5, #21
 800989c:	d002      	beq.n	80098a4 <__d2b+0x2c>
 800989e:	2280      	movs	r2, #128	@ 0x80
 80098a0:	0352      	lsls	r2, r2, #13
 80098a2:	4313      	orrs	r3, r2
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	d025      	beq.n	80098f6 <__d2b+0x7e>
 80098aa:	4668      	mov	r0, sp
 80098ac:	9600      	str	r6, [sp, #0]
 80098ae:	f7ff fd6c 	bl	800938a <__lo0bits>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	9900      	ldr	r1, [sp, #0]
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d01b      	beq.n	80098f2 <__d2b+0x7a>
 80098ba:	2220      	movs	r2, #32
 80098bc:	001e      	movs	r6, r3
 80098be:	1a12      	subs	r2, r2, r0
 80098c0:	4096      	lsls	r6, r2
 80098c2:	0032      	movs	r2, r6
 80098c4:	40c3      	lsrs	r3, r0
 80098c6:	430a      	orrs	r2, r1
 80098c8:	6162      	str	r2, [r4, #20]
 80098ca:	9301      	str	r3, [sp, #4]
 80098cc:	9e01      	ldr	r6, [sp, #4]
 80098ce:	61a6      	str	r6, [r4, #24]
 80098d0:	1e73      	subs	r3, r6, #1
 80098d2:	419e      	sbcs	r6, r3
 80098d4:	3601      	adds	r6, #1
 80098d6:	6126      	str	r6, [r4, #16]
 80098d8:	2d00      	cmp	r5, #0
 80098da:	d014      	beq.n	8009906 <__d2b+0x8e>
 80098dc:	2635      	movs	r6, #53	@ 0x35
 80098de:	4b13      	ldr	r3, [pc, #76]	@ (800992c <__d2b+0xb4>)
 80098e0:	18ed      	adds	r5, r5, r3
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	182d      	adds	r5, r5, r0
 80098e6:	601d      	str	r5, [r3, #0]
 80098e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ea:	1a36      	subs	r6, r6, r0
 80098ec:	601e      	str	r6, [r3, #0]
 80098ee:	0020      	movs	r0, r4
 80098f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098f2:	6161      	str	r1, [r4, #20]
 80098f4:	e7ea      	b.n	80098cc <__d2b+0x54>
 80098f6:	a801      	add	r0, sp, #4
 80098f8:	f7ff fd47 	bl	800938a <__lo0bits>
 80098fc:	9b01      	ldr	r3, [sp, #4]
 80098fe:	2601      	movs	r6, #1
 8009900:	6163      	str	r3, [r4, #20]
 8009902:	3020      	adds	r0, #32
 8009904:	e7e7      	b.n	80098d6 <__d2b+0x5e>
 8009906:	4b0a      	ldr	r3, [pc, #40]	@ (8009930 <__d2b+0xb8>)
 8009908:	18c0      	adds	r0, r0, r3
 800990a:	9b08      	ldr	r3, [sp, #32]
 800990c:	6018      	str	r0, [r3, #0]
 800990e:	4b09      	ldr	r3, [pc, #36]	@ (8009934 <__d2b+0xbc>)
 8009910:	18f3      	adds	r3, r6, r3
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	18e3      	adds	r3, r4, r3
 8009916:	6958      	ldr	r0, [r3, #20]
 8009918:	f7ff fd16 	bl	8009348 <__hi0bits>
 800991c:	0176      	lsls	r6, r6, #5
 800991e:	e7e3      	b.n	80098e8 <__d2b+0x70>
 8009920:	0800aef0 	.word	0x0800aef0
 8009924:	0800af01 	.word	0x0800af01
 8009928:	0000030f 	.word	0x0000030f
 800992c:	fffffbcd 	.word	0xfffffbcd
 8009930:	fffffbce 	.word	0xfffffbce
 8009934:	3fffffff 	.word	0x3fffffff

08009938 <__ssputs_r>:
 8009938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800993a:	688e      	ldr	r6, [r1, #8]
 800993c:	b085      	sub	sp, #20
 800993e:	001f      	movs	r7, r3
 8009940:	000c      	movs	r4, r1
 8009942:	680b      	ldr	r3, [r1, #0]
 8009944:	9002      	str	r0, [sp, #8]
 8009946:	9203      	str	r2, [sp, #12]
 8009948:	42be      	cmp	r6, r7
 800994a:	d830      	bhi.n	80099ae <__ssputs_r+0x76>
 800994c:	210c      	movs	r1, #12
 800994e:	5e62      	ldrsh	r2, [r4, r1]
 8009950:	2190      	movs	r1, #144	@ 0x90
 8009952:	00c9      	lsls	r1, r1, #3
 8009954:	420a      	tst	r2, r1
 8009956:	d028      	beq.n	80099aa <__ssputs_r+0x72>
 8009958:	2003      	movs	r0, #3
 800995a:	6921      	ldr	r1, [r4, #16]
 800995c:	1a5b      	subs	r3, r3, r1
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	6963      	ldr	r3, [r4, #20]
 8009962:	4343      	muls	r3, r0
 8009964:	9801      	ldr	r0, [sp, #4]
 8009966:	0fdd      	lsrs	r5, r3, #31
 8009968:	18ed      	adds	r5, r5, r3
 800996a:	1c7b      	adds	r3, r7, #1
 800996c:	181b      	adds	r3, r3, r0
 800996e:	106d      	asrs	r5, r5, #1
 8009970:	42ab      	cmp	r3, r5
 8009972:	d900      	bls.n	8009976 <__ssputs_r+0x3e>
 8009974:	001d      	movs	r5, r3
 8009976:	0552      	lsls	r2, r2, #21
 8009978:	d528      	bpl.n	80099cc <__ssputs_r+0x94>
 800997a:	0029      	movs	r1, r5
 800997c:	9802      	ldr	r0, [sp, #8]
 800997e:	f7ff fba7 	bl	80090d0 <_malloc_r>
 8009982:	1e06      	subs	r6, r0, #0
 8009984:	d02c      	beq.n	80099e0 <__ssputs_r+0xa8>
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	6921      	ldr	r1, [r4, #16]
 800998a:	f7fe fc9f 	bl	80082cc <memcpy>
 800998e:	89a2      	ldrh	r2, [r4, #12]
 8009990:	4b18      	ldr	r3, [pc, #96]	@ (80099f4 <__ssputs_r+0xbc>)
 8009992:	401a      	ands	r2, r3
 8009994:	2380      	movs	r3, #128	@ 0x80
 8009996:	4313      	orrs	r3, r2
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	6126      	str	r6, [r4, #16]
 800999e:	18f6      	adds	r6, r6, r3
 80099a0:	6026      	str	r6, [r4, #0]
 80099a2:	003e      	movs	r6, r7
 80099a4:	6165      	str	r5, [r4, #20]
 80099a6:	1aed      	subs	r5, r5, r3
 80099a8:	60a5      	str	r5, [r4, #8]
 80099aa:	42be      	cmp	r6, r7
 80099ac:	d900      	bls.n	80099b0 <__ssputs_r+0x78>
 80099ae:	003e      	movs	r6, r7
 80099b0:	0032      	movs	r2, r6
 80099b2:	9903      	ldr	r1, [sp, #12]
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	f000 f9ce 	bl	8009d56 <memmove>
 80099ba:	2000      	movs	r0, #0
 80099bc:	68a3      	ldr	r3, [r4, #8]
 80099be:	1b9b      	subs	r3, r3, r6
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	199b      	adds	r3, r3, r6
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	b005      	add	sp, #20
 80099ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099cc:	002a      	movs	r2, r5
 80099ce:	9802      	ldr	r0, [sp, #8]
 80099d0:	f000 fa43 	bl	8009e5a <_realloc_r>
 80099d4:	1e06      	subs	r6, r0, #0
 80099d6:	d1e0      	bne.n	800999a <__ssputs_r+0x62>
 80099d8:	6921      	ldr	r1, [r4, #16]
 80099da:	9802      	ldr	r0, [sp, #8]
 80099dc:	f7ff fb02 	bl	8008fe4 <_free_r>
 80099e0:	230c      	movs	r3, #12
 80099e2:	2001      	movs	r0, #1
 80099e4:	9a02      	ldr	r2, [sp, #8]
 80099e6:	4240      	negs	r0, r0
 80099e8:	6013      	str	r3, [r2, #0]
 80099ea:	89a2      	ldrh	r2, [r4, #12]
 80099ec:	3334      	adds	r3, #52	@ 0x34
 80099ee:	4313      	orrs	r3, r2
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	e7e9      	b.n	80099c8 <__ssputs_r+0x90>
 80099f4:	fffffb7f 	.word	0xfffffb7f

080099f8 <_svfiprintf_r>:
 80099f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fa:	b0a1      	sub	sp, #132	@ 0x84
 80099fc:	9003      	str	r0, [sp, #12]
 80099fe:	001d      	movs	r5, r3
 8009a00:	898b      	ldrh	r3, [r1, #12]
 8009a02:	000f      	movs	r7, r1
 8009a04:	0016      	movs	r6, r2
 8009a06:	061b      	lsls	r3, r3, #24
 8009a08:	d511      	bpl.n	8009a2e <_svfiprintf_r+0x36>
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10e      	bne.n	8009a2e <_svfiprintf_r+0x36>
 8009a10:	2140      	movs	r1, #64	@ 0x40
 8009a12:	f7ff fb5d 	bl	80090d0 <_malloc_r>
 8009a16:	6038      	str	r0, [r7, #0]
 8009a18:	6138      	str	r0, [r7, #16]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d105      	bne.n	8009a2a <_svfiprintf_r+0x32>
 8009a1e:	230c      	movs	r3, #12
 8009a20:	9a03      	ldr	r2, [sp, #12]
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	2001      	movs	r0, #1
 8009a26:	4240      	negs	r0, r0
 8009a28:	e0cf      	b.n	8009bca <_svfiprintf_r+0x1d2>
 8009a2a:	2340      	movs	r3, #64	@ 0x40
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	ac08      	add	r4, sp, #32
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	3320      	adds	r3, #32
 8009a36:	7663      	strb	r3, [r4, #25]
 8009a38:	3310      	adds	r3, #16
 8009a3a:	76a3      	strb	r3, [r4, #26]
 8009a3c:	9507      	str	r5, [sp, #28]
 8009a3e:	0035      	movs	r5, r6
 8009a40:	782b      	ldrb	r3, [r5, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <_svfiprintf_r+0x52>
 8009a46:	2b25      	cmp	r3, #37	@ 0x25
 8009a48:	d148      	bne.n	8009adc <_svfiprintf_r+0xe4>
 8009a4a:	1bab      	subs	r3, r5, r6
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	42b5      	cmp	r5, r6
 8009a50:	d00b      	beq.n	8009a6a <_svfiprintf_r+0x72>
 8009a52:	0032      	movs	r2, r6
 8009a54:	0039      	movs	r1, r7
 8009a56:	9803      	ldr	r0, [sp, #12]
 8009a58:	f7ff ff6e 	bl	8009938 <__ssputs_r>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d100      	bne.n	8009a62 <_svfiprintf_r+0x6a>
 8009a60:	e0ae      	b.n	8009bc0 <_svfiprintf_r+0x1c8>
 8009a62:	6963      	ldr	r3, [r4, #20]
 8009a64:	9a05      	ldr	r2, [sp, #20]
 8009a66:	189b      	adds	r3, r3, r2
 8009a68:	6163      	str	r3, [r4, #20]
 8009a6a:	782b      	ldrb	r3, [r5, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d100      	bne.n	8009a72 <_svfiprintf_r+0x7a>
 8009a70:	e0a6      	b.n	8009bc0 <_svfiprintf_r+0x1c8>
 8009a72:	2201      	movs	r2, #1
 8009a74:	2300      	movs	r3, #0
 8009a76:	4252      	negs	r2, r2
 8009a78:	6062      	str	r2, [r4, #4]
 8009a7a:	a904      	add	r1, sp, #16
 8009a7c:	3254      	adds	r2, #84	@ 0x54
 8009a7e:	1852      	adds	r2, r2, r1
 8009a80:	1c6e      	adds	r6, r5, #1
 8009a82:	6023      	str	r3, [r4, #0]
 8009a84:	60e3      	str	r3, [r4, #12]
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	7013      	strb	r3, [r2, #0]
 8009a8a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009a8c:	4b54      	ldr	r3, [pc, #336]	@ (8009be0 <_svfiprintf_r+0x1e8>)
 8009a8e:	2205      	movs	r2, #5
 8009a90:	0018      	movs	r0, r3
 8009a92:	7831      	ldrb	r1, [r6, #0]
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f7fe fc0e 	bl	80082b6 <memchr>
 8009a9a:	1c75      	adds	r5, r6, #1
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d11f      	bne.n	8009ae0 <_svfiprintf_r+0xe8>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	06d3      	lsls	r3, r2, #27
 8009aa4:	d504      	bpl.n	8009ab0 <_svfiprintf_r+0xb8>
 8009aa6:	2353      	movs	r3, #83	@ 0x53
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	185b      	adds	r3, r3, r1
 8009aac:	2120      	movs	r1, #32
 8009aae:	7019      	strb	r1, [r3, #0]
 8009ab0:	0713      	lsls	r3, r2, #28
 8009ab2:	d504      	bpl.n	8009abe <_svfiprintf_r+0xc6>
 8009ab4:	2353      	movs	r3, #83	@ 0x53
 8009ab6:	a904      	add	r1, sp, #16
 8009ab8:	185b      	adds	r3, r3, r1
 8009aba:	212b      	movs	r1, #43	@ 0x2b
 8009abc:	7019      	strb	r1, [r3, #0]
 8009abe:	7833      	ldrb	r3, [r6, #0]
 8009ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac2:	d016      	beq.n	8009af2 <_svfiprintf_r+0xfa>
 8009ac4:	0035      	movs	r5, r6
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	200a      	movs	r0, #10
 8009aca:	68e3      	ldr	r3, [r4, #12]
 8009acc:	782a      	ldrb	r2, [r5, #0]
 8009ace:	1c6e      	adds	r6, r5, #1
 8009ad0:	3a30      	subs	r2, #48	@ 0x30
 8009ad2:	2a09      	cmp	r2, #9
 8009ad4:	d950      	bls.n	8009b78 <_svfiprintf_r+0x180>
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	d111      	bne.n	8009afe <_svfiprintf_r+0x106>
 8009ada:	e017      	b.n	8009b0c <_svfiprintf_r+0x114>
 8009adc:	3501      	adds	r5, #1
 8009ade:	e7af      	b.n	8009a40 <_svfiprintf_r+0x48>
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	1ac0      	subs	r0, r0, r3
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4083      	lsls	r3, r0
 8009aea:	4313      	orrs	r3, r2
 8009aec:	002e      	movs	r6, r5
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	e7cc      	b.n	8009a8c <_svfiprintf_r+0x94>
 8009af2:	9b07      	ldr	r3, [sp, #28]
 8009af4:	1d19      	adds	r1, r3, #4
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	9107      	str	r1, [sp, #28]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	db01      	blt.n	8009b02 <_svfiprintf_r+0x10a>
 8009afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b00:	e004      	b.n	8009b0c <_svfiprintf_r+0x114>
 8009b02:	425b      	negs	r3, r3
 8009b04:	60e3      	str	r3, [r4, #12]
 8009b06:	2302      	movs	r3, #2
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	782b      	ldrb	r3, [r5, #0]
 8009b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b10:	d10c      	bne.n	8009b2c <_svfiprintf_r+0x134>
 8009b12:	786b      	ldrb	r3, [r5, #1]
 8009b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b16:	d134      	bne.n	8009b82 <_svfiprintf_r+0x18a>
 8009b18:	9b07      	ldr	r3, [sp, #28]
 8009b1a:	3502      	adds	r5, #2
 8009b1c:	1d1a      	adds	r2, r3, #4
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	9207      	str	r2, [sp, #28]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	da01      	bge.n	8009b2a <_svfiprintf_r+0x132>
 8009b26:	2301      	movs	r3, #1
 8009b28:	425b      	negs	r3, r3
 8009b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2c:	4e2d      	ldr	r6, [pc, #180]	@ (8009be4 <_svfiprintf_r+0x1ec>)
 8009b2e:	2203      	movs	r2, #3
 8009b30:	0030      	movs	r0, r6
 8009b32:	7829      	ldrb	r1, [r5, #0]
 8009b34:	f7fe fbbf 	bl	80082b6 <memchr>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d006      	beq.n	8009b4a <_svfiprintf_r+0x152>
 8009b3c:	2340      	movs	r3, #64	@ 0x40
 8009b3e:	1b80      	subs	r0, r0, r6
 8009b40:	4083      	lsls	r3, r0
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	3501      	adds	r5, #1
 8009b46:	4313      	orrs	r3, r2
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	7829      	ldrb	r1, [r5, #0]
 8009b4c:	2206      	movs	r2, #6
 8009b4e:	4826      	ldr	r0, [pc, #152]	@ (8009be8 <_svfiprintf_r+0x1f0>)
 8009b50:	1c6e      	adds	r6, r5, #1
 8009b52:	7621      	strb	r1, [r4, #24]
 8009b54:	f7fe fbaf 	bl	80082b6 <memchr>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d038      	beq.n	8009bce <_svfiprintf_r+0x1d6>
 8009b5c:	4b23      	ldr	r3, [pc, #140]	@ (8009bec <_svfiprintf_r+0x1f4>)
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d122      	bne.n	8009ba8 <_svfiprintf_r+0x1b0>
 8009b62:	2207      	movs	r2, #7
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	3307      	adds	r3, #7
 8009b68:	4393      	bics	r3, r2
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	9307      	str	r3, [sp, #28]
 8009b6e:	6963      	ldr	r3, [r4, #20]
 8009b70:	9a04      	ldr	r2, [sp, #16]
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	6163      	str	r3, [r4, #20]
 8009b76:	e762      	b.n	8009a3e <_svfiprintf_r+0x46>
 8009b78:	4343      	muls	r3, r0
 8009b7a:	0035      	movs	r5, r6
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	e7a4      	b.n	8009acc <_svfiprintf_r+0xd4>
 8009b82:	2300      	movs	r3, #0
 8009b84:	200a      	movs	r0, #10
 8009b86:	0019      	movs	r1, r3
 8009b88:	3501      	adds	r5, #1
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	782a      	ldrb	r2, [r5, #0]
 8009b8e:	1c6e      	adds	r6, r5, #1
 8009b90:	3a30      	subs	r2, #48	@ 0x30
 8009b92:	2a09      	cmp	r2, #9
 8009b94:	d903      	bls.n	8009b9e <_svfiprintf_r+0x1a6>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0c8      	beq.n	8009b2c <_svfiprintf_r+0x134>
 8009b9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b9c:	e7c6      	b.n	8009b2c <_svfiprintf_r+0x134>
 8009b9e:	4341      	muls	r1, r0
 8009ba0:	0035      	movs	r5, r6
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	1889      	adds	r1, r1, r2
 8009ba6:	e7f1      	b.n	8009b8c <_svfiprintf_r+0x194>
 8009ba8:	aa07      	add	r2, sp, #28
 8009baa:	9200      	str	r2, [sp, #0]
 8009bac:	0021      	movs	r1, r4
 8009bae:	003a      	movs	r2, r7
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf0 <_svfiprintf_r+0x1f8>)
 8009bb2:	9803      	ldr	r0, [sp, #12]
 8009bb4:	f7fd fdd8 	bl	8007768 <_printf_float>
 8009bb8:	9004      	str	r0, [sp, #16]
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	d1d6      	bne.n	8009b6e <_svfiprintf_r+0x176>
 8009bc0:	89bb      	ldrh	r3, [r7, #12]
 8009bc2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009bc4:	065b      	lsls	r3, r3, #25
 8009bc6:	d500      	bpl.n	8009bca <_svfiprintf_r+0x1d2>
 8009bc8:	e72c      	b.n	8009a24 <_svfiprintf_r+0x2c>
 8009bca:	b021      	add	sp, #132	@ 0x84
 8009bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bce:	aa07      	add	r2, sp, #28
 8009bd0:	9200      	str	r2, [sp, #0]
 8009bd2:	0021      	movs	r1, r4
 8009bd4:	003a      	movs	r2, r7
 8009bd6:	4b06      	ldr	r3, [pc, #24]	@ (8009bf0 <_svfiprintf_r+0x1f8>)
 8009bd8:	9803      	ldr	r0, [sp, #12]
 8009bda:	f7fe f873 	bl	8007cc4 <_printf_i>
 8009bde:	e7eb      	b.n	8009bb8 <_svfiprintf_r+0x1c0>
 8009be0:	0800b058 	.word	0x0800b058
 8009be4:	0800b05e 	.word	0x0800b05e
 8009be8:	0800b062 	.word	0x0800b062
 8009bec:	08007769 	.word	0x08007769
 8009bf0:	08009939 	.word	0x08009939

08009bf4 <__sflush_r>:
 8009bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf6:	220c      	movs	r2, #12
 8009bf8:	5e8b      	ldrsh	r3, [r1, r2]
 8009bfa:	0005      	movs	r5, r0
 8009bfc:	000c      	movs	r4, r1
 8009bfe:	071a      	lsls	r2, r3, #28
 8009c00:	d456      	bmi.n	8009cb0 <__sflush_r+0xbc>
 8009c02:	684a      	ldr	r2, [r1, #4]
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	dc02      	bgt.n	8009c0e <__sflush_r+0x1a>
 8009c08:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	dd4e      	ble.n	8009cac <__sflush_r+0xb8>
 8009c0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	d04b      	beq.n	8009cac <__sflush_r+0xb8>
 8009c14:	2200      	movs	r2, #0
 8009c16:	2080      	movs	r0, #128	@ 0x80
 8009c18:	682e      	ldr	r6, [r5, #0]
 8009c1a:	602a      	str	r2, [r5, #0]
 8009c1c:	001a      	movs	r2, r3
 8009c1e:	0140      	lsls	r0, r0, #5
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	4002      	ands	r2, r0
 8009c24:	4203      	tst	r3, r0
 8009c26:	d033      	beq.n	8009c90 <__sflush_r+0x9c>
 8009c28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	075b      	lsls	r3, r3, #29
 8009c2e:	d506      	bpl.n	8009c3e <__sflush_r+0x4a>
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	1ad2      	subs	r2, r2, r3
 8009c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <__sflush_r+0x4a>
 8009c3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c3c:	1ad2      	subs	r2, r2, r3
 8009c3e:	2300      	movs	r3, #0
 8009c40:	0028      	movs	r0, r5
 8009c42:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	47b8      	blx	r7
 8009c48:	89a2      	ldrh	r2, [r4, #12]
 8009c4a:	1c43      	adds	r3, r0, #1
 8009c4c:	d106      	bne.n	8009c5c <__sflush_r+0x68>
 8009c4e:	6829      	ldr	r1, [r5, #0]
 8009c50:	291d      	cmp	r1, #29
 8009c52:	d846      	bhi.n	8009ce2 <__sflush_r+0xee>
 8009c54:	4b29      	ldr	r3, [pc, #164]	@ (8009cfc <__sflush_r+0x108>)
 8009c56:	410b      	asrs	r3, r1
 8009c58:	07db      	lsls	r3, r3, #31
 8009c5a:	d442      	bmi.n	8009ce2 <__sflush_r+0xee>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6063      	str	r3, [r4, #4]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	04d2      	lsls	r2, r2, #19
 8009c66:	d505      	bpl.n	8009c74 <__sflush_r+0x80>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <__sflush_r+0x7e>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d100      	bne.n	8009c74 <__sflush_r+0x80>
 8009c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c76:	602e      	str	r6, [r5, #0]
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	d017      	beq.n	8009cac <__sflush_r+0xb8>
 8009c7c:	0023      	movs	r3, r4
 8009c7e:	3344      	adds	r3, #68	@ 0x44
 8009c80:	4299      	cmp	r1, r3
 8009c82:	d002      	beq.n	8009c8a <__sflush_r+0x96>
 8009c84:	0028      	movs	r0, r5
 8009c86:	f7ff f9ad 	bl	8008fe4 <_free_r>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c8e:	e00d      	b.n	8009cac <__sflush_r+0xb8>
 8009c90:	2301      	movs	r3, #1
 8009c92:	0028      	movs	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	0002      	movs	r2, r0
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d1c6      	bne.n	8009c2a <__sflush_r+0x36>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0c3      	beq.n	8009c2a <__sflush_r+0x36>
 8009ca2:	2b1d      	cmp	r3, #29
 8009ca4:	d001      	beq.n	8009caa <__sflush_r+0xb6>
 8009ca6:	2b16      	cmp	r3, #22
 8009ca8:	d11a      	bne.n	8009ce0 <__sflush_r+0xec>
 8009caa:	602e      	str	r6, [r5, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e01e      	b.n	8009cee <__sflush_r+0xfa>
 8009cb0:	690e      	ldr	r6, [r1, #16]
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d0fa      	beq.n	8009cac <__sflush_r+0xb8>
 8009cb6:	680f      	ldr	r7, [r1, #0]
 8009cb8:	600e      	str	r6, [r1, #0]
 8009cba:	1bba      	subs	r2, r7, r6
 8009cbc:	9201      	str	r2, [sp, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	079b      	lsls	r3, r3, #30
 8009cc2:	d100      	bne.n	8009cc6 <__sflush_r+0xd2>
 8009cc4:	694a      	ldr	r2, [r1, #20]
 8009cc6:	60a2      	str	r2, [r4, #8]
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	ddee      	ble.n	8009cac <__sflush_r+0xb8>
 8009cce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009cd0:	0032      	movs	r2, r6
 8009cd2:	001f      	movs	r7, r3
 8009cd4:	0028      	movs	r0, r5
 8009cd6:	9b01      	ldr	r3, [sp, #4]
 8009cd8:	6a21      	ldr	r1, [r4, #32]
 8009cda:	47b8      	blx	r7
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	dc07      	bgt.n	8009cf0 <__sflush_r+0xfc>
 8009ce0:	89a2      	ldrh	r2, [r4, #12]
 8009ce2:	2340      	movs	r3, #64	@ 0x40
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	b21b      	sxth	r3, r3
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	4240      	negs	r0, r0
 8009cee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	1836      	adds	r6, r6, r0
 8009cf4:	1a1b      	subs	r3, r3, r0
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	e7e6      	b.n	8009cc8 <__sflush_r+0xd4>
 8009cfa:	46c0      	nop			@ (mov r8, r8)
 8009cfc:	dfbffffe 	.word	0xdfbffffe

08009d00 <_fflush_r>:
 8009d00:	690b      	ldr	r3, [r1, #16]
 8009d02:	b570      	push	{r4, r5, r6, lr}
 8009d04:	0005      	movs	r5, r0
 8009d06:	000c      	movs	r4, r1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <_fflush_r+0x12>
 8009d0c:	2500      	movs	r5, #0
 8009d0e:	0028      	movs	r0, r5
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d004      	beq.n	8009d20 <_fflush_r+0x20>
 8009d16:	6a03      	ldr	r3, [r0, #32]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <_fflush_r+0x20>
 8009d1c:	f7fe f970 	bl	8008000 <__sinit>
 8009d20:	220c      	movs	r2, #12
 8009d22:	5ea3      	ldrsh	r3, [r4, r2]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f1      	beq.n	8009d0c <_fflush_r+0xc>
 8009d28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d2a:	07d2      	lsls	r2, r2, #31
 8009d2c:	d404      	bmi.n	8009d38 <_fflush_r+0x38>
 8009d2e:	059b      	lsls	r3, r3, #22
 8009d30:	d402      	bmi.n	8009d38 <_fflush_r+0x38>
 8009d32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d34:	f7fe fabd 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8009d38:	0028      	movs	r0, r5
 8009d3a:	0021      	movs	r1, r4
 8009d3c:	f7ff ff5a 	bl	8009bf4 <__sflush_r>
 8009d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d42:	0005      	movs	r5, r0
 8009d44:	07db      	lsls	r3, r3, #31
 8009d46:	d4e2      	bmi.n	8009d0e <_fflush_r+0xe>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	059b      	lsls	r3, r3, #22
 8009d4c:	d4df      	bmi.n	8009d0e <_fflush_r+0xe>
 8009d4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d50:	f7fe fab0 	bl	80082b4 <__retarget_lock_release_recursive>
 8009d54:	e7db      	b.n	8009d0e <_fflush_r+0xe>

08009d56 <memmove>:
 8009d56:	b510      	push	{r4, lr}
 8009d58:	4288      	cmp	r0, r1
 8009d5a:	d806      	bhi.n	8009d6a <memmove+0x14>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d008      	beq.n	8009d74 <memmove+0x1e>
 8009d62:	5ccc      	ldrb	r4, [r1, r3]
 8009d64:	54c4      	strb	r4, [r0, r3]
 8009d66:	3301      	adds	r3, #1
 8009d68:	e7f9      	b.n	8009d5e <memmove+0x8>
 8009d6a:	188b      	adds	r3, r1, r2
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	d2f5      	bcs.n	8009d5c <memmove+0x6>
 8009d70:	3a01      	subs	r2, #1
 8009d72:	d200      	bcs.n	8009d76 <memmove+0x20>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	5c8b      	ldrb	r3, [r1, r2]
 8009d78:	5483      	strb	r3, [r0, r2]
 8009d7a:	e7f9      	b.n	8009d70 <memmove+0x1a>

08009d7c <_sbrk_r>:
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	b570      	push	{r4, r5, r6, lr}
 8009d80:	4d06      	ldr	r5, [pc, #24]	@ (8009d9c <_sbrk_r+0x20>)
 8009d82:	0004      	movs	r4, r0
 8009d84:	0008      	movs	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f9 fcfe 	bl	8003788 <_sbrk>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d103      	bne.n	8009d98 <_sbrk_r+0x1c>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d000      	beq.n	8009d98 <_sbrk_r+0x1c>
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
 8009d9a:	46c0      	nop			@ (mov r8, r8)
 8009d9c:	200008ac 	.word	0x200008ac

08009da0 <__assert_func>:
 8009da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009da2:	0014      	movs	r4, r2
 8009da4:	001a      	movs	r2, r3
 8009da6:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <__assert_func+0x2c>)
 8009da8:	0005      	movs	r5, r0
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	000e      	movs	r6, r1
 8009dae:	68d8      	ldr	r0, [r3, #12]
 8009db0:	4b07      	ldr	r3, [pc, #28]	@ (8009dd0 <__assert_func+0x30>)
 8009db2:	2c00      	cmp	r4, #0
 8009db4:	d101      	bne.n	8009dba <__assert_func+0x1a>
 8009db6:	4b07      	ldr	r3, [pc, #28]	@ (8009dd4 <__assert_func+0x34>)
 8009db8:	001c      	movs	r4, r3
 8009dba:	4907      	ldr	r1, [pc, #28]	@ (8009dd8 <__assert_func+0x38>)
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	9402      	str	r4, [sp, #8]
 8009dc0:	002b      	movs	r3, r5
 8009dc2:	9600      	str	r6, [sp, #0]
 8009dc4:	f000 f886 	bl	8009ed4 <fiprintf>
 8009dc8:	f000 f894 	bl	8009ef4 <abort>
 8009dcc:	20000018 	.word	0x20000018
 8009dd0:	0800b073 	.word	0x0800b073
 8009dd4:	0800b0ae 	.word	0x0800b0ae
 8009dd8:	0800b080 	.word	0x0800b080

08009ddc <_calloc_r>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	0c0b      	lsrs	r3, r1, #16
 8009de0:	0c15      	lsrs	r5, r2, #16
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11e      	bne.n	8009e24 <_calloc_r+0x48>
 8009de6:	2d00      	cmp	r5, #0
 8009de8:	d10c      	bne.n	8009e04 <_calloc_r+0x28>
 8009dea:	b289      	uxth	r1, r1
 8009dec:	b294      	uxth	r4, r2
 8009dee:	434c      	muls	r4, r1
 8009df0:	0021      	movs	r1, r4
 8009df2:	f7ff f96d 	bl	80090d0 <_malloc_r>
 8009df6:	1e05      	subs	r5, r0, #0
 8009df8:	d01a      	beq.n	8009e30 <_calloc_r+0x54>
 8009dfa:	0022      	movs	r2, r4
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	f7fe f9d3 	bl	80081a8 <memset>
 8009e02:	e016      	b.n	8009e32 <_calloc_r+0x56>
 8009e04:	1c2b      	adds	r3, r5, #0
 8009e06:	1c0c      	adds	r4, r1, #0
 8009e08:	b289      	uxth	r1, r1
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	434a      	muls	r2, r1
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	b2a1      	uxth	r1, r4
 8009e12:	4359      	muls	r1, r3
 8009e14:	0c14      	lsrs	r4, r2, #16
 8009e16:	190c      	adds	r4, r1, r4
 8009e18:	0c23      	lsrs	r3, r4, #16
 8009e1a:	d107      	bne.n	8009e2c <_calloc_r+0x50>
 8009e1c:	0424      	lsls	r4, r4, #16
 8009e1e:	b292      	uxth	r2, r2
 8009e20:	4314      	orrs	r4, r2
 8009e22:	e7e5      	b.n	8009df0 <_calloc_r+0x14>
 8009e24:	2d00      	cmp	r5, #0
 8009e26:	d101      	bne.n	8009e2c <_calloc_r+0x50>
 8009e28:	1c14      	adds	r4, r2, #0
 8009e2a:	e7ed      	b.n	8009e08 <_calloc_r+0x2c>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	6003      	str	r3, [r0, #0]
 8009e30:	2500      	movs	r5, #0
 8009e32:	0028      	movs	r0, r5
 8009e34:	bd70      	pop	{r4, r5, r6, pc}

08009e36 <__ascii_mbtowc>:
 8009e36:	b082      	sub	sp, #8
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d100      	bne.n	8009e3e <__ascii_mbtowc+0x8>
 8009e3c:	a901      	add	r1, sp, #4
 8009e3e:	1e10      	subs	r0, r2, #0
 8009e40:	d006      	beq.n	8009e50 <__ascii_mbtowc+0x1a>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <__ascii_mbtowc+0x1e>
 8009e46:	7813      	ldrb	r3, [r2, #0]
 8009e48:	600b      	str	r3, [r1, #0]
 8009e4a:	7810      	ldrb	r0, [r2, #0]
 8009e4c:	1e43      	subs	r3, r0, #1
 8009e4e:	4198      	sbcs	r0, r3
 8009e50:	b002      	add	sp, #8
 8009e52:	4770      	bx	lr
 8009e54:	2002      	movs	r0, #2
 8009e56:	4240      	negs	r0, r0
 8009e58:	e7fa      	b.n	8009e50 <__ascii_mbtowc+0x1a>

08009e5a <_realloc_r>:
 8009e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5c:	0006      	movs	r6, r0
 8009e5e:	000c      	movs	r4, r1
 8009e60:	0015      	movs	r5, r2
 8009e62:	2900      	cmp	r1, #0
 8009e64:	d105      	bne.n	8009e72 <_realloc_r+0x18>
 8009e66:	0011      	movs	r1, r2
 8009e68:	f7ff f932 	bl	80090d0 <_malloc_r>
 8009e6c:	0004      	movs	r4, r0
 8009e6e:	0020      	movs	r0, r4
 8009e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	d103      	bne.n	8009e7e <_realloc_r+0x24>
 8009e76:	f7ff f8b5 	bl	8008fe4 <_free_r>
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	e7f7      	b.n	8009e6e <_realloc_r+0x14>
 8009e7e:	f000 f840 	bl	8009f02 <_malloc_usable_size_r>
 8009e82:	0007      	movs	r7, r0
 8009e84:	4285      	cmp	r5, r0
 8009e86:	d802      	bhi.n	8009e8e <_realloc_r+0x34>
 8009e88:	0843      	lsrs	r3, r0, #1
 8009e8a:	42ab      	cmp	r3, r5
 8009e8c:	d3ef      	bcc.n	8009e6e <_realloc_r+0x14>
 8009e8e:	0029      	movs	r1, r5
 8009e90:	0030      	movs	r0, r6
 8009e92:	f7ff f91d 	bl	80090d0 <_malloc_r>
 8009e96:	9001      	str	r0, [sp, #4]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0ee      	beq.n	8009e7a <_realloc_r+0x20>
 8009e9c:	002a      	movs	r2, r5
 8009e9e:	42bd      	cmp	r5, r7
 8009ea0:	d900      	bls.n	8009ea4 <_realloc_r+0x4a>
 8009ea2:	003a      	movs	r2, r7
 8009ea4:	0021      	movs	r1, r4
 8009ea6:	9801      	ldr	r0, [sp, #4]
 8009ea8:	f7fe fa10 	bl	80082cc <memcpy>
 8009eac:	0021      	movs	r1, r4
 8009eae:	0030      	movs	r0, r6
 8009eb0:	f7ff f898 	bl	8008fe4 <_free_r>
 8009eb4:	9c01      	ldr	r4, [sp, #4]
 8009eb6:	e7da      	b.n	8009e6e <_realloc_r+0x14>

08009eb8 <__ascii_wctomb>:
 8009eb8:	0003      	movs	r3, r0
 8009eba:	1e08      	subs	r0, r1, #0
 8009ebc:	d005      	beq.n	8009eca <__ascii_wctomb+0x12>
 8009ebe:	2aff      	cmp	r2, #255	@ 0xff
 8009ec0:	d904      	bls.n	8009ecc <__ascii_wctomb+0x14>
 8009ec2:	228a      	movs	r2, #138	@ 0x8a
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	4240      	negs	r0, r0
 8009eca:	4770      	bx	lr
 8009ecc:	2001      	movs	r0, #1
 8009ece:	700a      	strb	r2, [r1, #0]
 8009ed0:	e7fb      	b.n	8009eca <__ascii_wctomb+0x12>
	...

08009ed4 <fiprintf>:
 8009ed4:	b40e      	push	{r1, r2, r3}
 8009ed6:	b517      	push	{r0, r1, r2, r4, lr}
 8009ed8:	4c05      	ldr	r4, [pc, #20]	@ (8009ef0 <fiprintf+0x1c>)
 8009eda:	ab05      	add	r3, sp, #20
 8009edc:	cb04      	ldmia	r3!, {r2}
 8009ede:	0001      	movs	r1, r0
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	f000 f83c 	bl	8009f60 <_vfiprintf_r>
 8009ee8:	bc1e      	pop	{r1, r2, r3, r4}
 8009eea:	bc08      	pop	{r3}
 8009eec:	b003      	add	sp, #12
 8009eee:	4718      	bx	r3
 8009ef0:	20000018 	.word	0x20000018

08009ef4 <abort>:
 8009ef4:	2006      	movs	r0, #6
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	f000 fa18 	bl	800a32c <raise>
 8009efc:	2001      	movs	r0, #1
 8009efe:	f7f9 fbd0 	bl	80036a2 <_exit>

08009f02 <_malloc_usable_size_r>:
 8009f02:	1f0b      	subs	r3, r1, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1f18      	subs	r0, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	da01      	bge.n	8009f10 <_malloc_usable_size_r+0xe>
 8009f0c:	580b      	ldr	r3, [r1, r0]
 8009f0e:	18c0      	adds	r0, r0, r3
 8009f10:	4770      	bx	lr

08009f12 <__sfputc_r>:
 8009f12:	6893      	ldr	r3, [r2, #8]
 8009f14:	b510      	push	{r4, lr}
 8009f16:	3b01      	subs	r3, #1
 8009f18:	6093      	str	r3, [r2, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da04      	bge.n	8009f28 <__sfputc_r+0x16>
 8009f1e:	6994      	ldr	r4, [r2, #24]
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	db07      	blt.n	8009f34 <__sfputc_r+0x22>
 8009f24:	290a      	cmp	r1, #10
 8009f26:	d005      	beq.n	8009f34 <__sfputc_r+0x22>
 8009f28:	6813      	ldr	r3, [r2, #0]
 8009f2a:	1c58      	adds	r0, r3, #1
 8009f2c:	6010      	str	r0, [r2, #0]
 8009f2e:	7019      	strb	r1, [r3, #0]
 8009f30:	0008      	movs	r0, r1
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	f000 f930 	bl	800a198 <__swbuf_r>
 8009f38:	0001      	movs	r1, r0
 8009f3a:	e7f9      	b.n	8009f30 <__sfputc_r+0x1e>

08009f3c <__sfputs_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	0006      	movs	r6, r0
 8009f40:	000f      	movs	r7, r1
 8009f42:	0014      	movs	r4, r2
 8009f44:	18d5      	adds	r5, r2, r3
 8009f46:	42ac      	cmp	r4, r5
 8009f48:	d101      	bne.n	8009f4e <__sfputs_r+0x12>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e007      	b.n	8009f5e <__sfputs_r+0x22>
 8009f4e:	7821      	ldrb	r1, [r4, #0]
 8009f50:	003a      	movs	r2, r7
 8009f52:	0030      	movs	r0, r6
 8009f54:	f7ff ffdd 	bl	8009f12 <__sfputc_r>
 8009f58:	3401      	adds	r4, #1
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d1f3      	bne.n	8009f46 <__sfputs_r+0xa>
 8009f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f60 <_vfiprintf_r>:
 8009f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f62:	b0a1      	sub	sp, #132	@ 0x84
 8009f64:	000f      	movs	r7, r1
 8009f66:	0015      	movs	r5, r2
 8009f68:	001e      	movs	r6, r3
 8009f6a:	9003      	str	r0, [sp, #12]
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d004      	beq.n	8009f7a <_vfiprintf_r+0x1a>
 8009f70:	6a03      	ldr	r3, [r0, #32]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <_vfiprintf_r+0x1a>
 8009f76:	f7fe f843 	bl	8008000 <__sinit>
 8009f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f7c:	07db      	lsls	r3, r3, #31
 8009f7e:	d405      	bmi.n	8009f8c <_vfiprintf_r+0x2c>
 8009f80:	89bb      	ldrh	r3, [r7, #12]
 8009f82:	059b      	lsls	r3, r3, #22
 8009f84:	d402      	bmi.n	8009f8c <_vfiprintf_r+0x2c>
 8009f86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009f88:	f7fe f993 	bl	80082b2 <__retarget_lock_acquire_recursive>
 8009f8c:	89bb      	ldrh	r3, [r7, #12]
 8009f8e:	071b      	lsls	r3, r3, #28
 8009f90:	d502      	bpl.n	8009f98 <_vfiprintf_r+0x38>
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d113      	bne.n	8009fc0 <_vfiprintf_r+0x60>
 8009f98:	0039      	movs	r1, r7
 8009f9a:	9803      	ldr	r0, [sp, #12]
 8009f9c:	f000 f93e 	bl	800a21c <__swsetup_r>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d00d      	beq.n	8009fc0 <_vfiprintf_r+0x60>
 8009fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fa6:	07db      	lsls	r3, r3, #31
 8009fa8:	d503      	bpl.n	8009fb2 <_vfiprintf_r+0x52>
 8009faa:	2001      	movs	r0, #1
 8009fac:	4240      	negs	r0, r0
 8009fae:	b021      	add	sp, #132	@ 0x84
 8009fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb2:	89bb      	ldrh	r3, [r7, #12]
 8009fb4:	059b      	lsls	r3, r3, #22
 8009fb6:	d4f8      	bmi.n	8009faa <_vfiprintf_r+0x4a>
 8009fb8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009fba:	f7fe f97b 	bl	80082b4 <__retarget_lock_release_recursive>
 8009fbe:	e7f4      	b.n	8009faa <_vfiprintf_r+0x4a>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	ac08      	add	r4, sp, #32
 8009fc4:	6163      	str	r3, [r4, #20]
 8009fc6:	3320      	adds	r3, #32
 8009fc8:	7663      	strb	r3, [r4, #25]
 8009fca:	3310      	adds	r3, #16
 8009fcc:	76a3      	strb	r3, [r4, #26]
 8009fce:	9607      	str	r6, [sp, #28]
 8009fd0:	002e      	movs	r6, r5
 8009fd2:	7833      	ldrb	r3, [r6, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <_vfiprintf_r+0x7c>
 8009fd8:	2b25      	cmp	r3, #37	@ 0x25
 8009fda:	d148      	bne.n	800a06e <_vfiprintf_r+0x10e>
 8009fdc:	1b73      	subs	r3, r6, r5
 8009fde:	9305      	str	r3, [sp, #20]
 8009fe0:	42ae      	cmp	r6, r5
 8009fe2:	d00b      	beq.n	8009ffc <_vfiprintf_r+0x9c>
 8009fe4:	002a      	movs	r2, r5
 8009fe6:	0039      	movs	r1, r7
 8009fe8:	9803      	ldr	r0, [sp, #12]
 8009fea:	f7ff ffa7 	bl	8009f3c <__sfputs_r>
 8009fee:	3001      	adds	r0, #1
 8009ff0:	d100      	bne.n	8009ff4 <_vfiprintf_r+0x94>
 8009ff2:	e0ae      	b.n	800a152 <_vfiprintf_r+0x1f2>
 8009ff4:	6963      	ldr	r3, [r4, #20]
 8009ff6:	9a05      	ldr	r2, [sp, #20]
 8009ff8:	189b      	adds	r3, r3, r2
 8009ffa:	6163      	str	r3, [r4, #20]
 8009ffc:	7833      	ldrb	r3, [r6, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d100      	bne.n	800a004 <_vfiprintf_r+0xa4>
 800a002:	e0a6      	b.n	800a152 <_vfiprintf_r+0x1f2>
 800a004:	2201      	movs	r2, #1
 800a006:	2300      	movs	r3, #0
 800a008:	4252      	negs	r2, r2
 800a00a:	6062      	str	r2, [r4, #4]
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	3254      	adds	r2, #84	@ 0x54
 800a010:	1852      	adds	r2, r2, r1
 800a012:	1c75      	adds	r5, r6, #1
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	60e3      	str	r3, [r4, #12]
 800a018:	60a3      	str	r3, [r4, #8]
 800a01a:	7013      	strb	r3, [r2, #0]
 800a01c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a01e:	4b59      	ldr	r3, [pc, #356]	@ (800a184 <_vfiprintf_r+0x224>)
 800a020:	2205      	movs	r2, #5
 800a022:	0018      	movs	r0, r3
 800a024:	7829      	ldrb	r1, [r5, #0]
 800a026:	9305      	str	r3, [sp, #20]
 800a028:	f7fe f945 	bl	80082b6 <memchr>
 800a02c:	1c6e      	adds	r6, r5, #1
 800a02e:	2800      	cmp	r0, #0
 800a030:	d11f      	bne.n	800a072 <_vfiprintf_r+0x112>
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	06d3      	lsls	r3, r2, #27
 800a036:	d504      	bpl.n	800a042 <_vfiprintf_r+0xe2>
 800a038:	2353      	movs	r3, #83	@ 0x53
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	185b      	adds	r3, r3, r1
 800a03e:	2120      	movs	r1, #32
 800a040:	7019      	strb	r1, [r3, #0]
 800a042:	0713      	lsls	r3, r2, #28
 800a044:	d504      	bpl.n	800a050 <_vfiprintf_r+0xf0>
 800a046:	2353      	movs	r3, #83	@ 0x53
 800a048:	a904      	add	r1, sp, #16
 800a04a:	185b      	adds	r3, r3, r1
 800a04c:	212b      	movs	r1, #43	@ 0x2b
 800a04e:	7019      	strb	r1, [r3, #0]
 800a050:	782b      	ldrb	r3, [r5, #0]
 800a052:	2b2a      	cmp	r3, #42	@ 0x2a
 800a054:	d016      	beq.n	800a084 <_vfiprintf_r+0x124>
 800a056:	002e      	movs	r6, r5
 800a058:	2100      	movs	r1, #0
 800a05a:	200a      	movs	r0, #10
 800a05c:	68e3      	ldr	r3, [r4, #12]
 800a05e:	7832      	ldrb	r2, [r6, #0]
 800a060:	1c75      	adds	r5, r6, #1
 800a062:	3a30      	subs	r2, #48	@ 0x30
 800a064:	2a09      	cmp	r2, #9
 800a066:	d950      	bls.n	800a10a <_vfiprintf_r+0x1aa>
 800a068:	2900      	cmp	r1, #0
 800a06a:	d111      	bne.n	800a090 <_vfiprintf_r+0x130>
 800a06c:	e017      	b.n	800a09e <_vfiprintf_r+0x13e>
 800a06e:	3601      	adds	r6, #1
 800a070:	e7af      	b.n	8009fd2 <_vfiprintf_r+0x72>
 800a072:	9b05      	ldr	r3, [sp, #20]
 800a074:	6822      	ldr	r2, [r4, #0]
 800a076:	1ac0      	subs	r0, r0, r3
 800a078:	2301      	movs	r3, #1
 800a07a:	4083      	lsls	r3, r0
 800a07c:	4313      	orrs	r3, r2
 800a07e:	0035      	movs	r5, r6
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	e7cc      	b.n	800a01e <_vfiprintf_r+0xbe>
 800a084:	9b07      	ldr	r3, [sp, #28]
 800a086:	1d19      	adds	r1, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	9107      	str	r1, [sp, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	db01      	blt.n	800a094 <_vfiprintf_r+0x134>
 800a090:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a092:	e004      	b.n	800a09e <_vfiprintf_r+0x13e>
 800a094:	425b      	negs	r3, r3
 800a096:	60e3      	str	r3, [r4, #12]
 800a098:	2302      	movs	r3, #2
 800a09a:	4313      	orrs	r3, r2
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	7833      	ldrb	r3, [r6, #0]
 800a0a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0a2:	d10c      	bne.n	800a0be <_vfiprintf_r+0x15e>
 800a0a4:	7873      	ldrb	r3, [r6, #1]
 800a0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0a8:	d134      	bne.n	800a114 <_vfiprintf_r+0x1b4>
 800a0aa:	9b07      	ldr	r3, [sp, #28]
 800a0ac:	3602      	adds	r6, #2
 800a0ae:	1d1a      	adds	r2, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9207      	str	r2, [sp, #28]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da01      	bge.n	800a0bc <_vfiprintf_r+0x15c>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	425b      	negs	r3, r3
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	4d32      	ldr	r5, [pc, #200]	@ (800a188 <_vfiprintf_r+0x228>)
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	0028      	movs	r0, r5
 800a0c4:	7831      	ldrb	r1, [r6, #0]
 800a0c6:	f7fe f8f6 	bl	80082b6 <memchr>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d006      	beq.n	800a0dc <_vfiprintf_r+0x17c>
 800a0ce:	2340      	movs	r3, #64	@ 0x40
 800a0d0:	1b40      	subs	r0, r0, r5
 800a0d2:	4083      	lsls	r3, r0
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	7831      	ldrb	r1, [r6, #0]
 800a0de:	2206      	movs	r2, #6
 800a0e0:	482a      	ldr	r0, [pc, #168]	@ (800a18c <_vfiprintf_r+0x22c>)
 800a0e2:	1c75      	adds	r5, r6, #1
 800a0e4:	7621      	strb	r1, [r4, #24]
 800a0e6:	f7fe f8e6 	bl	80082b6 <memchr>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d040      	beq.n	800a170 <_vfiprintf_r+0x210>
 800a0ee:	4b28      	ldr	r3, [pc, #160]	@ (800a190 <_vfiprintf_r+0x230>)
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d122      	bne.n	800a13a <_vfiprintf_r+0x1da>
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	9b07      	ldr	r3, [sp, #28]
 800a0f8:	3307      	adds	r3, #7
 800a0fa:	4393      	bics	r3, r2
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	6963      	ldr	r3, [r4, #20]
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	189b      	adds	r3, r3, r2
 800a106:	6163      	str	r3, [r4, #20]
 800a108:	e762      	b.n	8009fd0 <_vfiprintf_r+0x70>
 800a10a:	4343      	muls	r3, r0
 800a10c:	002e      	movs	r6, r5
 800a10e:	2101      	movs	r1, #1
 800a110:	189b      	adds	r3, r3, r2
 800a112:	e7a4      	b.n	800a05e <_vfiprintf_r+0xfe>
 800a114:	2300      	movs	r3, #0
 800a116:	200a      	movs	r0, #10
 800a118:	0019      	movs	r1, r3
 800a11a:	3601      	adds	r6, #1
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	7832      	ldrb	r2, [r6, #0]
 800a120:	1c75      	adds	r5, r6, #1
 800a122:	3a30      	subs	r2, #48	@ 0x30
 800a124:	2a09      	cmp	r2, #9
 800a126:	d903      	bls.n	800a130 <_vfiprintf_r+0x1d0>
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0c8      	beq.n	800a0be <_vfiprintf_r+0x15e>
 800a12c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a12e:	e7c6      	b.n	800a0be <_vfiprintf_r+0x15e>
 800a130:	4341      	muls	r1, r0
 800a132:	002e      	movs	r6, r5
 800a134:	2301      	movs	r3, #1
 800a136:	1889      	adds	r1, r1, r2
 800a138:	e7f1      	b.n	800a11e <_vfiprintf_r+0x1be>
 800a13a:	aa07      	add	r2, sp, #28
 800a13c:	9200      	str	r2, [sp, #0]
 800a13e:	0021      	movs	r1, r4
 800a140:	003a      	movs	r2, r7
 800a142:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <_vfiprintf_r+0x234>)
 800a144:	9803      	ldr	r0, [sp, #12]
 800a146:	f7fd fb0f 	bl	8007768 <_printf_float>
 800a14a:	9004      	str	r0, [sp, #16]
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	3301      	adds	r3, #1
 800a150:	d1d6      	bne.n	800a100 <_vfiprintf_r+0x1a0>
 800a152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a154:	07db      	lsls	r3, r3, #31
 800a156:	d405      	bmi.n	800a164 <_vfiprintf_r+0x204>
 800a158:	89bb      	ldrh	r3, [r7, #12]
 800a15a:	059b      	lsls	r3, r3, #22
 800a15c:	d402      	bmi.n	800a164 <_vfiprintf_r+0x204>
 800a15e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a160:	f7fe f8a8 	bl	80082b4 <__retarget_lock_release_recursive>
 800a164:	89bb      	ldrh	r3, [r7, #12]
 800a166:	065b      	lsls	r3, r3, #25
 800a168:	d500      	bpl.n	800a16c <_vfiprintf_r+0x20c>
 800a16a:	e71e      	b.n	8009faa <_vfiprintf_r+0x4a>
 800a16c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a16e:	e71e      	b.n	8009fae <_vfiprintf_r+0x4e>
 800a170:	aa07      	add	r2, sp, #28
 800a172:	9200      	str	r2, [sp, #0]
 800a174:	0021      	movs	r1, r4
 800a176:	003a      	movs	r2, r7
 800a178:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <_vfiprintf_r+0x234>)
 800a17a:	9803      	ldr	r0, [sp, #12]
 800a17c:	f7fd fda2 	bl	8007cc4 <_printf_i>
 800a180:	e7e3      	b.n	800a14a <_vfiprintf_r+0x1ea>
 800a182:	46c0      	nop			@ (mov r8, r8)
 800a184:	0800b058 	.word	0x0800b058
 800a188:	0800b05e 	.word	0x0800b05e
 800a18c:	0800b062 	.word	0x0800b062
 800a190:	08007769 	.word	0x08007769
 800a194:	08009f3d 	.word	0x08009f3d

0800a198 <__swbuf_r>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	0006      	movs	r6, r0
 800a19c:	000d      	movs	r5, r1
 800a19e:	0014      	movs	r4, r2
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d004      	beq.n	800a1ae <__swbuf_r+0x16>
 800a1a4:	6a03      	ldr	r3, [r0, #32]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <__swbuf_r+0x16>
 800a1aa:	f7fd ff29 	bl	8008000 <__sinit>
 800a1ae:	69a3      	ldr	r3, [r4, #24]
 800a1b0:	60a3      	str	r3, [r4, #8]
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	071b      	lsls	r3, r3, #28
 800a1b6:	d502      	bpl.n	800a1be <__swbuf_r+0x26>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <__swbuf_r+0x3a>
 800a1be:	0021      	movs	r1, r4
 800a1c0:	0030      	movs	r0, r6
 800a1c2:	f000 f82b 	bl	800a21c <__swsetup_r>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d003      	beq.n	800a1d2 <__swbuf_r+0x3a>
 800a1ca:	2501      	movs	r5, #1
 800a1cc:	426d      	negs	r5, r5
 800a1ce:	0028      	movs	r0, r5
 800a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	6820      	ldr	r0, [r4, #0]
 800a1d6:	b2ef      	uxtb	r7, r5
 800a1d8:	1ac0      	subs	r0, r0, r3
 800a1da:	6963      	ldr	r3, [r4, #20]
 800a1dc:	b2ed      	uxtb	r5, r5
 800a1de:	4283      	cmp	r3, r0
 800a1e0:	dc05      	bgt.n	800a1ee <__swbuf_r+0x56>
 800a1e2:	0021      	movs	r1, r4
 800a1e4:	0030      	movs	r0, r6
 800a1e6:	f7ff fd8b 	bl	8009d00 <_fflush_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d1ed      	bne.n	800a1ca <__swbuf_r+0x32>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	1c5a      	adds	r2, r3, #1
 800a1fa:	6022      	str	r2, [r4, #0]
 800a1fc:	701f      	strb	r7, [r3, #0]
 800a1fe:	6963      	ldr	r3, [r4, #20]
 800a200:	4283      	cmp	r3, r0
 800a202:	d004      	beq.n	800a20e <__swbuf_r+0x76>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d5e1      	bpl.n	800a1ce <__swbuf_r+0x36>
 800a20a:	2d0a      	cmp	r5, #10
 800a20c:	d1df      	bne.n	800a1ce <__swbuf_r+0x36>
 800a20e:	0021      	movs	r1, r4
 800a210:	0030      	movs	r0, r6
 800a212:	f7ff fd75 	bl	8009d00 <_fflush_r>
 800a216:	2800      	cmp	r0, #0
 800a218:	d0d9      	beq.n	800a1ce <__swbuf_r+0x36>
 800a21a:	e7d6      	b.n	800a1ca <__swbuf_r+0x32>

0800a21c <__swsetup_r>:
 800a21c:	4b2d      	ldr	r3, [pc, #180]	@ (800a2d4 <__swsetup_r+0xb8>)
 800a21e:	b570      	push	{r4, r5, r6, lr}
 800a220:	0005      	movs	r5, r0
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	000c      	movs	r4, r1
 800a226:	2800      	cmp	r0, #0
 800a228:	d004      	beq.n	800a234 <__swsetup_r+0x18>
 800a22a:	6a03      	ldr	r3, [r0, #32]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <__swsetup_r+0x18>
 800a230:	f7fd fee6 	bl	8008000 <__sinit>
 800a234:	230c      	movs	r3, #12
 800a236:	5ee2      	ldrsh	r2, [r4, r3]
 800a238:	0713      	lsls	r3, r2, #28
 800a23a:	d423      	bmi.n	800a284 <__swsetup_r+0x68>
 800a23c:	06d3      	lsls	r3, r2, #27
 800a23e:	d407      	bmi.n	800a250 <__swsetup_r+0x34>
 800a240:	2309      	movs	r3, #9
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	2340      	movs	r3, #64	@ 0x40
 800a246:	2001      	movs	r0, #1
 800a248:	4313      	orrs	r3, r2
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	4240      	negs	r0, r0
 800a24e:	e03a      	b.n	800a2c6 <__swsetup_r+0xaa>
 800a250:	0752      	lsls	r2, r2, #29
 800a252:	d513      	bpl.n	800a27c <__swsetup_r+0x60>
 800a254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a256:	2900      	cmp	r1, #0
 800a258:	d008      	beq.n	800a26c <__swsetup_r+0x50>
 800a25a:	0023      	movs	r3, r4
 800a25c:	3344      	adds	r3, #68	@ 0x44
 800a25e:	4299      	cmp	r1, r3
 800a260:	d002      	beq.n	800a268 <__swsetup_r+0x4c>
 800a262:	0028      	movs	r0, r5
 800a264:	f7fe febe 	bl	8008fe4 <_free_r>
 800a268:	2300      	movs	r3, #0
 800a26a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a26c:	2224      	movs	r2, #36	@ 0x24
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	4393      	bics	r3, r2
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	2300      	movs	r3, #0
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	2308      	movs	r3, #8
 800a27e:	89a2      	ldrh	r2, [r4, #12]
 800a280:	4313      	orrs	r3, r2
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10b      	bne.n	800a2a2 <__swsetup_r+0x86>
 800a28a:	21a0      	movs	r1, #160	@ 0xa0
 800a28c:	2280      	movs	r2, #128	@ 0x80
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	0089      	lsls	r1, r1, #2
 800a292:	0092      	lsls	r2, r2, #2
 800a294:	400b      	ands	r3, r1
 800a296:	4293      	cmp	r3, r2
 800a298:	d003      	beq.n	800a2a2 <__swsetup_r+0x86>
 800a29a:	0021      	movs	r1, r4
 800a29c:	0028      	movs	r0, r5
 800a29e:	f000 f88f 	bl	800a3c0 <__smakebuf_r>
 800a2a2:	230c      	movs	r3, #12
 800a2a4:	5ee2      	ldrsh	r2, [r4, r3]
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	0013      	movs	r3, r2
 800a2aa:	400b      	ands	r3, r1
 800a2ac:	420a      	tst	r2, r1
 800a2ae:	d00b      	beq.n	800a2c8 <__swsetup_r+0xac>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	425b      	negs	r3, r3
 800a2b8:	61a3      	str	r3, [r4, #24]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	4283      	cmp	r3, r0
 800a2c0:	d101      	bne.n	800a2c6 <__swsetup_r+0xaa>
 800a2c2:	0613      	lsls	r3, r2, #24
 800a2c4:	d4be      	bmi.n	800a244 <__swsetup_r+0x28>
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	0791      	lsls	r1, r2, #30
 800a2ca:	d400      	bmi.n	800a2ce <__swsetup_r+0xb2>
 800a2cc:	6963      	ldr	r3, [r4, #20]
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	e7f3      	b.n	800a2ba <__swsetup_r+0x9e>
 800a2d2:	46c0      	nop			@ (mov r8, r8)
 800a2d4:	20000018 	.word	0x20000018

0800a2d8 <_raise_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	0004      	movs	r4, r0
 800a2dc:	000d      	movs	r5, r1
 800a2de:	291f      	cmp	r1, #31
 800a2e0:	d904      	bls.n	800a2ec <_raise_r+0x14>
 800a2e2:	2316      	movs	r3, #22
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	4240      	negs	r0, r0
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <_raise_r+0x24>
 800a2f2:	008a      	lsls	r2, r1, #2
 800a2f4:	189b      	adds	r3, r3, r2
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d108      	bne.n	800a30e <_raise_r+0x36>
 800a2fc:	0020      	movs	r0, r4
 800a2fe:	f000 f831 	bl	800a364 <_getpid_r>
 800a302:	002a      	movs	r2, r5
 800a304:	0001      	movs	r1, r0
 800a306:	0020      	movs	r0, r4
 800a308:	f000 f81a 	bl	800a340 <_kill_r>
 800a30c:	e7ed      	b.n	800a2ea <_raise_r+0x12>
 800a30e:	2a01      	cmp	r2, #1
 800a310:	d009      	beq.n	800a326 <_raise_r+0x4e>
 800a312:	1c51      	adds	r1, r2, #1
 800a314:	d103      	bne.n	800a31e <_raise_r+0x46>
 800a316:	2316      	movs	r3, #22
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	e7e5      	b.n	800a2ea <_raise_r+0x12>
 800a31e:	2100      	movs	r1, #0
 800a320:	0028      	movs	r0, r5
 800a322:	6019      	str	r1, [r3, #0]
 800a324:	4790      	blx	r2
 800a326:	2000      	movs	r0, #0
 800a328:	e7df      	b.n	800a2ea <_raise_r+0x12>
	...

0800a32c <raise>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4b03      	ldr	r3, [pc, #12]	@ (800a33c <raise+0x10>)
 800a330:	0001      	movs	r1, r0
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	f7ff ffd0 	bl	800a2d8 <_raise_r>
 800a338:	bd10      	pop	{r4, pc}
 800a33a:	46c0      	nop			@ (mov r8, r8)
 800a33c:	20000018 	.word	0x20000018

0800a340 <_kill_r>:
 800a340:	2300      	movs	r3, #0
 800a342:	b570      	push	{r4, r5, r6, lr}
 800a344:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_kill_r+0x20>)
 800a346:	0004      	movs	r4, r0
 800a348:	0008      	movs	r0, r1
 800a34a:	0011      	movs	r1, r2
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	f7f9 f998 	bl	8003682 <_kill>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	d103      	bne.n	800a35e <_kill_r+0x1e>
 800a356:	682b      	ldr	r3, [r5, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d000      	beq.n	800a35e <_kill_r+0x1e>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	200008ac 	.word	0x200008ac

0800a364 <_getpid_r>:
 800a364:	b510      	push	{r4, lr}
 800a366:	f7f9 f986 	bl	8003676 <_getpid>
 800a36a:	bd10      	pop	{r4, pc}

0800a36c <__swhatbuf_r>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	000e      	movs	r6, r1
 800a370:	001d      	movs	r5, r3
 800a372:	230e      	movs	r3, #14
 800a374:	5ec9      	ldrsh	r1, [r1, r3]
 800a376:	0014      	movs	r4, r2
 800a378:	b096      	sub	sp, #88	@ 0x58
 800a37a:	2900      	cmp	r1, #0
 800a37c:	da0c      	bge.n	800a398 <__swhatbuf_r+0x2c>
 800a37e:	89b2      	ldrh	r2, [r6, #12]
 800a380:	2380      	movs	r3, #128	@ 0x80
 800a382:	0011      	movs	r1, r2
 800a384:	4019      	ands	r1, r3
 800a386:	421a      	tst	r2, r3
 800a388:	d114      	bne.n	800a3b4 <__swhatbuf_r+0x48>
 800a38a:	2380      	movs	r3, #128	@ 0x80
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	2000      	movs	r0, #0
 800a390:	6029      	str	r1, [r5, #0]
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	b016      	add	sp, #88	@ 0x58
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	466a      	mov	r2, sp
 800a39a:	f000 f853 	bl	800a444 <_fstat_r>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dbed      	blt.n	800a37e <__swhatbuf_r+0x12>
 800a3a2:	23f0      	movs	r3, #240	@ 0xf0
 800a3a4:	9901      	ldr	r1, [sp, #4]
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	4019      	ands	r1, r3
 800a3aa:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <__swhatbuf_r+0x50>)
 800a3ac:	18c9      	adds	r1, r1, r3
 800a3ae:	424b      	negs	r3, r1
 800a3b0:	4159      	adcs	r1, r3
 800a3b2:	e7ea      	b.n	800a38a <__swhatbuf_r+0x1e>
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	2340      	movs	r3, #64	@ 0x40
 800a3b8:	e7e9      	b.n	800a38e <__swhatbuf_r+0x22>
 800a3ba:	46c0      	nop			@ (mov r8, r8)
 800a3bc:	ffffe000 	.word	0xffffe000

0800a3c0 <__smakebuf_r>:
 800a3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c2:	2602      	movs	r6, #2
 800a3c4:	898b      	ldrh	r3, [r1, #12]
 800a3c6:	0005      	movs	r5, r0
 800a3c8:	000c      	movs	r4, r1
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	4233      	tst	r3, r6
 800a3ce:	d007      	beq.n	800a3e0 <__smakebuf_r+0x20>
 800a3d0:	0023      	movs	r3, r4
 800a3d2:	3347      	adds	r3, #71	@ 0x47
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	6123      	str	r3, [r4, #16]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	6163      	str	r3, [r4, #20]
 800a3dc:	b005      	add	sp, #20
 800a3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e0:	ab03      	add	r3, sp, #12
 800a3e2:	aa02      	add	r2, sp, #8
 800a3e4:	f7ff ffc2 	bl	800a36c <__swhatbuf_r>
 800a3e8:	9f02      	ldr	r7, [sp, #8]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	0039      	movs	r1, r7
 800a3ee:	0028      	movs	r0, r5
 800a3f0:	f7fe fe6e 	bl	80090d0 <_malloc_r>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d108      	bne.n	800a40a <__smakebuf_r+0x4a>
 800a3f8:	220c      	movs	r2, #12
 800a3fa:	5ea3      	ldrsh	r3, [r4, r2]
 800a3fc:	059a      	lsls	r2, r3, #22
 800a3fe:	d4ed      	bmi.n	800a3dc <__smakebuf_r+0x1c>
 800a400:	2203      	movs	r2, #3
 800a402:	4393      	bics	r3, r2
 800a404:	431e      	orrs	r6, r3
 800a406:	81a6      	strh	r6, [r4, #12]
 800a408:	e7e2      	b.n	800a3d0 <__smakebuf_r+0x10>
 800a40a:	2380      	movs	r3, #128	@ 0x80
 800a40c:	89a2      	ldrh	r2, [r4, #12]
 800a40e:	6020      	str	r0, [r4, #0]
 800a410:	4313      	orrs	r3, r2
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	6120      	str	r0, [r4, #16]
 800a418:	6167      	str	r7, [r4, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00c      	beq.n	800a438 <__smakebuf_r+0x78>
 800a41e:	0028      	movs	r0, r5
 800a420:	230e      	movs	r3, #14
 800a422:	5ee1      	ldrsh	r1, [r4, r3]
 800a424:	f000 f820 	bl	800a468 <_isatty_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d005      	beq.n	800a438 <__smakebuf_r+0x78>
 800a42c:	2303      	movs	r3, #3
 800a42e:	89a2      	ldrh	r2, [r4, #12]
 800a430:	439a      	bics	r2, r3
 800a432:	3b02      	subs	r3, #2
 800a434:	4313      	orrs	r3, r2
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	e7cc      	b.n	800a3dc <__smakebuf_r+0x1c>
	...

0800a444 <_fstat_r>:
 800a444:	2300      	movs	r3, #0
 800a446:	b570      	push	{r4, r5, r6, lr}
 800a448:	4d06      	ldr	r5, [pc, #24]	@ (800a464 <_fstat_r+0x20>)
 800a44a:	0004      	movs	r4, r0
 800a44c:	0008      	movs	r0, r1
 800a44e:	0011      	movs	r1, r2
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	f7f9 f976 	bl	8003742 <_fstat>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	d103      	bne.n	800a462 <_fstat_r+0x1e>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d000      	beq.n	800a462 <_fstat_r+0x1e>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	200008ac 	.word	0x200008ac

0800a468 <_isatty_r>:
 800a468:	2300      	movs	r3, #0
 800a46a:	b570      	push	{r4, r5, r6, lr}
 800a46c:	4d06      	ldr	r5, [pc, #24]	@ (800a488 <_isatty_r+0x20>)
 800a46e:	0004      	movs	r4, r0
 800a470:	0008      	movs	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f9 f973 	bl	800375e <_isatty>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d103      	bne.n	800a484 <_isatty_r+0x1c>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d000      	beq.n	800a484 <_isatty_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd70      	pop	{r4, r5, r6, pc}
 800a486:	46c0      	nop			@ (mov r8, r8)
 800a488:	200008ac 	.word	0x200008ac

0800a48c <_init>:
 800a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48e:	46c0      	nop			@ (mov r8, r8)
 800a490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a492:	bc08      	pop	{r3}
 800a494:	469e      	mov	lr, r3
 800a496:	4770      	bx	lr

0800a498 <_fini>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	46c0      	nop			@ (mov r8, r8)
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr
