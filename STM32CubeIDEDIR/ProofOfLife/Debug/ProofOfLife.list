
ProofOfLife.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800236c  0800236c  0000336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e4  080023e4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080023e4  080023e4  000033e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ec  080023ec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ec  080023ec  000033ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023f0  080023f0  000033f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002400  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002400  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009017  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f8  00000000  00000000  0000d04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059e  00000000  00000000  0000ec90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001495a  00000000  00000000  0000f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092b9  00000000  00000000  00023b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a38  00000000  00000000  0002ce41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001924  00000000  00000000  000b18bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  000b31e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002354 	.word	0x08002354

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002354 	.word	0x08002354

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fa4a 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f892 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f90c 	bl	8000670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000458:	f000 f8d6 	bl	8000608 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800045c:	23a0      	movs	r3, #160	@ 0xa0
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fd1d 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000468:	23fa      	movs	r3, #250	@ 0xfa
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fabf 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000472:	23a0      	movs	r3, #160	@ 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2140      	movs	r1, #64	@ 0x40
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fd12 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800047e:	23fa      	movs	r3, #250	@ 0xfa
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fab4 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	011a      	lsls	r2, r3, #4
 800048c:	23a0      	movs	r3, #160	@ 0xa0
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fd05 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000498:	23fa      	movs	r3, #250	@ 0xfa
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	0018      	movs	r0, r3
 800049e:	f000 faa7 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80004a2:	2380      	movs	r3, #128	@ 0x80
 80004a4:	015a      	lsls	r2, r3, #5
 80004a6:	23a0      	movs	r3, #160	@ 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fcf8 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004b2:	23fa      	movs	r3, #250	@ 0xfa
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fa9a 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004bc:	23a0      	movs	r3, #160	@ 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2120      	movs	r1, #32
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fced 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004c8:	23fa      	movs	r3, #250	@ 0xfa
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa8f 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80004d2:	23a0      	movs	r3, #160	@ 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2110      	movs	r1, #16
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fce2 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004de:	23fa      	movs	r3, #250	@ 0xfa
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fa84 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	2180      	movs	r1, #128	@ 0x80
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fcd7 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004f4:	23fa      	movs	r3, #250	@ 0xfa
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fa79 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80004fe:	23a0      	movs	r3, #160	@ 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2140      	movs	r1, #64	@ 0x40
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fccc 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800050a:	23fa      	movs	r3, #250	@ 0xfa
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fa6e 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	011a      	lsls	r2, r3, #4
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fcbf 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000524:	23fa      	movs	r3, #250	@ 0xfa
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	0018      	movs	r0, r3
 800052a:	f000 fa61 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	015a      	lsls	r2, r3, #5
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fcb2 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800053e:	23fa      	movs	r3, #250	@ 0xfa
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fa54 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000548:	23a0      	movs	r3, #160	@ 0xa0
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	2120      	movs	r1, #32
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fca7 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000554:	23fa      	movs	r3, #250	@ 0xfa
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fa49 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800055e:	23a0      	movs	r3, #160	@ 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2110      	movs	r1, #16
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fc9c 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800056a:	23fa      	movs	r3, #250	@ 0xfa
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fa3e 	bl	80009f0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000574:	46c0      	nop			@ (mov r8, r8)
 8000576:	e771      	b.n	800045c <main+0x14>

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b093      	sub	sp, #76	@ 0x4c
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2410      	movs	r4, #16
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2338      	movs	r3, #56	@ 0x38
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f001 feb7 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f001 feb0 	bl	80022fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fc99 	bl	8000ed8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2202      	movs	r2, #2
 80005aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2240      	movs	r2, #64	@ 0x40
 80005be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fcd1 	bl	8000f70 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d2:	f000 f8cb 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	003b      	movs	r3, r7
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	003b      	movs	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	003b      	movs	r3, r7
 80005f0:	2100      	movs	r1, #0
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 ffd6 	bl	80015a4 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005fc:	f000 f8b6 	bl	800076c <Error_Handler>
  }
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b013      	add	sp, #76	@ 0x4c
 8000606:	bd90      	pop	{r4, r7, pc}

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <MX_USART2_UART_Init+0x64>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000614:	22e1      	movs	r2, #225	@ 0xe1
 8000616:	0252      	lsls	r2, r2, #9
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 800061c:	2280      	movs	r2, #128	@ 0x80
 800061e:	0552      	lsls	r2, r2, #21
 8000620:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000630:	220c      	movs	r2, #12
 8000632:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <MX_USART2_UART_Init+0x60>)
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f94f 	bl	80018f8 <HAL_UART_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800065e:	f000 f885 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40004400 	.word	0x40004400

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	@ 0x24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	240c      	movs	r4, #12
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f001 fe3b 	bl	80022fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b35      	ldr	r3, [pc, #212]	@ (800075c <MX_GPIO_Init+0xec>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068a:	4b34      	ldr	r3, [pc, #208]	@ (800075c <MX_GPIO_Init+0xec>)
 800068c:	2104      	movs	r1, #4
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	@ 0x34
 8000692:	4b32      	ldr	r3, [pc, #200]	@ (800075c <MX_GPIO_Init+0xec>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000696:	2204      	movs	r2, #4
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <MX_GPIO_Init+0xec>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <MX_GPIO_Init+0xec>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <MX_GPIO_Init+0xec>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b29      	ldr	r3, [pc, #164]	@ (800075c <MX_GPIO_Init+0xec>)
 80006b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ba:	4b28      	ldr	r3, [pc, #160]	@ (800075c <MX_GPIO_Init+0xec>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <MX_GPIO_Init+0xec>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c6:	2201      	movs	r2, #1
 80006c8:	4013      	ands	r3, r2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80006ce:	4924      	ldr	r1, [pc, #144]	@ (8000760 <MX_GPIO_Init+0xf0>)
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2200      	movs	r2, #0
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fbc6 	bl	8000e68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_GPIO_Init+0xf4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fbc0 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2204      	movs	r2, #4
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2288      	movs	r2, #136	@ 0x88
 80006f2:	0352      	lsls	r2, r2, #13
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000768 <MX_GPIO_Init+0xf8>)
 8000700:	0019      	movs	r1, r3
 8000702:	0010      	movs	r0, r2
 8000704:	f000 fa4c 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000708:	193b      	adds	r3, r7, r4
 800070a:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <MX_GPIO_Init+0xf0>)
 800070c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	193a      	adds	r2, r7, r4
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fa39 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2240      	movs	r2, #64	@ 0x40
 8000734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <MX_GPIO_Init+0xf4>)
 800074c:	0019      	movs	r1, r3
 800074e:	0010      	movs	r0, r2
 8000750:	f000 fa26 	bl	8000ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	b009      	add	sp, #36	@ 0x24
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	000018f0 	.word	0x000018f0
 8000764:	50000800 	.word	0x50000800
 8000768:	50001400 	.word	0x50001400

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_MspInit+0x44>)
 8000780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <HAL_MspInit+0x44>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	641a      	str	r2, [r3, #64]	@ 0x40
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <HAL_MspInit+0x44>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <HAL_MspInit+0x44>)
 8000798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <HAL_MspInit+0x44>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0549      	lsls	r1, r1, #21
 80007a0:	430a      	orrs	r2, r1
 80007a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_MspInit+0x44>)
 80007a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	055b      	lsls	r3, r3, #21
 80007ac:	4013      	ands	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	@ 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2414      	movs	r4, #20
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f001 fd92 	bl	80022fc <memset>
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <HAL_UART_MspInit+0x8c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d130      	bne.n	8000844 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HAL_UART_MspInit+0x90>)
 80007e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <HAL_UART_MspInit+0x90>)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <HAL_UART_MspInit+0x90>)
 80007f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <HAL_UART_MspInit+0x90>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <HAL_UART_MspInit+0x90>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	@ 0x34
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <HAL_UART_MspInit+0x90>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2202      	movs	r2, #2
 8000822:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2201      	movs	r2, #1
 8000828:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2201      	movs	r2, #1
 8000834:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	187a      	adds	r2, r7, r1
 8000838:	23a0      	movs	r3, #160	@ 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f9ae 	bl	8000ba0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b00b      	add	sp, #44	@ 0x2c
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f89c 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000892:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000894:	f7ff fff7 	bl	8000886 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008be:	f001 fd25 	bl	800230c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008c2:	f7ff fdc1 	bl	8000448 <main>

080008c6 <LoopForever>:

LoopForever:
  b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   r0, =_estack
 80008c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d4:	080023f4 	.word	0x080023f4
  ldr r2, =_sbss
 80008d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008dc:	200000c0 	.word	0x200000c0

080008e0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <HAL_Init+0x3c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_Init+0x3c>)
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	0049      	lsls	r1, r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f810 	bl	8000924 <HAL_InitTick>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d003      	beq.n	8000910 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e001      	b.n	8000914 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff ff32 	bl	8000778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	230f      	movs	r3, #15
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000934:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <HAL_InitTick+0x88>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d02b      	beq.n	8000994 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800093c:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <HAL_InitTick+0x8c>)
 800093e:	681c      	ldr	r4, [r3, #0]
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <HAL_InitTick+0x88>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	0019      	movs	r1, r3
 8000946:	23fa      	movs	r3, #250	@ 0xfa
 8000948:	0098      	lsls	r0, r3, #2
 800094a:	f7ff fbdb 	bl	8000104 <__udivsi3>
 800094e:	0003      	movs	r3, r0
 8000950:	0019      	movs	r1, r3
 8000952:	0020      	movs	r0, r4
 8000954:	f7ff fbd6 	bl	8000104 <__udivsi3>
 8000958:	0003      	movs	r3, r0
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f913 	bl	8000b86 <HAL_SYSTICK_Config>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d112      	bne.n	800098a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d80a      	bhi.n	8000980 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f8f2 	bl	8000b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_InitTick+0x90>)
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	e00d      	b.n	800099c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e008      	b.n	800099c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800098a:	230f      	movs	r3, #15
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e003      	b.n	800099c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000994:	230f      	movs	r3, #15
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b005      	add	sp, #20
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	18d2      	adds	r2, r2, r3
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_IncTick+0x20>)
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	20000008 	.word	0x20000008
 80009d8:	200000bc 	.word	0x200000bc

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	200000bc 	.word	0x200000bc

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff0 	bl	80009dc <HAL_GetTick>
 80009fc:	0003      	movs	r3, r0
 80009fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	189b      	adds	r3, r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	f7ff ffe0 	bl	80009dc <HAL_GetTick>
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b004      	add	sp, #16
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000008 	.word	0x20000008

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a4c:	d828      	bhi.n	8000aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	33c0      	adds	r3, #192	@ 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	589b      	ldr	r3, [r3, r2]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	@ 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	@ 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	481f      	ldr	r0, [pc, #124]	@ (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	33c0      	adds	r3, #192	@ 0xc0
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9e:	e031      	b.n	8000b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	400b      	ands	r3, r1
 8000aac:	3b08      	subs	r3, #8
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	@ 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	@ 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001c      	movs	r4, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	4023      	ands	r3, r4
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	430a      	orrs	r2, r1
 8000afa:	3306      	adds	r3, #6
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	18c3      	adds	r3, r0, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	045b      	lsls	r3, r3, #17
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d301      	bcc.n	8000b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e010      	b.n	8000b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <SysTick_Config+0x44>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	3a01      	subs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2103      	movs	r1, #3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ff7c 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <SysTick_Config+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Config+0x44>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	210f      	movs	r1, #15
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	1c02      	adds	r2, r0, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ffbf 	bl	8000b14 <SysTick_Config>
 8000b96:	0003      	movs	r3, r0
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e147      	b.n	8000e40 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d100      	bne.n	8000bc8 <HAL_GPIO_Init+0x28>
 8000bc6:	e138      	b.n	8000e3a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d005      	beq.n	8000be0 <HAL_GPIO_Init+0x40>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d130      	bne.n	8000c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	409a      	lsls	r2, r3
 8000bee:	0013      	movs	r3, r2
 8000bf0:	43da      	mvns	r2, r3
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	409a      	lsls	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c16:	2201      	movs	r2, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2203      	movs	r2, #3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d017      	beq.n	8000c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d123      	bne.n	8000cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3208      	adds	r2, #8
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	58d3      	ldr	r3, [r2, r3]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691a      	ldr	r2, [r3, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2107      	movs	r1, #7
 8000cb6:	400b      	ands	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	6939      	ldr	r1, [r7, #16]
 8000cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2203      	movs	r2, #3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	23c0      	movs	r3, #192	@ 0xc0
 8000d0c:	029b      	lsls	r3, r3, #10
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d100      	bne.n	8000d14 <HAL_GPIO_Init+0x174>
 8000d12:	e092      	b.n	8000e3a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d14:	4a50      	ldr	r2, [pc, #320]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	589b      	ldr	r3, [r3, r2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4013      	ands	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43da      	mvns	r2, r3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x1ca>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a45      	ldr	r2, [pc, #276]	@ (8000e5c <HAL_GPIO_Init+0x2bc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00d      	beq.n	8000d66 <HAL_GPIO_Init+0x1c6>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a44      	ldr	r2, [pc, #272]	@ (8000e60 <HAL_GPIO_Init+0x2c0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d007      	beq.n	8000d62 <HAL_GPIO_Init+0x1c2>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a43      	ldr	r2, [pc, #268]	@ (8000e64 <HAL_GPIO_Init+0x2c4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_GPIO_Init+0x1be>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x1cc>
 8000d5e:	2305      	movs	r3, #5
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x1cc>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x1cc>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x1cc>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2103      	movs	r1, #3
 8000d70:	400a      	ands	r2, r1
 8000d72:	00d2      	lsls	r2, r2, #3
 8000d74:	4093      	lsls	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d7c:	4936      	ldr	r1, [pc, #216]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3318      	adds	r3, #24
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43da      	mvns	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	@ 0x80
 8000da0:	035b      	lsls	r3, r3, #13
 8000da2:	4013      	ands	r3, r2
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	039b      	lsls	r3, r3, #14
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dde:	4a1e      	ldr	r2, [pc, #120]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000de0:	2384      	movs	r3, #132	@ 0x84
 8000de2:	58d3      	ldr	r3, [r2, r3]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	029b      	lsls	r3, r3, #10
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e04:	4914      	ldr	r1, [pc, #80]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000e06:	2284      	movs	r2, #132	@ 0x84
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	58d3      	ldr	r3, [r2, r3]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	025b      	lsls	r3, r3, #9
 8000e26:	4013      	ands	r3, r2
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e32:	4909      	ldr	r1, [pc, #36]	@ (8000e58 <HAL_GPIO_Init+0x2b8>)
 8000e34:	2280      	movs	r2, #128	@ 0x80
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	40da      	lsrs	r2, r3
 8000e48:	1e13      	subs	r3, r2, #0
 8000e4a:	d000      	beq.n	8000e4e <HAL_GPIO_Init+0x2ae>
 8000e4c:	e6b0      	b.n	8000bb0 <HAL_GPIO_Init+0x10>
  }
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b006      	add	sp, #24
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	50000400 	.word	0x50000400
 8000e60:	50000800 	.word	0x50000800
 8000e64:	50000c00 	.word	0x50000c00

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	0008      	movs	r0, r1
 8000e72:	0011      	movs	r1, r2
 8000e74:	1cbb      	adds	r3, r7, #2
 8000e76:	1c02      	adds	r2, r0, #0
 8000e78:	801a      	strh	r2, [r3, #0]
 8000e7a:	1c7b      	adds	r3, r7, #1
 8000e7c:	1c0a      	adds	r2, r1, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e80:	1c7b      	adds	r3, r7, #1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e88:	1cbb      	adds	r3, r7, #2
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	000a      	movs	r2, r1
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb6:	1cbb      	adds	r3, r7, #2
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	041a      	lsls	r2, r3, #16
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	1cb9      	adds	r1, r7, #2
 8000ec6:	8809      	ldrh	r1, [r1, #0]
 8000ec8:	400b      	ands	r3, r1
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b004      	add	sp, #16
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	0019      	movs	r1, r3
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d11f      	bne.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	0013      	movs	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	189b      	adds	r3, r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4912      	ldr	r1, [pc, #72]	@ (8000f54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff f8fa 	bl	8000104 <__udivsi3>
 8000f10:	0003      	movs	r3, r0
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f16:	e008      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e001      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e009      	b.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f2c:	695a      	ldr	r2, [r3, #20]
 8000f2e:	2380      	movs	r3, #128	@ 0x80
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	401a      	ands	r2, r3
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d0ed      	beq.n	8000f18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	fffff9ff 	.word	0xfffff9ff
 8000f50:	20000000 	.word	0x20000000
 8000f54:	000f4240 	.word	0x000f4240

08000f58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	23e0      	movs	r3, #224	@ 0xe0
 8000f62:	01db      	lsls	r3, r3, #7
 8000f64:	4013      	ands	r3, r2
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e2fe      	b.n	8001580 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d100      	bne.n	8000f8e <HAL_RCC_OscConfig+0x1e>
 8000f8c:	e07c      	b.n	8001088 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8e:	4bc3      	ldr	r3, [pc, #780]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2238      	movs	r2, #56	@ 0x38
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f98:	4bc0      	ldr	r3, [pc, #768]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x3e>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d002      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4bb9      	ldr	r3, [pc, #740]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	029b      	lsls	r3, r3, #10
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d062      	beq.n	8001086 <HAL_RCC_OscConfig+0x116>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d15e      	bne.n	8001086 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e2d9      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d107      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x78>
 8000fd8:	4bb0      	ldr	r3, [pc, #704]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4baf      	ldr	r3, [pc, #700]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	0249      	lsls	r1, r1, #9
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e020      	b.n	800102a <HAL_RCC_OscConfig+0xba>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	23a0      	movs	r3, #160	@ 0xa0
 8000fee:	02db      	lsls	r3, r3, #11
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d10e      	bne.n	8001012 <HAL_RCC_OscConfig+0xa2>
 8000ff4:	4ba9      	ldr	r3, [pc, #676]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	02c9      	lsls	r1, r1, #11
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	4ba6      	ldr	r3, [pc, #664]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4ba5      	ldr	r3, [pc, #660]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	0249      	lsls	r1, r1, #9
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e00b      	b.n	800102a <HAL_RCC_OscConfig+0xba>
 8001012:	4ba2      	ldr	r3, [pc, #648]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4ba1      	ldr	r3, [pc, #644]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001018:	49a1      	ldr	r1, [pc, #644]	@ (80012a0 <HAL_RCC_OscConfig+0x330>)
 800101a:	400a      	ands	r2, r1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	4b9f      	ldr	r3, [pc, #636]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b9e      	ldr	r3, [pc, #632]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001024:	499f      	ldr	r1, [pc, #636]	@ (80012a4 <HAL_RCC_OscConfig+0x334>)
 8001026:	400a      	ands	r2, r1
 8001028:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d014      	beq.n	800105c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fcd3 	bl	80009dc <HAL_GetTick>
 8001036:	0003      	movs	r3, r0
 8001038:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcce 	bl	80009dc <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	@ 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e298      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800104e:	4b93      	ldr	r3, [pc, #588]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	@ 0x80
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xcc>
 800105a:	e015      	b.n	8001088 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fcbe 	bl	80009dc <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001066:	f7ff fcb9 	bl	80009dc <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b64      	cmp	r3, #100	@ 0x64
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e283      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001078:	4b88      	ldr	r3, [pc, #544]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	029b      	lsls	r3, r3, #10
 8001080:	4013      	ands	r3, r2
 8001082:	d1f0      	bne.n	8001066 <HAL_RCC_OscConfig+0xf6>
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2202      	movs	r2, #2
 800108e:	4013      	ands	r3, r2
 8001090:	d100      	bne.n	8001094 <HAL_RCC_OscConfig+0x124>
 8001092:	e099      	b.n	80011c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001094:	4b81      	ldr	r3, [pc, #516]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2238      	movs	r2, #56	@ 0x38
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109e:	4b7f      	ldr	r3, [pc, #508]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x144>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d002      	beq.n	80010ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d135      	bne.n	8001126 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010ba:	4b78      	ldr	r3, [pc, #480]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x162>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e256      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b72      	ldr	r3, [pc, #456]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a74      	ldr	r2, [pc, #464]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80010d8:	4013      	ands	r3, r2
 80010da:	0019      	movs	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	021a      	lsls	r2, r3, #8
 80010e2:	4b6e      	ldr	r3, [pc, #440]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d112      	bne.n	8001114 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010ee:	4b6b      	ldr	r3, [pc, #428]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6e      	ldr	r2, [pc, #440]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	4b67      	ldr	r3, [pc, #412]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001102:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	0adb      	lsrs	r3, r3, #11
 8001108:	2207      	movs	r2, #7
 800110a:	4013      	ands	r3, r2
 800110c:	4a68      	ldr	r2, [pc, #416]	@ (80012b0 <HAL_RCC_OscConfig+0x340>)
 800110e:	40da      	lsrs	r2, r3
 8001110:	4b68      	ldr	r3, [pc, #416]	@ (80012b4 <HAL_RCC_OscConfig+0x344>)
 8001112:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <HAL_RCC_OscConfig+0x348>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff fc03 	bl	8000924 <HAL_InitTick>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d051      	beq.n	80011c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e22c      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d030      	beq.n	8001190 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800112e:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a5e      	ldr	r2, [pc, #376]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001134:	4013      	ands	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	4b57      	ldr	r3, [pc, #348]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001142:	4b56      	ldr	r3, [pc, #344]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b55      	ldr	r3, [pc, #340]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0049      	lsls	r1, r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc44 	bl	80009dc <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fc3f 	bl	80009dc <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e209      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4013      	ands	r3, r2
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a4a      	ldr	r2, [pc, #296]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	021a      	lsls	r2, r3, #8
 8001188:	4b44      	ldr	r3, [pc, #272]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	e01b      	b.n	80011c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001190:	4b42      	ldr	r3, [pc, #264]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b41      	ldr	r3, [pc, #260]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001196:	4949      	ldr	r1, [pc, #292]	@ (80012bc <HAL_RCC_OscConfig+0x34c>)
 8001198:	400a      	ands	r2, r1
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fc1e 	bl	80009dc <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fc19 	bl	80009dc <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1e3      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b8:	4b38      	ldr	r3, [pc, #224]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4013      	ands	r3, r2
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x236>
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2208      	movs	r2, #8
 80011ce:	4013      	ands	r3, r2
 80011d0:	d047      	beq.n	8001262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2238      	movs	r2, #56	@ 0x38
 80011d8:	4013      	ands	r3, r2
 80011da:	2b18      	cmp	r3, #24
 80011dc:	d10a      	bne.n	80011f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d03c      	beq.n	8001262 <HAL_RCC_OscConfig+0x2f2>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d138      	bne.n	8001262 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e1c5      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d019      	beq.n	8001230 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 80011fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001208:	f7ff fbe8 	bl	80009dc <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001212:	f7ff fbe3 	bl	80009dc <HAL_GetTick>
 8001216:	0002      	movs	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e1ad      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001228:	2202      	movs	r2, #2
 800122a:	4013      	ands	r3, r2
 800122c:	d0f1      	beq.n	8001212 <HAL_RCC_OscConfig+0x2a2>
 800122e:	e018      	b.n	8001262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001230:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001232:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fbce 	bl	80009dc <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001246:	f7ff fbc9 	bl	80009dc <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e193      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d1f1      	bne.n	8001246 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x2fe>
 800126c:	e0c6      	b.n	80013fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	231f      	movs	r3, #31
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2238      	movs	r2, #56	@ 0x38
 800127c:	4013      	ands	r3, r2
 800127e:	2b20      	cmp	r3, #32
 8001280:	d11e      	bne.n	80012c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_RCC_OscConfig+0x32c>)
 8001284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d100      	bne.n	800128e <HAL_RCC_OscConfig+0x31e>
 800128c:	e0b6      	b.n	80013fc <HAL_RCC_OscConfig+0x48c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d000      	beq.n	8001298 <HAL_RCC_OscConfig+0x328>
 8001296:	e0b1      	b.n	80013fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e171      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
 800129c:	40021000 	.word	0x40021000
 80012a0:	fffeffff 	.word	0xfffeffff
 80012a4:	fffbffff 	.word	0xfffbffff
 80012a8:	ffff80ff 	.word	0xffff80ff
 80012ac:	ffffc7ff 	.word	0xffffc7ff
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004
 80012bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80012c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	4013      	ands	r3, r2
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_OscConfig+0x360>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x362>
 80012d0:	2300      	movs	r3, #0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d011      	beq.n	80012fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4bac      	ldr	r3, [pc, #688]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80012d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012da:	4bab      	ldr	r3, [pc, #684]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	0549      	lsls	r1, r1, #21
 80012e0:	430a      	orrs	r2, r1
 80012e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80012e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012f2:	231f      	movs	r3, #31
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012fa:	4ba4      	ldr	r3, [pc, #656]	@ (800158c <HAL_RCC_OscConfig+0x61c>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4013      	ands	r3, r2
 8001304:	d11a      	bne.n	800133c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001306:	4ba1      	ldr	r3, [pc, #644]	@ (800158c <HAL_RCC_OscConfig+0x61c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4ba0      	ldr	r3, [pc, #640]	@ (800158c <HAL_RCC_OscConfig+0x61c>)
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	0049      	lsls	r1, r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb62 	bl	80009dc <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131e:	f7ff fb5d 	bl	80009dc <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e127      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001330:	4b96      	ldr	r3, [pc, #600]	@ (800158c <HAL_RCC_OscConfig+0x61c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x3e2>
 8001344:	4b90      	ldr	r3, [pc, #576]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001346:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001348:	4b8f      	ldr	r3, [pc, #572]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001350:	e01c      	b.n	800138c <HAL_RCC_OscConfig+0x41c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x404>
 800135a:	4b8b      	ldr	r3, [pc, #556]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800135c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800135e:	4b8a      	ldr	r3, [pc, #552]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001360:	2104      	movs	r1, #4
 8001362:	430a      	orrs	r2, r1
 8001364:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001366:	4b88      	ldr	r3, [pc, #544]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001368:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800136a:	4b87      	ldr	r3, [pc, #540]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0x41c>
 8001374:	4b84      	ldr	r3, [pc, #528]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001376:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001378:	4b83      	ldr	r3, [pc, #524]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800137a:	2101      	movs	r1, #1
 800137c:	438a      	bics	r2, r1
 800137e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001380:	4b81      	ldr	r3, [pc, #516]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001382:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001384:	4b80      	ldr	r3, [pc, #512]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fb22 	bl	80009dc <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800139c:	e009      	b.n	80013b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fb1d 	bl	80009dc <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	4a79      	ldr	r2, [pc, #484]	@ (8001590 <HAL_RCC_OscConfig+0x620>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0e6      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013b2:	4b75      	ldr	r3, [pc, #468]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80013b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x42e>
 80013bc:	e013      	b.n	80013e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fb0d 	bl	80009dc <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c6:	e009      	b.n	80013dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb08 	bl	80009dc <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001590 <HAL_RCC_OscConfig+0x620>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0d1      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80013de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e0:	2202      	movs	r2, #2
 80013e2:	4013      	ands	r3, r2
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80013e6:	231f      	movs	r3, #31
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013f0:	4b65      	ldr	r3, [pc, #404]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80013f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013f4:	4b64      	ldr	r3, [pc, #400]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80013f6:	4967      	ldr	r1, [pc, #412]	@ (8001594 <HAL_RCC_OscConfig+0x624>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x496>
 8001404:	e0bb      	b.n	800157e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001406:	4b60      	ldr	r3, [pc, #384]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2238      	movs	r2, #56	@ 0x38
 800140c:	4013      	ands	r3, r2
 800140e:	2b10      	cmp	r3, #16
 8001410:	d100      	bne.n	8001414 <HAL_RCC_OscConfig+0x4a4>
 8001412:	e07b      	b.n	800150c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d156      	bne.n	80014ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b5a      	ldr	r3, [pc, #360]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001422:	495d      	ldr	r1, [pc, #372]	@ (8001598 <HAL_RCC_OscConfig+0x628>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7ff fad8 	bl	80009dc <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fad3 	bl	80009dc <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e09d      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001444:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	049b      	lsls	r3, r3, #18
 800144c:	4013      	ands	r3, r2
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001450:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a51      	ldr	r2, [pc, #324]	@ (800159c <HAL_RCC_OscConfig+0x62c>)
 8001456:	4013      	ands	r3, r2
 8001458:	0019      	movs	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147c:	431a      	orrs	r2, r3
 800147e:	4b42      	ldr	r3, [pc, #264]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001480:	430a      	orrs	r2, r1
 8001482:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001484:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b3f      	ldr	r3, [pc, #252]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	0449      	lsls	r1, r1, #17
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001492:	4b3d      	ldr	r3, [pc, #244]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	4b3c      	ldr	r3, [pc, #240]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	0549      	lsls	r1, r1, #21
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fa9c 	bl	80009dc <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa97 	bl	80009dc <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e061      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	049b      	lsls	r3, r3, #18
 80014c4:	4013      	ands	r3, r2
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x53a>
 80014c8:	e059      	b.n	800157e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80014d0:	4931      	ldr	r1, [pc, #196]	@ (8001598 <HAL_RCC_OscConfig+0x628>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fa81 	bl	80009dc <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff fa7c 	bl	80009dc <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e046      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f2:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	049b      	lsls	r3, r3, #18
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 8001504:	4926      	ldr	r1, [pc, #152]	@ (80015a0 <HAL_RCC_OscConfig+0x630>)
 8001506:	400a      	ands	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e038      	b.n	800157e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e033      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_RCC_OscConfig+0x618>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2203      	movs	r2, #3
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	429a      	cmp	r2, r3
 800152a:	d126      	bne.n	800157a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2270      	movs	r2, #112	@ 0x70
 8001530:	401a      	ands	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d11f      	bne.n	800157a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	23fe      	movs	r3, #254	@ 0xfe
 800153e:	01db      	lsls	r3, r3, #7
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	23f8      	movs	r3, #248	@ 0xf8
 8001550:	039b      	lsls	r3, r3, #14
 8001552:	401a      	ands	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d10e      	bne.n	800157a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	23e0      	movs	r3, #224	@ 0xe0
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	401a      	ands	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	0f5b      	lsrs	r3, r3, #29
 8001570:	075a      	lsls	r2, r3, #29
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b008      	add	sp, #32
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	40007000 	.word	0x40007000
 8001590:	00001388 	.word	0x00001388
 8001594:	efffffff 	.word	0xefffffff
 8001598:	feffffff 	.word	0xfeffffff
 800159c:	11c1808c 	.word	0x11c1808c
 80015a0:	eefefffc 	.word	0xeefefffc

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0e9      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b76      	ldr	r3, [pc, #472]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2207      	movs	r2, #7
 80015be:	4013      	ands	r3, r2
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d91e      	bls.n	8001604 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b73      	ldr	r3, [pc, #460]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4393      	bics	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	4b70      	ldr	r3, [pc, #448]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa00 	bl	80009dc <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f7ff f9fb 	bl	80009dc <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001798 <HAL_RCC_ClockConfig+0x1f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0ca      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f6:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2207      	movs	r2, #7
 80015fc:	4013      	ands	r3, r2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d1ee      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d015      	beq.n	800163a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2204      	movs	r2, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d006      	beq.n	8001626 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001618:	4b60      	ldr	r3, [pc, #384]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4b5f      	ldr	r3, [pc, #380]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800161e:	21e0      	movs	r1, #224	@ 0xe0
 8001620:	01c9      	lsls	r1, r1, #7
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001626:	4b5d      	ldr	r3, [pc, #372]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_RCC_ClockConfig+0x1fc>)
 800162c:	4013      	ands	r3, r2
 800162e:	0019      	movs	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	4b59      	ldr	r3, [pc, #356]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	d057      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d107      	bne.n	800165c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	029b      	lsls	r3, r3, #10
 8001654:	4013      	ands	r3, r2
 8001656:	d12b      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e097      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d107      	bne.n	8001674 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001664:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	049b      	lsls	r3, r3, #18
 800166c:	4013      	ands	r3, r2
 800166e:	d11f      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e08b      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	@ 0x80
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4013      	ands	r3, r2
 8001686:	d113      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e07f      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001694:	4b41      	ldr	r3, [pc, #260]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 8001696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e074      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e06d      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b0:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2207      	movs	r2, #7
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 80016c0:	430a      	orrs	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016c4:	f7ff f98a 	bl	80009dc <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7ff f985 	bl	80009dc <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001798 <HAL_RCC_ClockConfig+0x1f4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e054      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2238      	movs	r2, #56	@ 0x38
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d1ec      	bne.n	80016ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2207      	movs	r2, #7
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d21e      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2207      	movs	r2, #7
 8001708:	4393      	bics	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001714:	f7ff f962 	bl	80009dc <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800171c:	e009      	b.n	8001732 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171e:	f7ff f95d 	bl	80009dc <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a1b      	ldr	r2, [pc, #108]	@ (8001798 <HAL_RCC_ClockConfig+0x1f4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e02c      	b.n	800178c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2207      	movs	r2, #7
 8001738:	4013      	ands	r3, r2
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d1ee      	bne.n	800171e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2204      	movs	r2, #4
 8001746:	4013      	ands	r3, r2
 8001748:	d009      	beq.n	800175e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_RCC_ClockConfig+0x200>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800175e:	f000 f829 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001762:	0001      	movs	r1, r0
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_RCC_ClockConfig+0x1f8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	220f      	movs	r2, #15
 800176c:	401a      	ands	r2, r3
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_RCC_ClockConfig+0x204>)
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	58d3      	ldr	r3, [r2, r3]
 8001774:	221f      	movs	r2, #31
 8001776:	4013      	ands	r3, r2
 8001778:	000a      	movs	r2, r1
 800177a:	40da      	lsrs	r2, r3
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_RCC_ClockConfig+0x208>)
 800177e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_ClockConfig+0x20c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff f8cd 	bl	8000924 <HAL_InitTick>
 800178a:	0003      	movs	r3, r0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40022000 	.word	0x40022000
 8001798:	00001388 	.word	0x00001388
 800179c:	40021000 	.word	0x40021000
 80017a0:	fffff0ff 	.word	0xfffff0ff
 80017a4:	ffff8fff 	.word	0xffff8fff
 80017a8:	0800236c 	.word	0x0800236c
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ba:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2238      	movs	r2, #56	@ 0x38
 80017c0:	4013      	ands	r3, r2
 80017c2:	d10f      	bne.n	80017e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0adb      	lsrs	r3, r3, #11
 80017ca:	2207      	movs	r2, #7
 80017cc:	4013      	ands	r3, r2
 80017ce:	2201      	movs	r2, #1
 80017d0:	409a      	lsls	r2, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	4835      	ldr	r0, [pc, #212]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017da:	f7fe fc93 	bl	8000104 <__udivsi3>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e05d      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2238      	movs	r2, #56	@ 0x38
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e054      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f6:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2238      	movs	r2, #56	@ 0x38
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d138      	bne.n	8001874 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2203      	movs	r2, #3
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	2207      	movs	r2, #7
 8001814:	4013      	ands	r3, r2
 8001816:	3301      	adds	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d10d      	bne.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	4824      	ldr	r0, [pc, #144]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001824:	f7fe fc6e 	bl	8000104 <__udivsi3>
 8001828:	0003      	movs	r3, r0
 800182a:	0019      	movs	r1, r3
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	227f      	movs	r2, #127	@ 0x7f
 8001834:	4013      	ands	r3, r2
 8001836:	434b      	muls	r3, r1
 8001838:	617b      	str	r3, [r7, #20]
        break;
 800183a:	e00d      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	481c      	ldr	r0, [pc, #112]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001840:	f7fe fc60 	bl	8000104 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	0019      	movs	r1, r3
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	227f      	movs	r2, #127	@ 0x7f
 8001850:	4013      	ands	r3, r2
 8001852:	434b      	muls	r3, r1
 8001854:	617b      	str	r3, [r7, #20]
        break;
 8001856:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	0f5b      	lsrs	r3, r3, #29
 800185e:	2207      	movs	r2, #7
 8001860:	4013      	ands	r3, r2
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	6978      	ldr	r0, [r7, #20]
 800186a:	f7fe fc4b 	bl	8000104 <__udivsi3>
 800186e:	0003      	movs	r3, r0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	e015      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2238      	movs	r2, #56	@ 0x38
 800187a:	4013      	ands	r3, r2
 800187c:	2b20      	cmp	r3, #32
 800187e:	d103      	bne.n	8001888 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2238      	movs	r2, #56	@ 0x38
 800188e:	4013      	ands	r3, r2
 8001890:	2b18      	cmp	r3, #24
 8001892:	d103      	bne.n	800189c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001894:	23fa      	movs	r3, #250	@ 0xfa
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e001      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80018a0:	693b      	ldr	r3, [r7, #16]
}
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b006      	add	sp, #24
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	007a1200 	.word	0x007a1200

080018b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80018d0:	f7ff fff2 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d4:	0004      	movs	r4, r0
 80018d6:	f7ff fb3f 	bl	8000f58 <LL_RCC_GetAPB1Prescaler>
 80018da:	0003      	movs	r3, r0
 80018dc:	0b1a      	lsrs	r2, r3, #12
 80018de:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	221f      	movs	r2, #31
 80018e6:	4013      	ands	r3, r2
 80018e8:	40dc      	lsrs	r4, r3
 80018ea:	0023      	movs	r3, r4
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	080023ac 	.word	0x080023ac

080018f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e046      	b.n	8001998 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2288      	movs	r2, #136	@ 0x88
 800190e:	589b      	ldr	r3, [r3, r2]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d107      	bne.n	8001924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2284      	movs	r2, #132	@ 0x84
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe ff4e 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2288      	movs	r2, #136	@ 0x88
 8001928:	2124      	movs	r1, #36	@ 0x24
 800192a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	438a      	bics	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f000 faa4 	bl	8001e94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f000 f828 	bl	80019a4 <UART_SetConfig>
 8001954:	0003      	movs	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e01c      	b.n	8001998 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	490d      	ldr	r1, [pc, #52]	@ (80019a0 <HAL_UART_Init+0xa8>)
 800196a:	400a      	ands	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	212a      	movs	r1, #42	@ 0x2a
 800197a:	438a      	bics	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f000 fb33 	bl	8001ffc <UART_CheckIdleState>
 8001996:	0003      	movs	r3, r0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	ffffb7ff 	.word	0xffffb7ff

080019a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80019ac:	231a      	movs	r3, #26
 80019ae:	2220      	movs	r2, #32
 80019b0:	189b      	adds	r3, r3, r2
 80019b2:	19db      	adds	r3, r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4ac4      	ldr	r2, [pc, #784]	@ (8001ce8 <UART_SetConfig+0x344>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4abf      	ldr	r2, [pc, #764]	@ (8001cec <UART_SetConfig+0x348>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	68d9      	ldr	r1, [r3, #12]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	0003      	movs	r3, r0
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4ab9      	ldr	r2, [pc, #740]	@ (8001cf0 <UART_SetConfig+0x34c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a16:	4313      	orrs	r3, r2
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4ab4      	ldr	r2, [pc, #720]	@ (8001cf4 <UART_SetConfig+0x350>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	220f      	movs	r2, #15
 8001a38:	4393      	bics	r3, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	0003      	movs	r3, r0
 8001a46:	430b      	orrs	r3, r1
 8001a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4aaa      	ldr	r2, [pc, #680]	@ (8001cf8 <UART_SetConfig+0x354>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d131      	bne.n	8001ab8 <UART_SetConfig+0x114>
 8001a54:	4ba9      	ldr	r3, [pc, #676]	@ (8001cfc <UART_SetConfig+0x358>)
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	2203      	movs	r2, #3
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d01d      	beq.n	8001a9c <UART_SetConfig+0xf8>
 8001a60:	d823      	bhi.n	8001aaa <UART_SetConfig+0x106>
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d00c      	beq.n	8001a80 <UART_SetConfig+0xdc>
 8001a66:	d820      	bhi.n	8001aaa <UART_SetConfig+0x106>
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <UART_SetConfig+0xce>
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d00e      	beq.n	8001a8e <UART_SetConfig+0xea>
 8001a70:	e01b      	b.n	8001aaa <UART_SetConfig+0x106>
 8001a72:	231b      	movs	r3, #27
 8001a74:	2220      	movs	r2, #32
 8001a76:	189b      	adds	r3, r3, r2
 8001a78:	19db      	adds	r3, r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	e071      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001a80:	231b      	movs	r3, #27
 8001a82:	2220      	movs	r2, #32
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	19db      	adds	r3, r3, r7
 8001a88:	2202      	movs	r2, #2
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e06a      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001a8e:	231b      	movs	r3, #27
 8001a90:	2220      	movs	r2, #32
 8001a92:	189b      	adds	r3, r3, r2
 8001a94:	19db      	adds	r3, r3, r7
 8001a96:	2204      	movs	r2, #4
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e063      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001a9c:	231b      	movs	r3, #27
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	189b      	adds	r3, r3, r2
 8001aa2:	19db      	adds	r3, r3, r7
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e05c      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001aaa:	231b      	movs	r3, #27
 8001aac:	2220      	movs	r2, #32
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	19db      	adds	r3, r3, r7
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e055      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a90      	ldr	r2, [pc, #576]	@ (8001d00 <UART_SetConfig+0x35c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d106      	bne.n	8001ad0 <UART_SetConfig+0x12c>
 8001ac2:	231b      	movs	r3, #27
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	19db      	adds	r3, r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e049      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a86      	ldr	r2, [pc, #536]	@ (8001cf0 <UART_SetConfig+0x34c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13e      	bne.n	8001b58 <UART_SetConfig+0x1b4>
 8001ada:	4b88      	ldr	r3, [pc, #544]	@ (8001cfc <UART_SetConfig+0x358>)
 8001adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ade:	23c0      	movs	r3, #192	@ 0xc0
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	22c0      	movs	r2, #192	@ 0xc0
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d027      	beq.n	8001b3c <UART_SetConfig+0x198>
 8001aec:	22c0      	movs	r2, #192	@ 0xc0
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d82a      	bhi.n	8001b4a <UART_SetConfig+0x1a6>
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d011      	beq.n	8001b20 <UART_SetConfig+0x17c>
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d822      	bhi.n	8001b4a <UART_SetConfig+0x1a6>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <UART_SetConfig+0x16e>
 8001b08:	2280      	movs	r2, #128	@ 0x80
 8001b0a:	00d2      	lsls	r2, r2, #3
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00e      	beq.n	8001b2e <UART_SetConfig+0x18a>
 8001b10:	e01b      	b.n	8001b4a <UART_SetConfig+0x1a6>
 8001b12:	231b      	movs	r3, #27
 8001b14:	2220      	movs	r2, #32
 8001b16:	189b      	adds	r3, r3, r2
 8001b18:	19db      	adds	r3, r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e021      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001b20:	231b      	movs	r3, #27
 8001b22:	2220      	movs	r2, #32
 8001b24:	189b      	adds	r3, r3, r2
 8001b26:	19db      	adds	r3, r3, r7
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e01a      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001b2e:	231b      	movs	r3, #27
 8001b30:	2220      	movs	r2, #32
 8001b32:	189b      	adds	r3, r3, r2
 8001b34:	19db      	adds	r3, r3, r7
 8001b36:	2204      	movs	r2, #4
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e013      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001b3c:	231b      	movs	r3, #27
 8001b3e:	2220      	movs	r2, #32
 8001b40:	189b      	adds	r3, r3, r2
 8001b42:	19db      	adds	r3, r3, r7
 8001b44:	2208      	movs	r2, #8
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e00c      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001b4a:	231b      	movs	r3, #27
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	189b      	adds	r3, r3, r2
 8001b50:	19db      	adds	r3, r3, r7
 8001b52:	2210      	movs	r2, #16
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	e005      	b.n	8001b64 <UART_SetConfig+0x1c0>
 8001b58:	231b      	movs	r3, #27
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	19db      	adds	r3, r3, r7
 8001b60:	2210      	movs	r2, #16
 8001b62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <UART_SetConfig+0x34c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d000      	beq.n	8001b70 <UART_SetConfig+0x1cc>
 8001b6e:	e092      	b.n	8001c96 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001b70:	231b      	movs	r3, #27
 8001b72:	2220      	movs	r2, #32
 8001b74:	189b      	adds	r3, r3, r2
 8001b76:	19db      	adds	r3, r3, r7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d015      	beq.n	8001baa <UART_SetConfig+0x206>
 8001b7e:	dc18      	bgt.n	8001bb2 <UART_SetConfig+0x20e>
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00d      	beq.n	8001ba0 <UART_SetConfig+0x1fc>
 8001b84:	dc15      	bgt.n	8001bb2 <UART_SetConfig+0x20e>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <UART_SetConfig+0x1ec>
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d005      	beq.n	8001b9a <UART_SetConfig+0x1f6>
 8001b8e:	e010      	b.n	8001bb2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b90:	f7ff fe9c 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001b94:	0003      	movs	r3, r0
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001b98:	e014      	b.n	8001bc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <UART_SetConfig+0x360>)
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001b9e:	e011      	b.n	8001bc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ba0:	f7ff fe08 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ba8:	e00c      	b.n	8001bc4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001bb0:	e008      	b.n	8001bc4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8001bb6:	231a      	movs	r3, #26
 8001bb8:	2220      	movs	r2, #32
 8001bba:	189b      	adds	r3, r3, r2
 8001bbc:	19db      	adds	r3, r3, r7
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
        break;
 8001bc2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <UART_SetConfig+0x228>
 8001bca:	e147      	b.n	8001e5c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d08 <UART_SetConfig+0x364>)
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	5ad3      	ldrh	r3, [r2, r3]
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001bda:	f7fe fa93 	bl	8000104 <__udivsi3>
 8001bde:	0003      	movs	r3, r0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	0013      	movs	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	189b      	adds	r3, r3, r2
 8001bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d305      	bcc.n	8001bfe <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d906      	bls.n	8001c0c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8001bfe:	231a      	movs	r3, #26
 8001c00:	2220      	movs	r2, #32
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	19db      	adds	r3, r3, r7
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e127      	b.n	8001e5c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c18:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <UART_SetConfig+0x364>)
 8001c1a:	0052      	lsls	r2, r2, #1
 8001c1c:	5ad3      	ldrh	r3, [r2, r3]
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	69b8      	ldr	r0, [r7, #24]
 8001c2a:	69f9      	ldr	r1, [r7, #28]
 8001c2c:	f7fe faf6 	bl	800021c <__aeabi_uldivmod>
 8001c30:	0002      	movs	r2, r0
 8001c32:	000b      	movs	r3, r1
 8001c34:	0e11      	lsrs	r1, r2, #24
 8001c36:	021d      	lsls	r5, r3, #8
 8001c38:	430d      	orrs	r5, r1
 8001c3a:	0214      	lsls	r4, r2, #8
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68b8      	ldr	r0, [r7, #8]
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	1900      	adds	r0, r0, r4
 8001c4e:	4169      	adcs	r1, r5
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f7fe fadd 	bl	800021c <__aeabi_uldivmod>
 8001c62:	0002      	movs	r2, r0
 8001c64:	000b      	movs	r3, r1
 8001c66:	0013      	movs	r3, r2
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c6c:	23c0      	movs	r3, #192	@ 0xc0
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d309      	bcc.n	8001c88 <UART_SetConfig+0x2e4>
 8001c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c76:	2380      	movs	r3, #128	@ 0x80
 8001c78:	035b      	lsls	r3, r3, #13
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d204      	bcs.n	8001c88 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	e0e9      	b.n	8001e5c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8001c88:	231a      	movs	r3, #26
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	189b      	adds	r3, r3, r2
 8001c8e:	19db      	adds	r3, r3, r7
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	e0e2      	b.n	8001e5c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d000      	beq.n	8001ca4 <UART_SetConfig+0x300>
 8001ca2:	e083      	b.n	8001dac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8001ca4:	231b      	movs	r3, #27
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	189b      	adds	r3, r3, r2
 8001caa:	19db      	adds	r3, r3, r7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d015      	beq.n	8001cde <UART_SetConfig+0x33a>
 8001cb2:	dc2b      	bgt.n	8001d0c <UART_SetConfig+0x368>
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00d      	beq.n	8001cd4 <UART_SetConfig+0x330>
 8001cb8:	dc28      	bgt.n	8001d0c <UART_SetConfig+0x368>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <UART_SetConfig+0x320>
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d005      	beq.n	8001cce <UART_SetConfig+0x32a>
 8001cc2:	e023      	b.n	8001d0c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cc4:	f7ff fe02 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ccc:	e027      	b.n	8001d1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <UART_SetConfig+0x360>)
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001cd2:	e024      	b.n	8001d1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001cd4:	f7ff fd6e 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001cdc:	e01f      	b.n	8001d1e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001ce4:	e01b      	b.n	8001d1e <UART_SetConfig+0x37a>
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	cfff69f3 	.word	0xcfff69f3
 8001cec:	ffffcfff 	.word	0xffffcfff
 8001cf0:	40008000 	.word	0x40008000
 8001cf4:	11fff4ff 	.word	0x11fff4ff
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40004400 	.word	0x40004400
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	080023cc 	.word	0x080023cc
      default:
        pclk = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8001d10:	231a      	movs	r3, #26
 8001d12:	2220      	movs	r2, #32
 8001d14:	189b      	adds	r3, r3, r2
 8001d16:	19db      	adds	r3, r3, r7
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
        break;
 8001d1c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d100      	bne.n	8001d26 <UART_SetConfig+0x382>
 8001d24:	e09a      	b.n	8001e5c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <UART_SetConfig+0x4e8>)
 8001d2c:	0052      	lsls	r2, r2, #1
 8001d2e:	5ad3      	ldrh	r3, [r2, r3]
 8001d30:	0019      	movs	r1, r3
 8001d32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d34:	f7fe f9e6 	bl	8000104 <__udivsi3>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	005a      	lsls	r2, r3, #1
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	18d2      	adds	r2, r2, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	f7fe f9da 	bl	8000104 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	d921      	bls.n	8001d9e <UART_SetConfig+0x3fa>
 8001d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d21c      	bcs.n	8001d9e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	200e      	movs	r0, #14
 8001d6a:	2420      	movs	r4, #32
 8001d6c:	1903      	adds	r3, r0, r4
 8001d6e:	19db      	adds	r3, r3, r7
 8001d70:	210f      	movs	r1, #15
 8001d72:	438a      	bics	r2, r1
 8001d74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4013      	ands	r3, r2
 8001d80:	b299      	uxth	r1, r3
 8001d82:	1903      	adds	r3, r0, r4
 8001d84:	19db      	adds	r3, r3, r7
 8001d86:	1902      	adds	r2, r0, r4
 8001d88:	19d2      	adds	r2, r2, r7
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1902      	adds	r2, r0, r4
 8001d96:	19d2      	adds	r2, r2, r7
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	e05e      	b.n	8001e5c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8001d9e:	231a      	movs	r3, #26
 8001da0:	2220      	movs	r2, #32
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	19db      	adds	r3, r3, r7
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e057      	b.n	8001e5c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dac:	231b      	movs	r3, #27
 8001dae:	2220      	movs	r2, #32
 8001db0:	189b      	adds	r3, r3, r2
 8001db2:	19db      	adds	r3, r3, r7
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d015      	beq.n	8001de6 <UART_SetConfig+0x442>
 8001dba:	dc18      	bgt.n	8001dee <UART_SetConfig+0x44a>
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d00d      	beq.n	8001ddc <UART_SetConfig+0x438>
 8001dc0:	dc15      	bgt.n	8001dee <UART_SetConfig+0x44a>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <UART_SetConfig+0x428>
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d005      	beq.n	8001dd6 <UART_SetConfig+0x432>
 8001dca:	e010      	b.n	8001dee <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001dcc:	f7ff fd7e 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001dd4:	e014      	b.n	8001e00 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <UART_SetConfig+0x4ec>)
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001dda:	e011      	b.n	8001e00 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ddc:	f7ff fcea 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001de0:	0003      	movs	r3, r0
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001de4:	e00c      	b.n	8001e00 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001de6:	2380      	movs	r3, #128	@ 0x80
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8001dec:	e008      	b.n	8001e00 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8001df2:	231a      	movs	r3, #26
 8001df4:	2220      	movs	r2, #32
 8001df6:	189b      	adds	r3, r3, r2
 8001df8:	19db      	adds	r3, r3, r7
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
        break;
 8001dfe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8001e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d02a      	beq.n	8001e5c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <UART_SetConfig+0x4e8>)
 8001e0c:	0052      	lsls	r2, r2, #1
 8001e0e:	5ad3      	ldrh	r3, [r2, r3]
 8001e10:	0019      	movs	r1, r3
 8001e12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e14:	f7fe f976 	bl	8000104 <__udivsi3>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	18d2      	adds	r2, r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0019      	movs	r1, r3
 8001e2a:	0010      	movs	r0, r2
 8001e2c:	f7fe f96a 	bl	8000104 <__udivsi3>
 8001e30:	0003      	movs	r3, r0
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	d90a      	bls.n	8001e50 <UART_SetConfig+0x4ac>
 8001e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d205      	bcs.n	8001e50 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	e005      	b.n	8001e5c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8001e50:	231a      	movs	r3, #26
 8001e52:	2220      	movs	r2, #32
 8001e54:	189b      	adds	r3, r3, r2
 8001e56:	19db      	adds	r3, r3, r7
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	226a      	movs	r2, #106	@ 0x6a
 8001e60:	2101      	movs	r1, #1
 8001e62:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2268      	movs	r2, #104	@ 0x68
 8001e68:	2101      	movs	r1, #1
 8001e6a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	2200      	movs	r2, #0
 8001e70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8001e78:	231a      	movs	r3, #26
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	189b      	adds	r3, r3, r2
 8001e7e:	19db      	adds	r3, r3, r7
 8001e80:	781b      	ldrb	r3, [r3, #0]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b010      	add	sp, #64	@ 0x40
 8001e88:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	080023cc 	.word	0x080023cc
 8001e90:	00f42400 	.word	0x00f42400

08001e94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd8 <UART_AdvFeatureConfig+0x144>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d00b      	beq.n	8001ee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a43      	ldr	r2, [pc, #268]	@ (8001fdc <UART_AdvFeatureConfig+0x148>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe0 <UART_AdvFeatureConfig+0x14c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a34      	ldr	r2, [pc, #208]	@ (8001fe4 <UART_AdvFeatureConfig+0x150>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	2210      	movs	r2, #16
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe8 <UART_AdvFeatureConfig+0x154>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a25      	ldr	r2, [pc, #148]	@ (8001fec <UART_AdvFeatureConfig+0x158>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d01d      	beq.n	8001fae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <UART_AdvFeatureConfig+0x15c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	035b      	lsls	r3, r3, #13
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d10b      	bne.n	8001fae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <UART_AdvFeatureConfig+0x160>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff8 <UART_AdvFeatureConfig+0x164>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  }
}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	ffff7fff 	.word	0xffff7fff
 8001fdc:	fffdffff 	.word	0xfffdffff
 8001fe0:	fffeffff 	.word	0xfffeffff
 8001fe4:	fffbffff 	.word	0xfffbffff
 8001fe8:	ffffefff 	.word	0xffffefff
 8001fec:	ffffdfff 	.word	0xffffdfff
 8001ff0:	ffefffff 	.word	0xffefffff
 8001ff4:	ff9fffff 	.word	0xff9fffff
 8001ff8:	fff7ffff 	.word	0xfff7ffff

08001ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b092      	sub	sp, #72	@ 0x48
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2290      	movs	r2, #144	@ 0x90
 8002008:	2100      	movs	r1, #0
 800200a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800200c:	f7fe fce6 	bl	80009dc <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2208      	movs	r2, #8
 800201c:	4013      	ands	r3, r2
 800201e:	2b08      	cmp	r3, #8
 8002020:	d12d      	bne.n	800207e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002024:	2280      	movs	r2, #128	@ 0x80
 8002026:	0391      	lsls	r1, r2, #14
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <UART_CheckIdleState+0x14c>)
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	f000 f88e 	bl	8002150 <UART_WaitOnFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d022      	beq.n	800207e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002038:	f3ef 8310 	mrs	r3, PRIMASK
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002042:	2301      	movs	r3, #1
 8002044:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002048:	f383 8810 	msr	PRIMASK, r3
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2180      	movs	r1, #128	@ 0x80
 800205a:	438a      	bics	r2, r1
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002064:	f383 8810 	msr	PRIMASK, r3
}
 8002068:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2288      	movs	r2, #136	@ 0x88
 800206e:	2120      	movs	r1, #32
 8002070:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2284      	movs	r2, #132	@ 0x84
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e060      	b.n	8002140 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2204      	movs	r2, #4
 8002086:	4013      	ands	r3, r2
 8002088:	2b04      	cmp	r3, #4
 800208a:	d146      	bne.n	800211a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800208c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	03d1      	lsls	r1, r2, #15
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <UART_CheckIdleState+0x14c>)
 8002096:	9200      	str	r2, [sp, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	f000 f859 	bl	8002150 <UART_WaitOnFlagUntilTimeout>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d03b      	beq.n	800211a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a2:	f3ef 8310 	mrs	r3, PRIMASK
 80020a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80020a8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f383 8810 	msr	PRIMASK, r3
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4922      	ldr	r1, [pc, #136]	@ (800214c <UART_CheckIdleState+0x150>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f383 8810 	msr	PRIMASK, r3
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d4:	f3ef 8310 	mrs	r3, PRIMASK
 80020d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80020da:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80020de:	2301      	movs	r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f383 8810 	msr	PRIMASK, r3
}
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	438a      	bics	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	f383 8810 	msr	PRIMASK, r3
}
 8002104:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	228c      	movs	r2, #140	@ 0x8c
 800210a:	2120      	movs	r1, #32
 800210c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2284      	movs	r2, #132	@ 0x84
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e012      	b.n	8002140 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2288      	movs	r2, #136	@ 0x88
 800211e:	2120      	movs	r1, #32
 8002120:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	228c      	movs	r2, #140	@ 0x8c
 8002126:	2120      	movs	r1, #32
 8002128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2284      	movs	r2, #132	@ 0x84
 800213a:	2100      	movs	r1, #0
 800213c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	0018      	movs	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	b010      	add	sp, #64	@ 0x40
 8002146:	bd80      	pop	{r7, pc}
 8002148:	01ffffff 	.word	0x01ffffff
 800214c:	fffffedf 	.word	0xfffffedf

08002150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002160:	e051      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3301      	adds	r3, #1
 8002166:	d04e      	beq.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002168:	f7fe fc38 	bl	80009dc <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e051      	b.n	8002226 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2204      	movs	r2, #4
 800218a:	4013      	ands	r3, r2
 800218c:	d03b      	beq.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b80      	cmp	r3, #128	@ 0x80
 8002192:	d038      	beq.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b40      	cmp	r3, #64	@ 0x40
 8002198:	d035      	beq.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d111      	bne.n	80021cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2208      	movs	r2, #8
 80021ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f83c 	bl	8002230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2290      	movs	r2, #144	@ 0x90
 80021bc:	2108      	movs	r1, #8
 80021be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2284      	movs	r2, #132	@ 0x84
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e02c      	b.n	8002226 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	401a      	ands	r2, r3
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	429a      	cmp	r2, r3
 80021de:	d112      	bne.n	8002206 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2280      	movs	r2, #128	@ 0x80
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 f81f 	bl	8002230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2290      	movs	r2, #144	@ 0x90
 80021f6:	2120      	movs	r1, #32
 80021f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2284      	movs	r2, #132	@ 0x84
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e00f      	b.n	8002226 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4013      	ands	r3, r2
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	425a      	negs	r2, r3
 8002216:	4153      	adcs	r3, r2
 8002218:	b2db      	uxtb	r3, r3
 800221a:	001a      	movs	r2, r3
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d09e      	beq.n	8002162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	@ 0x38
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	617b      	str	r3, [r7, #20]
  return(result);
 800223e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
 8002242:	2301      	movs	r3, #1
 8002244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f383 8810 	msr	PRIMASK, r3
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4926      	ldr	r1, [pc, #152]	@ (80022f4 <UART_EndRxTransfer+0xc4>)
 800225a:	400a      	ands	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f383 8810 	msr	PRIMASK, r3
}
 8002268:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800226a:	f3ef 8310 	mrs	r3, PRIMASK
 800226e:	623b      	str	r3, [r7, #32]
  return(result);
 8002270:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	f383 8810 	msr	PRIMASK, r3
}
 800227e:	46c0      	nop			@ (mov r8, r8)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	491b      	ldr	r1, [pc, #108]	@ (80022f8 <UART_EndRxTransfer+0xc8>)
 800228c:	400a      	ands	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002292:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	f383 8810 	msr	PRIMASK, r3
}
 800229a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d118      	bne.n	80022d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a4:	f3ef 8310 	mrs	r3, PRIMASK
 80022a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80022aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ae:	2301      	movs	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2110      	movs	r1, #16
 80022c6:	438a      	bics	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f383 8810 	msr	PRIMASK, r3
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	228c      	movs	r2, #140	@ 0x8c
 80022da:	2120      	movs	r1, #32
 80022dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b00e      	add	sp, #56	@ 0x38
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	fffffedf 	.word	0xfffffedf
 80022f8:	effffffe 	.word	0xeffffffe

080022fc <memset>:
 80022fc:	0003      	movs	r3, r0
 80022fe:	1882      	adds	r2, r0, r2
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	7019      	strb	r1, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <__libc_init_array>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	2600      	movs	r6, #0
 8002310:	4c0c      	ldr	r4, [pc, #48]	@ (8002344 <__libc_init_array+0x38>)
 8002312:	4d0d      	ldr	r5, [pc, #52]	@ (8002348 <__libc_init_array+0x3c>)
 8002314:	1b64      	subs	r4, r4, r5
 8002316:	10a4      	asrs	r4, r4, #2
 8002318:	42a6      	cmp	r6, r4
 800231a:	d109      	bne.n	8002330 <__libc_init_array+0x24>
 800231c:	2600      	movs	r6, #0
 800231e:	f000 f819 	bl	8002354 <_init>
 8002322:	4c0a      	ldr	r4, [pc, #40]	@ (800234c <__libc_init_array+0x40>)
 8002324:	4d0a      	ldr	r5, [pc, #40]	@ (8002350 <__libc_init_array+0x44>)
 8002326:	1b64      	subs	r4, r4, r5
 8002328:	10a4      	asrs	r4, r4, #2
 800232a:	42a6      	cmp	r6, r4
 800232c:	d105      	bne.n	800233a <__libc_init_array+0x2e>
 800232e:	bd70      	pop	{r4, r5, r6, pc}
 8002330:	00b3      	lsls	r3, r6, #2
 8002332:	58eb      	ldr	r3, [r5, r3]
 8002334:	4798      	blx	r3
 8002336:	3601      	adds	r6, #1
 8002338:	e7ee      	b.n	8002318 <__libc_init_array+0xc>
 800233a:	00b3      	lsls	r3, r6, #2
 800233c:	58eb      	ldr	r3, [r5, r3]
 800233e:	4798      	blx	r3
 8002340:	3601      	adds	r6, #1
 8002342:	e7f2      	b.n	800232a <__libc_init_array+0x1e>
 8002344:	080023ec 	.word	0x080023ec
 8002348:	080023ec 	.word	0x080023ec
 800234c:	080023f0 	.word	0x080023f0
 8002350:	080023ec 	.word	0x080023ec

08002354 <_init>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235a:	bc08      	pop	{r3}
 800235c:	469e      	mov	lr, r3
 800235e:	4770      	bx	lr

08002360 <_fini>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr
